// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zm_sumpf_trap_pendulum;
#include maps\mp\zm_sumpf_zipline;
#include maps\mp\zm_sumpf_perks;

magic_box_init()
{
    level thread waitfor_flag_open_chest_location( "nw_magic_box" );
    level thread waitfor_flag_open_chest_location( "ne_magic_box" );
    level thread waitfor_flag_open_chest_location( "se_magic_box" );
    level thread waitfor_flag_open_chest_location( "sw_magic_box" );
    level thread zombie_zipline_clip();
    level.pandora_fx_func = ::swamp_pandora_fx_func;
}

swamp_pandora_fx_func()
{
    self.pandora_light = spawn( "script_model", self.origin );
    self.pandora_light.angles = self.angles + vectorscale( ( -1, -1, 0 ), 90.0 );
    self.pandora_light setmodel( "tag_origin" );

    if ( self.script_noteworthy == "start_chest" )
        playfxontag( level._effect["lght_marker"], self.pandora_light, "tag_origin" );
    else
        playfxontag( level._effect["lght_marker_old"], self.pandora_light, "tag_origin" );
}

waitfor_flag_open_chest_location( which )
{
    wait 3;

    switch ( which )
    {
        case "nw_magic_box":
            flag_wait_any( "unlock_hospital_downstairs", "unlock_hospital_upstairs" );
            penbuytrigger = getentarray( "pendulum_buy_trigger", "targetname" );

            foreach ( t_buy_trig in penbuytrigger )
            {
                t_buy_trig sethintstring( &"ZOMBIE_CLEAR_DEBRIS" );
                t_buy_trig setcursorhint( "HINT_NOICON" );
            }

            flag_wait( "nw_magic_box" );
            maps\mp\zm_sumpf_trap_pendulum::initpendulumtrap();
            array_thread( penbuytrigger, maps\mp\zm_sumpf_trap_pendulum::penthink );
            break;
        case "ne_magic_box":
            flag_wait( "ne_magic_box" );
            level thread maps\mp\zm_sumpf_zipline::initzipline();
            break;
        case "se_magic_box":
            flag_wait( "se_magic_box" );
            break;
        case "sw_magic_box":
            flag_wait( "sw_magic_box" );
            break;
        default:
            return;
    }

    if ( isdefined( level.randomize_perks ) && level.randomize_perks == 0 )
    {
        maps\mp\zm_sumpf_perks::randomize_vending_machines();
        level.vending_model_info = [];
        level.vending_model_info[level.vending_model_info.size] = "zombie_vending_jugg";
        level.vending_model_info[level.vending_model_info.size] = "zombie_vending_doubletap2";
        level.vending_model_info[level.vending_model_info.size] = "zombie_vending_revive_on";
        level.vending_model_info[level.vending_model_info.size] = "zombie_vending_sleight";
        level.randomize_perks = 1;
    }

    switch ( which )
    {
        case "nw_magic_box":
            flag_wait( "northwest_building_unlocked" );
            maps\mp\zm_sumpf_perks::vending_randomization_effect( 0 );
            break;
        case "ne_magic_box":
            flag_wait( "northeast_building_unlocked" );
            maps\mp\zm_sumpf_perks::vending_randomization_effect( 1 );
            break;
        case "se_magic_box":
            flag_wait( "southeast_building_unlocked" );
            maps\mp\zm_sumpf_perks::vending_randomization_effect( 2 );
            break;
        case "sw_magic_box":
            flag_wait( "southwest_building_unlocked" );
            maps\mp\zm_sumpf_perks::vending_randomization_effect( 3 );
            break;
    }
}

zombie_zipline_clip()
{
    precachemodel( "collision_wall_128x128x10" );
    precachemodel( "collision_geo_64x64x128" );
    collision = spawn( "script_model", ( 10712, 1615, -464 ) );
    collision setmodel( "collision_wall_128x128x10" );
    collision.angles = vectorscale( ( 0, 1, 0 ), 71.2 );
    collision hide();
    collision2 = spawn( "script_model", ( 10818, 1599, -464 ) );
    collision2 setmodel( "collision_wall_128x128x10" );
    collision2.angles = vectorscale( ( 0, 1, 0 ), 75.6 );
    collision2 hide();
    collision3 = spawn( "script_model", ( 9984, 1444, -473 ) );
    collision3 setmodel( "collision_geo_64x64x128" );
    collision3.angles = ( 0, 0, 0 );
    collision3 hide();
}
