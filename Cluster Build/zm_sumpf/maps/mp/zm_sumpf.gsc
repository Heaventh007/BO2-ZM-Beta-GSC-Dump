// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\_music;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zm_sumpf_fx;
#include maps\mp\zombies\_zm;
#include maps\mp\animscripts\zm_death;
#include maps\mp\zombies\_load;
#include maps\mp\zombies\_zm_ai_dogs;
#include maps\mp\gametypes_zm\_spawning;
#include maps\mp\zombies\_zm_weap_tesla;
#include maps\mp\zombies\_zm_weap_bowie;
#include maps\mp\zombies\_zm_weap_cymbal_monkey;
#include maps\mp\zombies\_zm_weap_claymore;
#include maps\mp\zombies\_zm_weap_ballistic_knife;
#include maps\mp\_sticky_grenade;
#include maps\mp\zombies\_zm_zonemgr;
#include maps\mp\createart\zm_sumpf_art;
#include maps\mp\zombies\_zm_game_module;
#include character\c_usa_dempsey_zm;
#include character\c_rus_nikolai_zm;
#include character\c_jap_takeo_zm;
#include character\c_ger_richtofen_zm;
#include mptype\player_t5_zm_theater;
#include character\c_usa_dempsey_zt;
#include character\c_rus_nikolai_zt;
#include character\c_jap_takeo_zt;
#include character\c_ger_richtofen_zt;
#include maps\mp\zm_sumpf_magic_box;
#include maps\mp\zm_sumpf_trap_perk_electric;
#include maps\mp\zombies\_zm_audio;

main()
{
    level._zombie_custom_add_weapons = ::custom_add_weapons;
    maps\mp\zm_sumpf_fx::main();
    maps\mp\zombies\_zm::init_fx();
    maps\mp\animscripts\zm_death::precache_gib_fx();
    maps\mp\zombies\_load::main();
    level.randomize_perks = 0;
    level.exit_level_func = ::exit_level_func;
    level.pulls_since_last_ray_gun = 0;
    level.pulls_since_last_tesla_gun = 0;
    level.player_drops_tesla_gun = 0;
    level.door_dialog_function = maps\mp\zombies\_zm::play_door_dialog;
    level.dogs_enabled = 1;
    level.zombie_rise_spawners = [];
    level.burning_zombies = [];
    level.use_zombie_heroes = 1;
    level.kzmb_name = "sumpf_kzmb";
    precachemodel( "zombie_zapper_cagelight_red" );
    precachemodel( "zombie_zapper_cagelight_green" );
    precacheshellshock( "electrocution" );
    precacheshellshock( "death" );
    level.dog_spawn_func = maps\mp\zombies\_zm_ai_dogs::dog_spawn_factory_logic;
    level.custom_ai_type = [];
    level.custom_ai_type[level.custom_ai_type.size] = maps\mp\zombies\_zm_ai_dogs::init;
    level.zombiemode_precache_player_model_override = ::precache_player_model_override;
    level.zombiemode_give_player_model_override = ::give_player_model_override;
    level.zombiemode_player_set_viewmodel_override = ::player_set_viewmodel_override;
    level.register_offhand_weapons_for_level_defaults_override = ::offhand_weapon_overrride;
    level.use_zombie_heroes = 1;
    level.player_spawn_func = ::sumpf_player_spawn_placement;
    maps\mp\gametypes_zm\_spawning::level_use_unified_spawning( 1 );
    level.givecustomloadout = ::givecustomloadout;
    level.precachecustomcharacters = ::precachecustomcharacters;
    level.givecustomcharacters = ::givecustomcharacters;
    initcharacterstartindex();
    level._round_start_func = maps\mp\zombies\_zm::round_start;
    level.zombiemode_using_doubletap_perk = 1;
    level.zombiemode_using_juggernaut_perk = 1;
    level.zombiemode_using_revive_perk = 1;
    level.zombiemode_using_sleightofhand_perk = 1;
    level._zombie_custom_add_weapons = ::custom_add_weapons;
    include_weapons();
    include_powerups();
    init_level_specific_wall_buy_fx();
    level._effect["zombie_grain"] = loadfx( "misc/fx_zombie_grain_cloud" );
    init_zombie_sumpf();
    maps\mp\zombies\_zm::init();
    maps\mp\zombies\_zm::post_main();
    maps\mp\zombies\_zm_weap_tesla::init();
    maps\mp\zombies\_zm_weap_bowie::init();
    maps\mp\zombies\_zm_weap_cymbal_monkey::init();
    maps\mp\zombies\_zm_weap_claymore::init();
    maps\mp\zombies\_zm_weap_ballistic_knife::init();
    maps\mp\zombies\_zm_ai_dogs::enable_dog_rounds();
    maps\mp\_sticky_grenade::init();
    level.zones = [];
    level.zone_manager_init_func = ::sumpf_zone_init;
    init_zones[0] = "center_building_upstairs";
    level thread maps\mp\zombies\_zm_zonemgr::manage_zones( init_zones );
    level.zombie_ai_limit = 24;
    level thread water_burst_overwrite();
    init_sounds();
    level.zombie_visionset = "zombie_sumpf";
    maps\mp\createart\zm_sumpf_art::main();
    level notify( "setup_rope" );
    level.has_pack_a_punch = 0;
    setculldist( 2400 );
    visionsetnaked( "zombie_sumpf", 0 );
    turn_power_on();
}

turn_power_on()
{
    flag_wait( "start_zombie_round_logic" );
    maps\mp\zombies\_zm_game_module::turn_power_on_and_open_doors();
}

givecustomloadout( takeallweapons, alreadyspawned )
{
    self giveweapon( "knife_zm" );
    self give_start_weapon( 1 );
}

precachecustomcharacters()
{
    character\c_usa_dempsey_zm::precache();
    character\c_rus_nikolai_zm::precache();
    character\c_jap_takeo_zm::precache();
    character\c_ger_richtofen_zm::precache();
    precachemodel( "viewmodel_usa_pow_arms" );
    precachemodel( "viewmodel_rus_prisoner_arms" );
    precachemodel( "viewmodel_vtn_nva_standard_arms" );
    precachemodel( "viewmodel_usa_hazmat_arms" );
}

givecustomcharacters()
{
    self detachall();

    switch ( self selectcharacterindextouse() )
    {
        case 0:
            self character\c_usa_dempsey_zm::main();
            self setviewmodel( "viewmodel_usa_pow_arms" );
            self.characterindex = 0;
            break;
        case 1:
            self character\c_rus_nikolai_zm::main();
            self setviewmodel( "viewmodel_rus_prisoner_arms" );
            self.characterindex = 1;
            break;
        case 2:
            self character\c_jap_takeo_zm::main();
            self setviewmodel( "viewmodel_vtn_nva_standard_arms" );
            self.characterindex = 2;
            break;
        case 3:
            self character\c_ger_richtofen_zm::main();
            self setviewmodel( "viewmodel_usa_hazmat_arms" );
            self.characterindex = 3;
            break;
    }

    self setmovespeedscale( 1 );
    self setsprintduration( 4 );
    self setsprintcooldown( 0 );
}

initcharacterstartindex()
{
    level.characterstartindex = randomint( 4 );
}

selectcharacterindextouse()
{
    if ( level.characterstartindex >= 4 )
        level.characterstartindex = 0;

    self.characterindex = level.characterstartindex;
    level.characterstartindex++;
    return self.characterindex;
}

setup_water_physics()
{

}

sumpf_zone_init()
{
    flag_init( "always_on" );
    flag_set( "always_on" );
    add_adjacent_zone( "center_building_upstairs", "center_building_upstairs_buy", "unlock_hospital_upstairs" );
    add_adjacent_zone( "center_building_upstairs", "center_building_combined", "unlock_hospital_downstairs" );
    add_adjacent_zone( "center_building_upstairs_buy", "center_building_combined", "unlock_hospital_upstairs" );
    add_adjacent_zone( "center_building_upstairs_buy", "center_building_combined", "unlock_hospital_downstairs" );
    add_adjacent_zone( "center_building_combined", "northeast_outside", "ne_magic_box" );
    add_adjacent_zone( "center_building_combined", "northwest_outside", "nw_magic_box" );
    add_adjacent_zone( "center_building_combined", "southeast_outside", "se_magic_box" );
    add_adjacent_zone( "center_building_combined", "southwest_outside", "sw_magic_box" );
    add_adjacent_zone( "northeast_outside", "northeast_building", "northeast_building_unlocked" );
    add_adjacent_zone( "northwest_outside", "northwest_building", "northwest_building_unlocked" );
    add_adjacent_zone( "southeast_outside", "southeast_building", "southeast_building_unlocked" );
    add_adjacent_zone( "southwest_outside", "southwest_building", "southwest_building_unlocked" );
}

init_sounds()
{
    maps\mp\zombies\_zm_utility::add_sound( "wooden_door", "zmb_door_wood_open" );
    iprintlnbold( "init_audio" );
    level thread toilet_useage();
    level thread radio_one();
    level thread radio_two();
    level thread radio_three();
    level thread radio_eggs();
    level thread battle_radio();
    level thread whisper_radio();
    level thread meteor_trigger();
    level thread book_useage();
    level thread setup_custom_vox();
    level thread superegg_one();
    level thread superegg_two();
    level thread superegg_three();
    level thread super_egg();
}

precache_player_model_override()
{
    mptype\player_t5_zm_theater::precache();
}

give_player_model_override( entity_num )
{
    if ( isdefined( self.zm_random_char ) )
        entity_num = self.zm_random_char;

    switch ( entity_num )
    {
        case 0:
            character\c_usa_dempsey_zt::main();
            break;
        case 1:
            character\c_rus_nikolai_zt::main();
            break;
        case 2:
            character\c_jap_takeo_zt::main();
            break;
        case 3:
            character\c_ger_richtofen_zt::main();
            break;
    }
}

player_set_viewmodel_override( entity_num )
{
    switch ( self.entity_num )
    {
        case 0:
            self setviewmodel( "viewmodel_usa_pow_arms" );
            break;
        case 1:
            self setviewmodel( "viewmodel_rus_prisoner_arms" );
            break;
        case 2:
            self setviewmodel( "viewmodel_vtn_nva_standard_arms" );
            break;
        case 3:
            self setviewmodel( "viewmodel_usa_hazmat_arms" );
            break;
    }
}

offhand_weapon_overrride()
{
    register_lethal_grenade_for_level( "frag_grenade_zm" );
    level.zombie_lethal_grenade_player_init = "frag_grenade_zm";
    register_tactical_grenade_for_level( "cymbal_monkey_zm" );
    level.zombie_tactical_grenade_player_init = undefined;
    register_placeable_mine_for_level( "claymore_zm" );
    level.zombie_placeable_mine_player_init = undefined;
    register_melee_weapon_for_level( "knife_zm" );
    level.zombie_melee_weapon_player_init = "knife_zm";
}

include_weapons()
{
    include_weapon( "knife_zm", 0 );
    include_weapon( "frag_grenade_zm", 0 );
    include_weapon( "claymore_zm", 0 );
    include_weapon( "sticky_grenade_zm", 0 );
    include_weapon( "m1911_zm", 0 );
    include_weapon( "m1911_upgraded_zm", 0 );
    include_weapon( "python_zm" );
    include_weapon( "python_upgraded_zm", 0 );
    include_weapon( "cz75_zm" );
    include_weapon( "cz75_upgraded_zm", 0 );
    include_weapon( "m14_zm", 0 );
    include_weapon( "m14_upgraded_zm", 0 );
    include_weapon( "m16_zm", 0 );
    include_weapon( "m16_gl_upgraded_zm", 0 );
    include_weapon( "g11_lps_zm" );
    include_weapon( "g11_lps_upgraded_zm", 0 );
    include_weapon( "famas_zm" );
    include_weapon( "famas_upgraded_zm", 0 );
    include_weapon( "ak74u_zm", 0 );
    include_weapon( "ak74u_upgraded_zm", 0 );
    include_weapon( "mp5k_zm", 0 );
    include_weapon( "mp5k_upgraded_zm", 0 );
    include_weapon( "mp40_zm", 0 );
    include_weapon( "mp40_upgraded_zm", 0 );
    include_weapon( "mpl_zm", 0 );
    include_weapon( "mpl_upgraded_zm", 0 );
    include_weapon( "pm63_zm", 0 );
    include_weapon( "pm63_upgraded_zm", 0 );
    include_weapon( "spectre_zm" );
    include_weapon( "spectre_upgraded_zm", 0 );
    include_weapon( "cz75dw_zm" );
    include_weapon( "cz75dw_upgraded_zm", 0 );
    include_weapon( "ithaca_zm", 0 );
    include_weapon( "ithaca_upgraded_zm", 0 );
    include_weapon( "rottweil72_zm", 0 );
    include_weapon( "rottweil72_upgraded_zm", 0 );
    include_weapon( "spas_zm" );
    include_weapon( "spas_upgraded_zm", 0 );
    include_weapon( "hs10_zm" );
    include_weapon( "hs10_upgraded_zm", 0 );
    include_weapon( "aug_acog_zm" );
    include_weapon( "aug_acog_mk_upgraded_zm", 0 );
    include_weapon( "galil_zm" );
    include_weapon( "galil_upgraded_zm", 0 );
    include_weapon( "commando_zm" );
    include_weapon( "commando_upgraded_zm", 0 );
    include_weapon( "fnfal_zm" );
    include_weapon( "fnfal_upgraded_zm", 0 );
    include_weapon( "dragunov_zm" );
    include_weapon( "dragunov_upgraded_zm", 0 );
    include_weapon( "l96a1_zm" );
    include_weapon( "l96a1_upgraded_zm", 0 );
    include_weapon( "rpk_zm" );
    include_weapon( "rpk_upgraded_zm", 0 );
    include_weapon( "hk21_zm" );
    include_weapon( "hk21_upgraded_zm", 0 );
    include_weapon( "m72_law_zm" );
    include_weapon( "m72_law_upgraded_zm", 0 );
    include_weapon( "china_lake_zm" );
    include_weapon( "china_lake_upgraded_zm", 0 );
    include_weapon( "cymbal_monkey_zm" );
    include_weapon( "ray_gun_zm" );
    include_weapon( "ray_gun_upgraded_zm", 0 );
    include_weapon( "crossbow_explosive_zm" );
    include_weapon( "crossbow_explosive_upgraded_zm", 0 );
    precacheitem( "explosive_bolt_zm" );
    precacheitem( "explosive_bolt_upgraded_zm" );
    include_weapon( "tesla_gun_zm" );
    include_weapon( "tesla_gun_upgraded_zm", 0 );
    include_weapon( "knife_ballistic_zm" );
    include_weapon( "knife_ballistic_upgraded_zm", 0 );
    include_weapon( "knife_ballistic_bowie_zm", 0 );
    include_weapon( "knife_ballistic_bowie_upgraded_zm", 0 );
    level._uses_retrievable_ballisitic_knives = 1;
    include_weapon( "beretta93r_zm", 0 );
    include_weapon( "beretta93r_upgraded_zm", 0 );
    include_weapon( "870mcs_zm", 0 );
    include_weapon( "870mcs_upgraded_zm", 0 );
    add_limited_weapon( "m1911_zm", 0 );
    add_limited_weapon( "tesla_gun_zm", 1 );
    add_limited_weapon( "crossbow_explosive_zm", 1 );
    add_limited_weapon( "knife_ballistic_zm", 1 );
}

custom_add_weapons()
{
    add_zombie_weapon( "m1911_zm", "m1911_upgraded_zm", &"ZOMBIE_WEAPON_M1911", 50, "pistol", "", undefined );
    add_zombie_weapon( "python_zm", "python_upgraded_zm", &"ZOMBIE_WEAPON_PYTHON", 50, "pistol", "", undefined );
    add_zombie_weapon( "ak74u_zm", "ak74u_upgraded_zm", &"ZOMBIE_WEAPON_AK74U", 1200, "smg", "", undefined );
    add_zombie_weapon( "mp5k_zm", "mp5k_upgraded_zm", &"ZOMBIE_WEAPON_MP5K", 1000, "smg", "", undefined );
    add_zombie_weapon( "spas_zm", "spas_upgraded_zm", &"ZOMBIE_WEAPON_SPAS", 50, "shotgun", "", undefined );
    add_zombie_weapon( "rottweil72_zm", "rottweil72_upgraded_zm", &"ZOMBIE_WEAPON_ROTTWEIL72", 500, "shotgun", "", undefined );
    add_zombie_weapon( "m14_zm", "m14_upgraded_zm", &"ZOMBIE_WEAPON_M14", 500, "rifle", "", undefined );
    add_zombie_weapon( "m16_zm", "m16_gl_upgraded_zm", &"ZOMBIE_WEAPON_M16", 1200, "burstrifle", "", undefined );
    add_zombie_weapon( "galil_zm", "galil_upgraded_zm", &"ZOMBIE_WEAPON_GALIL", 50, "assault", "", undefined );
    add_zombie_weapon( "fnfal_zm", "fnfal_upgraded_zm", &"ZOMBIE_WEAPON_FNFAL", 50, "burstrifle", "", undefined );
    add_zombie_weapon( "frag_grenade_zm", undefined, &"ZOMBIE_WEAPON_FRAG_GRENADE", 250, "grenade", "", undefined );
    add_zombie_weapon( "sticky_grenade_zm", undefined, &"ZOMBIE_WEAPON_STICKY_GRENADE", 250, "grenade", "", undefined );
    add_zombie_weapon( "claymore_zm", undefined, &"ZOMBIE_WEAPON_CLAYMORE", 1000, "grenade", "", undefined );
    add_zombie_weapon( "cymbal_monkey_zm", undefined, &"ZOMBIE_WEAPON_SATCHEL_2000", 2000, "monkey", "", undefined );
    add_zombie_weapon( "ray_gun_zm", "ray_gun_upgraded_zm", &"ZOMBIE_WEAPON_RAYGUN", 10000, "raygun", "", undefined );
    add_zombie_weapon( "crossbow_explosive_zm", "crossbow_explosive_upgraded_zm", &"ZOMBIE_WEAPON_CROSSBOW_EXPOLOSIVE", 10, "crossbow", "", undefined );
    add_zombie_weapon( "knife_ballistic_zm", "knife_ballistic_upgraded_zm", &"ZOMBIE_WEAPON_KNIFE_BALLISTIC", 10, "sickle", "", undefined );
    add_zombie_weapon( "knife_ballistic_bowie_zm", "knife_ballistic_bowie_upgraded_zm", &"ZOMBIE_WEAPON_KNIFE_BALLISTIC", 10, "sickle", "", undefined );
    add_zombie_weapon( "cz75_zm", "cz75_upgraded_zm", &"ZOMBIE_WEAPON_CZ75", 50, "pistol", "", undefined );
    add_zombie_weapon( "mp40_zm", "mp40_upgraded_zm", &"ZOMBIE_WEAPON_MP40", 1000, "smg", "", undefined );
    add_zombie_weapon( "mpl_zm", "mpl_upgraded_zm", &"ZOMBIE_WEAPON_MPL", 1000, "smg", "", undefined );
    add_zombie_weapon( "pm63_zm", "pm63_upgraded_zm", &"ZOMBIE_WEAPON_PM63", 1000, "smg", "", undefined );
    add_zombie_weapon( "spectre_zm", "spectre_upgraded_zm", &"ZOMBIE_WEAPON_SPECTRE", 50, "smg", "", undefined );
    add_zombie_weapon( "cz75dw_zm", "cz75dw_upgraded_zm", &"ZOMBIE_WEAPON_CZ75DW", 50, "dualwield", "", undefined );
    add_zombie_weapon( "ithaca_zm", "ithaca_upgraded_zm", &"ZOMBIE_WEAPON_ITHACA", 1500, "shotgun", "", undefined );
    add_zombie_weapon( "hs10_zm", "hs10_upgraded_zm", &"ZOMBIE_WEAPON_HS10", 50, "shotgun", "", undefined );
    add_zombie_weapon( "g11_lps_zm", "g11_lps_upgraded_zm", &"ZOMBIE_WEAPON_G11", 900, "burstrifle", "", undefined );
    add_zombie_weapon( "famas_zm", "famas_upgraded_zm", &"ZOMBIE_WEAPON_FAMAS", 50, "burstrifle", "", undefined );
    add_zombie_weapon( "aug_acog_zm", "aug_acog_mk_upgraded_zm", &"ZOMBIE_WEAPON_AUG", 1200, "assault", "", undefined );
    add_zombie_weapon( "commando_zm", "commando_upgraded_zm", &"ZOMBIE_WEAPON_COMMANDO", 100, "assault", "", undefined );
    add_zombie_weapon( "dragunov_zm", "dragunov_upgraded_zm", &"ZOMBIE_WEAPON_DRAGUNOV", 2500, "sniper", "", undefined );
    add_zombie_weapon( "l96a1_zm", "l96a1_upgraded_zm", &"ZOMBIE_WEAPON_L96A1", 50, "sniper", "", undefined );
    add_zombie_weapon( "rpk_zm", "rpk_upgraded_zm", &"ZOMBIE_WEAPON_RPK", 4000, "mg", "", undefined );
    add_zombie_weapon( "hk21_zm", "hk21_upgraded_zm", &"ZOMBIE_WEAPON_HK21", 50, "mg", "", undefined );
    add_zombie_weapon( "m72_law_zm", "m72_law_upgraded_zm", &"ZOMBIE_WEAPON_M72_LAW", 2000, "launcher", "", undefined );
    add_zombie_weapon( "china_lake_zm", "china_lake_upgraded_zm", &"ZOMBIE_WEAPON_CHINA_LAKE", 2000, "launcher", "", undefined );
    add_zombie_weapon( "tesla_gun_zm", "tesla_gun_upgraded_zm", &"ZOMBIE_WEAPON_TESLA", 10, "tesla", "", undefined );
    add_zombie_weapon( "beretta93r_zm", "beretta93r_upgraded_zm", &"ZOMBIE_WEAPON_BERETTA93r", 1000, "", "", undefined );
    add_zombie_weapon( "870mcs_zm", "870mcs_upgraded_zm", &"ZOMBIE_WEAPON_870MCS", 1500, "shotgun", "", undefined );
}

include_powerups()
{
    include_powerup( "nuke" );
    include_powerup( "insta_kill" );
    include_powerup( "double_points" );
    include_powerup( "full_ammo" );
    include_powerup( "carpenter" );
}

init_level_specific_wall_buy_fx()
{
    level._effect["frag_grenade_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_frag_nade" );
    level._effect["an94_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_an94" );
    level._effect["ballista_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_ballista" );
    level._effect["fnfal_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_fal" );
    level._effect["mp40_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_mp40" );
    level._effect["mp44_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_stg44" );
    level._effect["thompson_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_thompson" );
}

init_zombie_sumpf()
{
    thread maps\mp\zm_sumpf_magic_box::magic_box_init();
    level thread maps\mp\zm_sumpf_trap_perk_electric::init_elec_trap_trigs();
    ziphintdeactivated = getent( "zipline_deactivated_hint_trigger", "targetname" );
    ziphintdeactivated sethintstring( &"ZOMBIE_ZIPLINE_DEACTIVATED" );
    ziphintdeactivated setcursorhint( "HINT_NOICON" );
}

no_gib_spawn_func()
{
    self.no_gib = 1;
}

turnlightgreen( name )
{
    zapper_lights = getentarray( name, "targetname" );

    for ( i = 0; i < zapper_lights.size; i++ )
    {
        zapper_lights[i] setmodel( "zombie_zapper_cagelight_green" );

        if ( isdefined( zapper_lights[i].target ) )
        {
            old_light_effect = getent( zapper_lights[i].target, "targetname" );
            light_effect = spawn( "script_model", zapper_lights[i].origin + vectorscale( ( 0, 0, 1 ), 10.0 ) );
            light_effect setmodel( "tag_origin" );
            light_effect.angles = vectorscale( ( 0, 1, 0 ), 270.0 );
            light_effect.targetname = "effect_" + name + i;
            old_light_effect delete();
            zapper_lights[i].target = light_effect.targetname;
            playfxontag( level._effect["zapper_light_ready"], light_effect, "tag_origin" );
        }
    }
}

turnlightred( name )
{
    zapper_lights = getentarray( name, "targetname" );

    for ( i = 0; i < zapper_lights.size; i++ )
    {
        zapper_lights[i] setmodel( "zombie_zapper_cagelight_red" );

        if ( isdefined( zapper_lights[i].target ) )
        {
            old_light_effect = getent( zapper_lights[i].target, "targetname" );
            light_effect = spawn( "script_model", zapper_lights[i].origin + vectorscale( ( 0, 0, 1 ), 10.0 ) );
            light_effect setmodel( "tag_origin" );
            light_effect.angles = vectorscale( ( 0, 1, 0 ), 270.0 );
            light_effect.targetname = "effect_" + name + i;
            old_light_effect delete();
            zapper_lights[i].target = light_effect.targetname;
            playfxontag( level._effect["zapper_light_notready"], light_effect, "tag_origin" );
        }
    }
}

book_useage()
{
    book_counter = 0;
    book_trig = getent( "book_trig", "targetname" );
    book_trig setcursorhint( "HINT_NOICON" );
    book_trig usetriggerrequirelookat();

    if ( isdefined( book_trig ) )
    {
        maniac_l = getent( "maniac_l", "targetname" );
        maniac_r = getent( "maniac_r", "targetname" );
        book_trig waittill( "trigger", player );
        iprintlnbold( "Book used" );

        if ( isdefined( maniac_l ) )
            maniac_l playsound( "maniac_l" );

        if ( isdefined( maniac_r ) )
            maniac_r playsound( "maniac_r" );
    }
}

toilet_useage()
{
    toilet_counter = 0;
    toilet_trig = getent( "toilet", "targetname" );
    toilet_trig setcursorhint( "HINT_NOICON" );
    toilet_trig usetriggerrequirelookat();
    toilet_trig playloopsound( "phone_hook" );

    if ( !isdefined( level.music_override ) )
        level.music_override = 0;

    toilet_trig waittill( "trigger", player );
    toilet_trig stoploopsound( 0.5 );
    toilet_trig playloopsound( "phone_dialtone" );
    iprintlnbold( "phone used 1" );
    wait 0.5;
    toilet_trig waittill( "trigger", player );
    toilet_trig stoploopsound( 0.5 );
    toilet_trig playsound( "dial_9", "sound_done" );
    iprintlnbold( "phone used 2" );
    toilet_trig waittill( "trigger", player );
    toilet_trig playsound( "dial_1", "sound_done" );
    iprintlnbold( "phone used 3" );
    toilet_trig waittill( "trigger", player );
    iprintlnbold( "phone used 4" );
    toilet_trig playsound( "dial_1" );
    wait 0.5;
    toilet_trig playsound( "riiing" );
    wait 1;
    toilet_trig playsound( "riiing" );
    wait 1;
    toilet_trig playsound( "toilet_flush", "sound_done" );
    playsoundatposition( "zmb_cha_ching", toilet_trig.origin );
    level thread play_music_easter_egg( player );
}

play_music_easter_egg( player )
{
    level.music_override = 1;
    level thread maps\mp\zombies\_zm_audio::change_zombie_music( "egg" );
    iprintlnbold( "song playing" );
    wait 4;

    if ( isdefined( player ) )
        player maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "music_activate" );

    wait 236;
    level.music_override = 0;
    level thread maps\mp\zombies\_zm_audio::change_zombie_music( "wave_loop" );
}

play_radio_sounds()
{
    iprintlnbold( "pa system playing playing" );
    radio_one = getent( "radio_one_origin", "targetname" );
    radio_two = getent( "radio_two_origin", "targetname" );
    radio_three = getent( "radio_three_origin", "targetname" );
    pa_system = getent( "speaker_in_attic", "targetname" );
    radio_one stoploopsound( 2 );
    radio_two stoploopsound( 2 );
    radio_three stoploopsound( 2 );
    wait 0.05;
    pa_system playsound( "secret_message", "message_complete" );
    pa_system waittill( "message_complete" );
    radio_one playsound( "static" );
    radio_two playsound( "static" );
    radio_three playsound( "static" );
}

radio_eggs()
{
    if ( !isdefined( level.radio_counter ) )
        level.radio_counter = 0;

    while ( level.radio_counter < 3 )
        wait 2;

    level thread play_radio_sounds();
    iprintlnbold( "super egg Pa" );
}

superegg_one()
{
    if ( !isdefined( level.superegg_counter ) )
        level.superegg_counter = 0;

    superegg_one_trig = getent( "superegg_radio_trigger_1", "targetname" );
    superegg_one_trig usetriggerrequirelookat();
    superegg_one_trig setcursorhint( "HINT_NOICON" );
    superegg_radio_one = getent( "superegg_radio_origin_1", "targetname" );
    superegg_one_trig waittill( "trigger" );
    iprintlnbold( "superegg 1" );
    level.superegg_counter = level.superegg_counter + 1;
    superegg_radio_one playloopsound( "static_loop" );
}

superegg_two()
{
    if ( !isdefined( level.superegg_counter ) )
        level.superegg_counter = 0;

    superegg_two_trig = getent( "superegg_radio_trigger_2", "targetname" );
    superegg_two_trig usetriggerrequirelookat();
    superegg_two_trig setcursorhint( "HINT_NOICON" );
    superegg_radio_two = getent( "superegg_radio_origin_2", "targetname" );
    superegg_two_trig waittill( "trigger" );
    iprintlnbold( "superegg 2" );
    level.superegg_counter = level.superegg_counter + 1;
    superegg_radio_two playloopsound( "static_loop" );
}

superegg_three()
{
    if ( !isdefined( level.superegg_counter ) )
        level.superegg_counter = 0;

    superegg_three_trig = getent( "superegg_radio_trigger_3", "targetname" );
    superegg_three_trig usetriggerrequirelookat();
    superegg_three_trig setcursorhint( "HINT_NOICON" );
    superegg_radio_three = getent( "superegg_radio_origin_3", "targetname" );
    superegg_three_trig waittill( "trigger" );
    iprintlnbold( "superegg 3" );
    level.superegg_counter = level.superegg_counter + 1;
    superegg_radio_three playloopsound( "static_loop" );
}

play_super_egg_radio_pa_sounds()
{
    superegg_radio_one = getent( "radio_one_origin", "targetname" );
    superegg_radio_two = getent( "radio_two_origin", "targetname" );
    superegg_radio_three = getent( "radio_three_origin", "targetname" );
    pa_system = getent( "speaker_in_attic", "targetname" );
    superegg_radio_one stoploopsound( 2 );
    superegg_radio_two stoploopsound( 2 );
    superegg_radio_three stoploopsound( 2 );
    wait 0.05;
    pa_system playsound( "superegg_secret_message", "message_complete" );
    pa_system waittill( "message_complete" );
    superegg_radio_one playsound( "static" );
    superegg_radio_two playsound( "static" );
    superegg_radio_three playsound( "static" );
}

super_egg()
{
    if ( !isdefined( level.superegg_counter ) )
        level.superegg_counter = 0;

    while ( level.superegg_counter < 3 )
        wait 2;

    level thread play_super_egg_radio_pa_sounds();
}

battle_radio()
{
    if ( !isdefined( level.radio_counter ) )
        level.radio_counter = 0;

    battle_radio_trig = getent( "battle_radio_trigger", "targetname" );
    battle_radio_trig usetriggerrequirelookat();
    battle_radio_trig setcursorhint( "HINT_NOICON" );
    battle_radio_origin = getent( "battle_radio_origin", "targetname" );
    battle_radio_trig waittill( "trigger", player );
    iprintlnbold( "battle radio" );
    battle_radio_origin playsound( "battle_message" );
}

whisper_radio()
{
    if ( !isdefined( level.radio_counter ) )
        level.radio_counter = 0;

    whisper_radio_trig = getent( "whisper_radio_trigger", "targetname" );
    whisper_radio_trig usetriggerrequirelookat();
    whisper_radio_trig setcursorhint( "HINT_NOICON" );
    whisper_radio_origin = getent( "whisper_radio_origin", "targetname" );
    whisper_radio_trig waittill( "trigger" );
    iprintlnbold( "whisper radio" );
    whisper_radio_origin playsound( "whisper_message" );
}

radio_one()
{
    if ( !isdefined( level.radio_counter ) )
        level.radio_counter = 0;

    radio_one_trig = getent( "radio_one", "targetname" );
    radio_one_trig usetriggerrequirelookat();
    radio_one_trig setcursorhint( "HINT_NOICON" );
    radio_one = getent( "radio_one_origin", "targetname" );
    radio_one_trig waittill( "trigger" );
    iprintlnbold( "radio 1" );
    level.radio_counter = level.radio_counter + 1;
    radio_one playloopsound( "static_loop" );
}

radio_two()
{
    if ( !isdefined( level.radio_counter ) )
        level.radio_counter = 0;

    radio_two_trig = getent( "radio_two", "targetname" );
    radio_two_trig usetriggerrequirelookat();
    radio_two_trig setcursorhint( "HINT_NOICON" );
    radio_two = getent( "radio_two_origin", "targetname" );
    radio_two_trig waittill( "trigger", players );
    iprintlnbold( "radio 2" );
    level.radio_counter = level.radio_counter + 1;
    radio_two playloopsound( "static_loop" );
}

radio_three()
{
    if ( !isdefined( level.radio_counter ) )
        level.radio_counter = 0;

    radio_three_trig = getent( "radio_three_trigger", "targetname" );
    radio_three_trig usetriggerrequirelookat();
    radio_three_trig setcursorhint( "HINT_NOICON" );
    radio_three = getent( "radio_three_origin", "targetname" );
    radio_three_trig waittill( "trigger", players );
    iprintlnbold( "radio 3" );
    level.radio_counter = level.radio_counter + 1;
    radio_three playloopsound( "static_loop" );
}

meteor_trigger()
{
    player = getplayers();
    level endon( "meteor_triggered" );
    dmgtrig = getent( "meteor", "targetname" );

    while ( true )
    {
        dmgtrig waittill( "trigger", player );

        if ( distancesquared( player.origin, dmgtrig.origin ) < 1201216 )
        {
            iprintlnbold( "meteor shot" );
            player thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "meteor" );
            level notify( "meteor_triggered" );
        }
        else
            wait 0.1;
    }
}

setup_custom_vox()
{
    wait 1;
    level.plr_vox["level"]["jugga"] = "gen_perk_jugga";
    level.plr_vox["level"]["doubletap"] = "gen_perk_dbltap";
    level.plr_vox["level"]["speed"] = "gen_perk_speed";
    level.plr_vox["level"]["revive"] = "gen_perk_revive";
    level.plr_vox["level"]["zipline"] = "zipline";
    level.plr_vox["level"]["trap_log"] = "trap_log";
    level.plr_vox["level"]["trap_barrel"] = "trap_barrel";
    level.plr_vox["level"]["meteor"] = "meteor";
}

exit_level_func()
{
    zombies = getaiarray( level.zombie_team );

    foreach ( zombie in zombies )
    {
        if ( isdefined( zombie.ignore_solo_last_stand ) && zombie.ignore_solo_last_stand )
            continue;

        if ( isdefined( zombie.find_exit_point ) )
        {
            zombie thread [[ zombie.find_exit_point ]]();
            continue;
        }

        if ( zombie.ignoreme )
        {
            zombie thread maps\mp\zombies\_zm::default_delayed_exit();
            continue;
        }

        zombie thread maps\mp\zombies\_zm::default_find_exit_point();
    }
}

sumpf_player_spawn_placement()
{
    structs = getstructarray( "initial_spawn_points", "targetname" );
    flag_wait( "start_zombie_round_logic" );
    players = get_players();

    for ( i = 0; i < players.size; i++ )
    {
        players[i] setorigin( structs[i].origin );
        players[i] setplayerangles( structs[i].angles );
        players[i].spectator_respawn = structs[i];
    }
}

water_burst_overwrite()
{
    level waittill( "between_round_over" );
    level._effect["rise_burst_water"] = loadfx( "maps/zombie/fx_zombie_body_wtr_burst_smpf" );
    level._effect["rise_billow_water"] = loadfx( "maps/zombie/fx_zombie_body_wtr_billow_smpf" );
}
