// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_ambientpackage;
#include clientscripts\mp\_music;
#include clientscripts\mp\_audio;

main()
{
    declareambientroom( "sumpf_default", 1 );
    declareambientpackage( "sumpf_default" );
    setambientroomreverb( "sumpf_default", "socotra_outdoor", 1, 1 );
    setambientroomtone( "sumpf_default", "player_ambience", 4, 4 );
    setambientroomcontext( "sumpf_default", "ringoff_plr", "outdoor" );
    addambientelement( "sumpf_default", "amb_spooky_2d", 5, 9, 250, 1250 );
    declareambientroom( "shack" );
    setambientroomreverb( "shack", "socotra_smallroom", 1, 1 );
    declareambientpackage( "shack" );
    setambientroomcontext( "shack", "ringoff_plr", "outdoor" );
    addambientelement( "shack", "amb_spooky_2d", 5, 8, 300, 2000 );
    addambientelement( "shack", "wood_creak", 5, 12, 10, 450 );
    declareambientroom( "wood_shack" );
    setambientroomreverb( "wood_shack", "socotra_smallroom", 1, 1 );
    declareambientpackage( "wood_shack" );
    setambientroomcontext( "wood_shack", "ringoff_plr", "outdoor" );
    addambientelement( "wood_shack", "amb_spooky_2d", 5, 8, 300, 2000 );
    addambientelement( "wood_shack", "wood_creak", 5, 12, 10, 450 );
    declareambientroom( "hut_downstairs" );
    setambientroomreverb( "hut_downstairs", "socotra_largeroom", 1, 1 );
    declareambientpackage( "hut_downstairs" );
    setambientroomcontext( "hut_downstairs", "ringoff_plr", "indoor" );
    addambientelement( "hut_downstairs", "amb_spooky_2d", 10, 18, 300, 2000 );
    addambientelement( "hut_downstairs", "wood_creak", 5, 12, 10, 450 );
    declareambientroom( "perks_hut" );
    setambientroomreverb( "perks_hut", "socotra_smallroom", 1, 1 );
    declareambientpackage( "perks_hut" );
    setambientroomcontext( "perks_hut", "ringoff_plr", "indoor" );
    addambientelement( "perks_hut", "amb_spooky_2d", 5, 8, 300, 2000 );
    addambientelement( "perks_hut", "wood_creak", 5, 12, 10, 450 );
    declareambientroom( "perks_hut_semi_open" );
    setambientroomreverb( "perks_hut_semi_open", "socotra_smallroom", 1, 1 );
    declareambientpackage( "perks_hut_semi_open" );
    setambientroomcontext( "perks_hut_semi_open", "ringoff_plr", "indoor" );
    addambientelement( "perks_hut_semi_open", "amb_spooky_2d", 5, 8, 300, 2000 );
    addambientelement( "perks_hut_semi_open", "wood_creak", 5, 12, 10, 450 );
    declaremusicstate( "SPLASH_SCREEN" );
    musicalias( "mx_splash_screen", 12 );
    musicwaittilldone();
    declaremusicstate( "WAVE" );
    musicaliasloop( "mus_zombie_wave_loop", 0, 4 );
    declaremusicstate( "EGG" );
    musicalias( "mus_sumpf_egg", 1 );
    declaremusicstate( "SILENCE" );
    musicalias( "null", 1 );
    thread play_meteor_loop();
}

play_meteor_loop()
{
    meteor = clientscripts\mp\_audio::playloopat( "meteor_loop", ( 11264, -1920, -592 ) );
}

start_lights()
{
    level waittill( "start_lights" );
    wait 2.0;
    array_thread( getstructarray( "electrical_circuit", "targetname" ), ::circuit_sound );
    playsound( 0, "zmb_turn_on", ( 0, 0, 0 ) );
    wait 3.0;
    array_thread( getstructarray( "electrical_surge", "targetname" ), ::light_sound );
    array_thread( getstructarray( "low_buzz", "targetname" ), ::buzz_sound );
    playertrack = clientscripts\mp\_audio::playloopat( "player_ambience", ( 0, 0, 0 ) );
}

light_sound()
{
    wait( randomfloatrange( 1, 4 ) );
    playsound( 0, "evt_electrical_surge", self.origin );
    playfx( 0, level._effect["electric_short_oneshot"], self.origin );
    wait( randomfloatrange( 1, 2 ) );
    e1 = clientscripts\mp\_audio::playloopat( "light", self.origin );
    self run_sparks_loop();
}

run_sparks_loop()
{
    while ( true )
    {
        wait( randomfloatrange( 4, 15 ) );

        if ( randomfloatrange( 0, 1 ) < 0.5 )
        {
            playfx( 0, level._effect["electric_short_oneshot"], self.origin );
            playsound( 0, "evt_electrical_surge", self.origin );
        }

        wait( randomintrange( 1, 4 ) );
    }
}

circuit_sound()
{
    wait 1;
    playsound( 0, "circuit", self.origin );
}

buzz_sound()
{
    lowbuzz = clientscripts\mp\_audio::playloopat( "low_arc", self.origin );
}
