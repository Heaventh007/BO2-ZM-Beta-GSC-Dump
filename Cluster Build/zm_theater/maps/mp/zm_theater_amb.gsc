// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\_ambientpackage;
#include maps\mp\_music;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_busing;
#include maps\mp\zombies\_zm_audio;

main()
{
    level thread setup_power_on_sfx();
    level thread play_projecter_loop();
    level thread play_projecter_soundtrack();
    level thread setup_meteor_audio();
    level thread setup_radio_egg_audio();
    array_thread( getentarray( "portrait_egg", "targetname" ), ::portrait_egg_vox );
    array_thread( getentarray( "location_egg", "targetname" ), ::location_egg_vox );
}

setup_power_on_sfx()
{
    wait 5;
    sound_emitters = getstructarray( "amb_power", "targetname" );
    flag_wait( "power_on" );
    level thread play_evil_generator_audio();

    for ( i = 0; i < sound_emitters.size; i++ )
        sound_emitters[i] thread play_emitter();
}

play_emitter()
{
    wait( randomfloatrange( 0.1, 1 ) );
    playsoundatposition( "amb_circuit", self.origin );
    wait( randomfloatrange( 0.05, 0.5 ) );
    soundloop = spawn( "script_origin", self.origin );
    soundloop playloopsound( self.script_sound );
}

play_evil_generator_audio()
{
    playsoundatposition( "evt_flip_sparks_left", ( -544, 1320, 32 ) );
    playsoundatposition( "evt_flip_sparks_right", ( -400, 1320, 32 ) );
    wait 2;
    playsoundatposition( "evt_crazy_power_left", ( -304, 1120, 344 ) );
    playsoundatposition( "evt_crazy_power_right", ( 408, 1136, 344 ) );
    wait 13;
    playsoundatposition( "evt_crazy_power_left_end", ( -304, 1120, 344 ) );
    playsoundatposition( "evt_crazy_power_right_end", ( 408, 1136, 344 ) );
    playsoundatposition( "evt_flip_switch_laugh_left", ( -536, 1336, 704 ) );
    playsoundatposition( "evt_flip_switch_laugh_right", ( 576, 1336, 704 ) );
    level notify( "generator_done" );
}

play_projecter_soundtrack()
{
    level waittill( "generator_done" );
    wait 20;
    speaker = spawn( "script_origin", ( 32, 1216, 592 ) );
    speaker playloopsound( "amb_projecter_soundtrack" );
}

play_projecter_loop()
{
    level waittill( "generator_done" );
    projecter = spawn( "script_origin", ( -72, -144, 384 ) );
    projecter playloopsound( "amb_projecter" );
}

setup_meteor_audio()
{
    wait 1;
    level.meteor_counter = 0;
    level.music_override = 0;
    array_thread( getentarray( "meteor_egg_trigger", "targetname" ), ::meteor_egg );
}

play_music_easter_egg( player )
{
    level.music_override = 1;
    level thread maps\mp\zombies\_zm_audio::change_zombie_music( "egg" );
    wait 4;

    if ( isdefined( player ) )
        player maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "music_activate" );

    wait 236;
    level.music_override = 0;
    level thread maps\mp\zombies\_zm_audio::change_zombie_music( "wave_loop" );
}

meteor_egg()
{
    if ( !isdefined( self ) )
        return;

    self usetriggerrequirelookat();
    self setcursorhint( "HINT_NOICON" );
    self playloopsound( "zmb_meteor_loop" );
    self waittill( "trigger", player );
    self stoploopsound( 1 );
    player playsound( "zmb_meteor_activate" );
    player maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "meteors", undefined, level.meteor_counter );
    level.meteor_counter = level.meteor_counter + 1;

    if ( level.meteor_counter == 3 )
        level thread play_music_easter_egg( player );
}

portrait_egg_vox()
{
    if ( !isdefined( self ) )
        return;

    self usetriggerrequirelookat();
    self setcursorhint( "HINT_NOICON" );
    self waittill( "trigger", player );
    type = "portrait_" + self.script_noteworthy;
    player maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", type );
}

location_egg_vox()
{
    self waittill( "trigger", player );

    if ( randomintrange( 0, 101 ) >= 90 )
    {
        type = "room_" + self.script_noteworthy;
        player maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", type );
    }
}

play_radio_egg( delay )
{
    if ( isdefined( delay ) )
        wait( delay );

    if ( !isdefined( self ) )
        return;

    self playsound( "vox_zmb_egg_0" + level.radio_egg_counter );
    level.radio_egg_counter++;
}

setup_radio_egg_audio()
{
    wait 1;
    level.radio_egg_counter = 0;
    array_thread( getentarray( "audio_egg_radio", "targetname" ), ::radio_egg_trigger );
}

radio_egg_trigger()
{
    if ( !isdefined( self ) )
        return;

    self waittill( "trigger", who );
    who thread play_radio_egg();
}
