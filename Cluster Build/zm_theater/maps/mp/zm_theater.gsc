// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_zonemgr;
#include maps\mp\zm_theater_magic_box;
#include maps\mp\zm_theater_movie_screen;
#include maps\mp\zm_theater_quad;
#include maps\mp\zm_theater_teleporter;
#include maps\mp\zm_theater_fx;
#include maps\mp\zombies\_zm;
#include maps\mp\animscripts\zm_death;
#include maps\mp\zombies\_load;
#include maps\mp\zm_theater_amb;
#include maps\mp\gametypes_zm\_spawning;
#include maps\mp\gametypes_zm\_callbacksetup;
#include maps\mp\zombies\_zm_ai_dogs;
#include maps\mp\zombies\_zm_ai_quad;
#include maps\mp\zombies\_zm_weap_cymbal_monkey;
#include maps\mp\zombies\_zm_weap_ballistic_knife;
#include maps\mp\zombies\_zm_weap_bowie;
#include maps\mp\zombies\_zm_weap_thundergun;
#include maps\mp\zombies\_zm_weap_claymore;
#include maps\mp\_compass;
#include maps\mp\zombies\_zm_auto_turret;
#include character\c_usa_dempsey_zm;
#include character\c_rus_nikolai_zm;
#include character\c_jap_takeo_zm;
#include character\c_ger_richtofen_zm;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_game_module;

main()
{
    level.default_game_mode = "zclassic";
    level.default_start_location = "foyer";
    maps\mp\zm_theater_fx::main();
    maps\mp\zombies\_zm::init_fx();
    maps\mp\animscripts\zm_death::precache_gib_fx();
    level.zombiemode = 1;
    maps\mp\zombies\_load::main();
    maps\mp\zm_theater_amb::main();
    maps\mp\gametypes_zm\_spawning::level_use_unified_spawning( 1 );
    level._round_start_func = maps\mp\zombies\_zm::round_start;
    level.givecustomloadout = ::givecustomloadout;
    level.precachecustomcharacters = ::precachecustomcharacters;
    level.givecustomcharacters = ::givecustomcharacters;
    initcharacterstartindex();
    level.zombiemode_using_doubletap_perk = 1;
    level.zombiemode_using_juggernaut_perk = 1;
    level.zombiemode_using_revive_perk = 1;
    level.zombiemode_using_additionalprimaryweapon_perk = 1;
    level.zombiemode_using_sleightofhand_perk = 1;
    level.zombiemode_using_pack_a_punch = 1;
    precachemodel( "zombie_zapper_cagelight_red" );
    precachemodel( "zombie_zapper_cagelight_green" );
    precacheshader( "ac130_overlay_grain" );
    precacheshellshock( "electrocution" );
    precachemodel( "zombie_theater_reelcase_logo" );
    precacheshader( "zom_icon_theater_reel" );
    precachemodel( "zombie_zapper_cagelight_on" );
    precachemodel( "zombie_zapper_cagelight" );
    precachemodel( "lights_hang_single" );
    precachemodel( "lights_hang_single_on_nonflkr" );
    precachemodel( "zombie_theater_chandelier1arm_off" );
    precachemodel( "zombie_theater_chandelier1arm_on" );
    precachemodel( "zombie_theater_chandelier1_off" );
    precachemodel( "zombie_theater_chandelier1_on" );

    if ( getdvarint( #"_id_F273BD1C" ) > 0 )
        return;

    level.dogs_enabled = 1;
    level.random_pandora_box_start = 1;
    curtain_anim_init();
    level thread maps\mp\gametypes_zm\_callbacksetup::setupcallbacks();
    level.quad_move_speed = 35;
    level.quad_traverse_death_fx = maps\mp\zm_theater_quad::quad_traverse_death_fx;
    level.quad_explode = 1;
    level.dog_spawn_func = maps\mp\zombies\_zm_ai_dogs::dog_spawn_factory_logic;
    level.custom_ai_type = [];
    level.custom_ai_type[level.custom_ai_type.size] = maps\mp\zombies\_zm_ai_dogs::init;
    level.door_dialog_function = maps\mp\zombies\_zm::play_door_dialog;
    level.first_round_spawn_func = 1;
    level._zombie_custom_add_weapons = ::custom_add_weapons;
    include_weapons();
    include_powerups();
    level.use_zombie_heroes = 1;
    level.disable_protips = 1;
    maps\mp\zombies\_zm_ai_quad::init_quad_zombie_fx();
    maps\mp\zombies\_zm::init();
    maps\mp\zombies\_zm::post_main();
    maps\mp\zombies\_zm_weap_cymbal_monkey::init();
    maps\mp\zombies\_zm_weap_ballistic_knife::init();
    level._allow_melee_weapon_switching = 1;
    maps\mp\zombies\_zm_weap_bowie::init();
    maps\mp\zombies\_zm_weap_thundergun::init();
    maps\mp\zombies\_zm_weap_claymore::init();
    maps\mp\zombies\_zm_ai_dogs::enable_dog_rounds();
    init_zombie_theater();
    maps\mp\_compass::setupminimap( "menu_map_zombie_theater" );
    level.ignore_spawner_func = ::theater_ignore_spawner;
    level.player_out_of_playable_area_monitor_callback = ::zm_theater_zone_monitor_callback;
    level.zones = [];
    level.zone_manager_init_func = ::theater_zone_init;
    init_zones[0] = "foyer_zone";
    init_zones[1] = "foyer2_zone";
    level thread maps\mp\zombies\_zm_zonemgr::manage_zones( init_zones );
    level.zombie_ai_limit = 24;
    level thread maps\mp\zombies\_zm_auto_turret::init();
    level thread set_rope_collision();
    level.extracam_screen = getent( "theater_extracam_screen", "targetname" );
    level.extracam_screen hide();
    clientnotify( "camera_stop" );
    init_sounds();
    level thread add_powerups_after_round_1();
    level thread zombie_dog_pathing_hack();
    visionsetnaked( "zombie_theater", 0 );
    chandelier = getentarray( "theater_chandelier", "targetname" );
    array_thread( chandelier, ::theater_chandelier_model_scale );
    maps\mp\zm_theater_teleporter::teleport_pad_hide_use();
}

zm_theater_zone_monitor_callback()
{
    do_kill_player = 1;

    if ( isdefined( self.is_teleporting ) && self.is_teleporting == 1 )
        do_kill_player = 0;

    return do_kill_player;
}

precachecustomcharacters()
{
    character\c_usa_dempsey_zm::precache();
    character\c_rus_nikolai_zm::precache();
    character\c_jap_takeo_zm::precache();
    character\c_ger_richtofen_zm::precache();
    precachemodel( "viewmodel_usa_pow_arms" );
    precachemodel( "viewmodel_rus_prisoner_arms" );
    precachemodel( "viewmodel_vtn_nva_standard_arms" );
    precachemodel( "viewmodel_usa_hazmat_arms" );
}

initcharacterstartindex()
{
    level.characterstartindex = randomint( 4 );
}

selectcharacterindextouse()
{
    if ( level.characterstartindex >= 4 )
        level.characterstartindex = 0;

    self.characterindex = level.characterstartindex;
    level.characterstartindex++;
    return self.characterindex;
}

givecustomcharacters()
{
    self detachall();

    switch ( self selectcharacterindextouse() )
    {
        case 0:
            self character\c_usa_dempsey_zm::main();
            self setviewmodel( "viewmodel_usa_pow_arms" );
            self.characterindex = 0;
            break;
        case 1:
            self character\c_rus_nikolai_zm::main();
            self setviewmodel( "viewmodel_rus_prisoner_arms" );
            self.characterindex = 1;
            break;
        case 2:
            self character\c_jap_takeo_zm::main();
            self setviewmodel( "viewmodel_vtn_nva_standard_arms" );
            self.characterindex = 2;
            break;
        case 3:
            self character\c_ger_richtofen_zm::main();
            self setviewmodel( "viewmodel_usa_hazmat_arms" );
            self.characterindex = 3;
            break;
    }

    self setmovespeedscale( 1 );
    self setsprintduration( 4 );
    self setsprintcooldown( 0 );
}

givecustomloadout( takeallweapons, alreadyspawned )
{
    self giveweapon( "knife_zm" );
    self give_start_weapon( 1 );
}

anim_override_func()
{

}

#using_animtree("zombie_theater");

curtain_anim_init()
{
    level.scr_anim["curtains_move"] = %o_zombie_theatre_curtain;
    registerclientfield( "world", "zm_theater_curtain_open", 7000, 1, "int" );
}

theater_open_curtains()
{
    self setclientfield( "zm_theater_curtain_open", 1 );
}

include_weapons()
{
    include_weapon( "tesla_gun_zm", 0 );
    include_weapon( "minigun_zm", 0 );
    include_weapon( "frag_grenade_zm", 0, 1 );
    include_weapon( "claymore_zm", 0, 1 );
    include_weapon( "m1911_zm", 0 );
    include_weapon( "m1911_upgraded_zm", 0 );
    include_weapon( "python_zm" );
    include_weapon( "python_upgraded_zm", 0 );
    include_weapon( "fiveseven_zm" );
    include_weapon( "fiveseven_upgraded_zm", 0 );
    include_weapon( "m14_zm", 0, 1 );
    include_weapon( "m14_upgraded_zm", 0 );
    include_weapon( "m16_zm", 0, 1 );
    include_weapon( "m16_gl_upgraded_zm", 0 );
    include_weapon( "xm8_zm" );
    include_weapon( "xm8_upgraded_zm", 0 );
    include_weapon( "type95_zm" );
    include_weapon( "type95_upgraded_zm", 0 );
    include_weapon( "ak74u_zm", 0, 1 );
    include_weapon( "ak74u_upgraded_zm", 0 );
    include_weapon( "mp5k_zm", 0, 1 );
    include_weapon( "mp5k_upgraded_zm", 0 );
    include_weapon( "mp40_zm", 0, 1 );
    include_weapon( "mp40_upgraded_zm", 0 );
    include_weapon( "beretta93r_zm", 0, 1 );
    include_weapon( "beretta93r_upgraded_zm", 0 );
    include_weapon( "pdw57_zm", 0, 1 );
    include_weapon( "pdw57_upgraded_zm", 0 );
    include_weapon( "kard_zm" );
    include_weapon( "kard_upgraded_zm", 0 );
    include_weapon( "870mcs_zm", 0, 1 );
    include_weapon( "870mcs_upgraded_zm", 0 );
    include_weapon( "rottweil72_zm", 0, 1 );
    include_weapon( "rottweil72_upgraded_zm", 0 );
    include_weapon( "judge_zm" );
    include_weapon( "judge_upgraded_zm", 0 );
    include_weapon( "tar21_zm" );
    include_weapon( "tar21_upgraded_zm", 0 );
    include_weapon( "galil_zm" );
    include_weapon( "galil_upgraded_zm", 0 );
    include_weapon( "hk416_zm" );
    include_weapon( "hk416_upgraded_zm", 0 );
    include_weapon( "sa58_zm" );
    include_weapon( "sa58_upgraded_zm", 0 );
    include_weapon( "barretm82_zm" );
    include_weapon( "barretm82_upgraded_zm", 0 );
    include_weapon( "dsr50_zm" );
    include_weapon( "dsr50_upgraded_zm", 0 );
    include_weapon( "rpd_zm" );
    include_weapon( "rpd_upgraded_zm", 0 );
    include_weapon( "hamr_zm" );
    include_weapon( "hamr_upgraded_zm", 0 );
    include_weapon( "usrpg_zm" );
    include_weapon( "usrpg_upgraded_zm", 0 );
    include_weapon( "m32_zm" );
    include_weapon( "m32_upgraded_zm", 0 );
    include_weapon( "zombie_cymbal_monkey" );
    include_weapon( "ray_gun_zm" );
    include_weapon( "ray_gun_upgraded_zm", 0 );
    include_weapon( "thundergun_zm", 1 );
    include_weapon( "thundergun_upgraded_zm", 0 );
    include_weapon( "knife_ballistic_zm", 1 );
    include_weapon( "knife_ballistic_upgraded_zm", 0 );
    include_weapon( "knife_ballistic_bowie_zm", 0 );
    include_weapon( "knife_ballistic_bowie_upgraded_zm", 0 );
    level._uses_retrievable_ballisitic_knives = 1;
    maps\mp\zombies\_zm_weapons::add_limited_weapon( "m1911_zm", 0 );
    maps\mp\zombies\_zm_weapons::add_limited_weapon( "thundergun_zm", 1 );
    maps\mp\zombies\_zm_weapons::add_limited_weapon( "knife_ballistic_zm", 1 );
}

custom_add_weapons()
{
    add_zombie_weapon( "frag_grenade_zm", undefined, &"ZOMBIE_WEAPON_FRAG_GRENADE", 250, "grenade", "", undefined );
    add_zombie_weapon( "claymore_zm", undefined, &"ZOMBIE_WEAPON_CLAYMORE", 1000, "grenade", "", undefined );
    add_zombie_weapon( "m1911_zm", "m1911_upgraded_zm", &"ZOMBIE_WEAPON_M1911", 50, "pistol", "", undefined );
    add_zombie_weapon( "python_zm", "python_upgraded_zm", &"ZOMBIE_WEAPON_PYTHON", 50, "pistol", "", undefined );
    add_zombie_weapon( "fiveseven_zm", "fiveseven_upgraded_zm", &"ZOMBIE_WEAPON_FIVESEVEN", 50, "pistol", "", undefined );
    add_zombie_weapon( "m14_zm", "m14_upgraded_zm", &"ZOMBIE_WEAPON_M14", 500, "rifle", "", undefined );
    add_zombie_weapon( "m16_zm", "m16_gl_upgraded_zm", &"ZOMBIE_WEAPON_M16", 1200, "burstrifle", "", undefined );
    add_zombie_weapon( "xm8_zm", "xm8_upgraded_zm", &"ZOMBIE_WEAPON_XM8", 50, "burstrifle", "", undefined );
    add_zombie_weapon( "type95_zm", "type95_upgraded_zm", &"ZOMBIE_WEAPON_TYPE95", 50, "burstrifle", "", undefined );
    add_zombie_weapon( "ak74u_zm", "ak74u_upgraded_zm", &"ZOMBIE_WEAPON_AK74U", 1200, "smg", "", undefined );
    add_zombie_weapon( "mp5k_zm", "mp5k_upgraded_zm", &"ZOMBIE_WEAPON_MP5K", 1000, "smg", "", undefined );
    add_zombie_weapon( "mp40_zm", "mp40_upgraded_zm", &"ZOMBIE_WEAPON_MP40", 1000, "smg", "", undefined );
    add_zombie_weapon( "beretta93r_zm", "beretta93r_upgraded_zm", &"ZOMBIE_WEAPON_BERETTA93R", 1000, "pistol", "", undefined );
    add_zombie_weapon( "pdw57_zm", "pdw57_upgraded_zm", &"ZOMBIE_WEAPON_PDW57", 1200, "smg", "", undefined );
    add_zombie_weapon( "kard_zm", "kard_upgraded_zm", &"ZOMBIE_WEAPON_KARD", 50, "pistol", "", undefined );
    add_zombie_weapon( "fivesevendw_zm", "fivesevendw_upgraded_zm", &"ZOMBIE_WEAPON_FIVESEVENDW", 50, "dualwield", "", undefined );
    add_zombie_weapon( "870mcs_zm", "870mcs_upgraded_zm", &"ZOMBIE_WEAPON_870mcs", 1500, "shotgun", "", undefined );
    add_zombie_weapon( "rottweil72_zm", "rottweil72_upgraded_zm", &"ZOMBIE_WEAPON_ROTTWEIL72", 500, "shotgun", "", undefined );
    add_zombie_weapon( "judge_zm", "judge_upgraded_zm", &"ZOMBIE_WEAPON_JUDGE", 50, "pistol", "", undefined );
    add_zombie_weapon( "tar21_zm", "tar21_upgraded_zm", &"ZOMBIE_WEAPON_TAR21", 50, "assault", "", undefined );
    add_zombie_weapon( "galil_zm", "galil_upgraded_zm", &"ZOMBIE_WEAPON_GALIL", 50, "assault", "", undefined );
    add_zombie_weapon( "hk416_zm", "hk416_upgraded_zm", &"ZOMBIE_WEAPON_HK416", 50, "assault", "", undefined );
    add_zombie_weapon( "sa58_zm", "sa58_upgraded_zm", &"ZOMBIE_WEAPON_SA58", 50, "burstrifle", "", undefined );
    add_zombie_weapon( "barretm82_zm", "barretm82_upgraded_zm", &"ZOMBIE_WEAPON_BARRETM82", 2500, "sniper", "", undefined );
    add_zombie_weapon( "dsr50_zm", "dsr50_upgraded_zm", &"ZOMBIE_WEAPON_DSR50", 50, "sniper", "", undefined );
    add_zombie_weapon( "rpd_zm", "rpd_upgraded_zm", &"ZOMBIE_WEAPON_RPD", 50, "mg", "", undefined );
    add_zombie_weapon( "hamr_zm", "hamr_upgraded_zm", &"ZOMBIE_WEAPON_HAMR", 50, "mg", "", undefined );
    add_zombie_weapon( "usrpg_zm", "usrpg_upgraded_zm", &"ZOMBIE_WEAPON_USRPG", 50, "launcher", "", undefined );
    add_zombie_weapon( "m32_zm", "m32_upgraded_zm", &"ZOMBIE_WEAPON_M32", 50, "launcher", "", undefined );
    add_zombie_weapon( "zombie_cymbal_monkey", undefined, &"ZOMBIE_WEAPON_SATCHEL_2000", 2000, "monkey", "", undefined );
    add_zombie_weapon( "ray_gun_zm", "ray_gun_upgraded_zm", &"ZOMBIE_WEAPON_RAYGUN", 10000, "raygun", "", undefined );
    add_zombie_weapon( "thundergun_zm", "thundergun_upgraded_zm", &"ZOMBIE_WEAPON_THUNDERGUN", 10, "thunder", "", undefined );
    add_zombie_weapon( "knife_ballistic_zm", "knife_ballistic_upgraded_zm", &"ZOMBIE_WEAPON_KNIFE_BALLISTIC", 10, "sickle", "", undefined );
    add_zombie_weapon( "knife_ballistic_bowie_zm", "knife_ballistic_bowie_upgraded_zm", &"ZOMBIE_WEAPON_KNIFE_BALLISTIC", 10, "sickle", "", undefined );
}

include_powerups()
{
    include_powerup( "nuke" );
    include_powerup( "insta_kill" );
    include_powerup( "double_points" );
    include_powerup( "full_ammo" );
    include_powerup( "carpenter" );
    include_powerup( "fire_sale" );
    include_powerup( "bonfire_sale" );
    include_powerup( "tesla" );
    include_powerup( "minigun" );
    include_powerup( "insta_kill_ug" );
}

add_powerups_after_round_1()
{
    arrayremovevalue( level.zombie_powerup_array, "nuke", 0 );
    arrayremovevalue( level.zombie_powerup_array, "fire_sale", 0 );

    while ( true )
    {
        if ( level.round_number > 1 )
        {
            level.zombie_powerup_array[level.zombie_powerup_array.size] = "nuke";
            level.zombie_powerup_array[level.zombie_powerup_array.size] = "fire_sale";
            break;
        }

        wait 1;
    }
}

init_zombie_theater()
{
    flag_init( "curtains_done" );
    flag_init( "lobby_occupied" );
    flag_init( "dining_occupied" );
    flag_init( "special_quad_round" );
    level thread electric_switch();
    thread maps\mp\zm_theater_magic_box::magic_box_init();
    level thread maps\mp\zm_theater_movie_screen::initmoviescreen();
    thread maps\mp\zm_theater_quad::init_roofs();
    level thread teleporter_intro();
}

teleporter_intro()
{
    flag_wait( "all_players_spawned" );
    wait 0.25;
    players = get_players();

    for ( i = 0; i < players.size; i++ )
    {

    }

    playsoundatposition( "evt_beam_fx_2d", ( 0, 0, 0 ) );
    playsoundatposition( "evt_pad_cooldown_2d", ( 0, 0, 0 ) );
}

electric_switch()
{
    trig = getent( "use_elec_switch", "targetname" );
    trig sethintstring( &"ZOMBIE_ELECTRIC_SWITCH" );
    trig setcursorhint( "HINT_NOICON" );
    level thread wait_for_power();
    trig waittill( "trigger", user );
    trig delete();
    maps\mp\zombies\_zm_game_module::turn_power_on_and_open_doors();
}

wait_for_power()
{
    master_switch = getent( "elec_switch", "targetname" );
    master_switch notsolid();
    flag_wait( "power_on" );
    master_switch rotateroll( -90, 0.3 );
    master_switch playsound( "zmb_switch_flip" );
    clientnotify( "ZPO" );
    master_switch waittill( "rotatedone" );
    playfx( level._effect["switch_sparks"], getstruct( "elec_switch_fx", "targetname" ).origin );
    master_switch playsound( "zmb_turn_on" );
    maps\mp\zm_theater_teleporter::teleporter_init();
    wait_network_frame();
    level notify( "revive_on" );
    wait_network_frame();
    level notify( "juggernog_on" );
    wait_network_frame();
    level notify( "sleight_on" );
    wait_network_frame();
    level notify( "doubletap_on" );
    wait_network_frame();
    level notify( "Pack_A_Punch_on" );
    wait_network_frame();
    players = get_players();
    level.quads_per_round = 4 * players.size;
    level notify( "quad_round_can_end" );
    level.delay_spawners = undefined;
    level thread quad_wave_init();
}

init_sounds()
{
    maps\mp\zombies\_zm_utility::add_sound( "wooden_door", "zmb_door_wood_open" );
    maps\mp\zombies\_zm_utility::add_sound( "fence_door", "zmb_door_fence_open" );
}

theater_zone_init()
{
    flag_init( "always_on" );
    flag_set( "always_on" );
    add_adjacent_zone( "foyer_zone", "foyer2_zone", "always_on" );
    add_adjacent_zone( "foyer_zone", "vip_zone", "magic_box_foyer1" );
    add_adjacent_zone( "foyer2_zone", "crematorium_zone", "magic_box_crematorium1" );
    add_adjacent_zone( "foyer_zone", "crematorium_zone", "magic_box_crematorium1" );
    add_adjacent_zone( "vip_zone", "dining_zone", "vip_to_dining" );
    add_adjacent_zone( "crematorium_zone", "alleyway_zone", "magic_box_alleyway1" );
    add_adjacent_zone( "dining_zone", "dressing_zone", "dining_to_dressing" );
    add_adjacent_zone( "dressing_zone", "stage_zone", "magic_box_dressing1" );
    add_adjacent_zone( "stage_zone", "west_balcony_zone", "magic_box_west_balcony2" );
    add_adjacent_zone( "theater_zone", "foyer2_zone", "power_on" );
    add_adjacent_zone( "theater_zone", "stage_zone", "power_on" );
    add_adjacent_zone( "west_balcony_zone", "alleyway_zone", "magic_box_west_balcony1" );
}

theater_ignore_spawner( spawner )
{
    if ( !flag( "curtains_done" ) )
    {
        if ( spawner.script_noteworthy == "quad_zombie_spawner" )
            return true;
    }

    if ( flag( "special_quad_round" ) )
    {
        if ( spawner.script_noteworthy != "quad_zombie_spawner" )
            return true;
    }

    if ( !flag( "lobby_occupied" ) )
    {
        if ( spawner.script_noteworthy == "quad_zombie_spawner" && spawner.targetname == "foyer_zone_spawners" )
            return true;
    }

    if ( !flag( "dining_occupied" ) )
    {
        if ( spawner.script_noteworthy == "quad_zombie_spawner" && spawner.targetname == "zombie_spawner_dining" )
            return true;
    }

    return false;
}

quad_wave_init()
{
    level thread time_for_quad_wave( "foyer_zone" );
    level thread time_for_quad_wave( "theater_zone" );
    level thread time_for_quad_wave( "stage_zone" );
    level thread time_for_quad_wave( "dining_zone" );
    level waittill( "end_of_round" );
    flag_clear( "special_quad_round" );
}

time_for_quad_wave( zone_name )
{
    if ( !isdefined( zone_name ) )
        return;

    zone = level.zones[zone_name];
    level waittill( "between_round_over" );

    if ( isdefined( level.next_dog_round ) && level.next_dog_round == level.round_number )
    {
        level thread time_for_quad_wave( zone_name );
        return;
    }

    max = level.zombie_vars["zombie_max_ai"];
    multiplier = level.round_number / 5;

    if ( multiplier < 1 )
        multiplier = 1;

    if ( level.round_number >= 10 )
        multiplier = multiplier * ( level.round_number * 0.15 );

    player_num = get_players().size;

    if ( player_num == 1 )
        max = max + int( 0.5 * level.zombie_vars["zombie_ai_per_player"] * multiplier );
    else
        max = max + int( ( player_num - 1 ) * level.zombie_vars["zombie_ai_per_player"] * multiplier );

    chance = 100;
    max_zombies = [[ level.max_zombie_func ]]( max );
    current_round = level.round_number;

    if ( level.round_number % 3 == 0 && chance >= randomint( 100 ) )
    {
        if ( zone.is_occupied )
        {
            flag_set( "special_quad_round" );
            maps\mp\zombies\_zm_zonemgr::reinit_zone_spawners();

            while ( level.zombie_total < max_zombies / 2 && current_round == level.round_number )
                wait 0.1;

            flag_clear( "special_quad_round" );
            maps\mp\zombies\_zm_zonemgr::reinit_zone_spawners();
        }
    }

    level thread time_for_quad_wave( zone_name );
}

theater_chandelier_model_scale()
{
    flag_wait( "power_on" );

    if ( self.model == "zombie_theater_chandelier1arm_off" )
        self setmodel( "zombie_theater_chandelier1arm_on" );
    else if ( self.model == "zombie_theater_chandelier1_off" )
        self setmodel( "zombie_theater_chandelier1_on" );
}

set_rope_collision()
{
    techrope = getentarray( "techrope01", "targetname" );

    if ( isdefined( techrope ) )
    {
        for ( i = 0; i < techrope.size; i++ )
        {

        }
    }
}

zombie_dog_pathing_hack()
{
    precachemodel( "collision_geo_64x64x128" );
    wait 1;
    collision = spawn( "script_model", ( -391, 1194, 16 ) );
    collision setmodel( "collision_geo_64x64x128" );
    collision.angles = vectorscale( ( 0, 1, 0 ), 301.8 );
    collision hide();
}
