// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include maps\mp\_utility;
#include common_scripts\utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_sidequests;
#include maps\mp\zm_temple_sq_brock;
#include maps\mp\zm_temple_sq;
#include maps\mp\zm_temple_sq_skits;
#include maps\mp\zombies\_zm_audio;

init()
{
    flag_init( "given_dynamite" );
    flag_init( "dynamite_chat" );
    declare_sidequest_stage( "sq", "BaG", ::init_stage, ::stage_logic, ::exit_stage );
    set_stage_time_limit( "sq", "BaG", 300 );
}

bag_debug()
{
    if ( isdefined( level._debug_bag ) )
        return;

    if ( !isdefined( level._debug_bag ) )
    {
        level._debug_bag = 1;
        level._hud_gongs = newdebughudelem();
        level._hud_gongs.location = 0;
        level._hud_gongs.alignx = "left";
        level._hud_gongs.aligny = "middle";
        level._hud_gongs.foreground = 1;
        level._hud_gongs.fontscale = 1.3;
        level._hud_gongs.sort = 20;
        level._hud_gongs.x = 10;
        level._hud_gongs.y = 240;
        level._hud_gongs.og_scale = 1;
        level._hud_gongs.color = vectorscale( ( 1, 1, 1 ), 255.0 );
        level._hud_gongs.alpha = 1;
        level._hud_gongs_label = newdebughudelem();
        level._hud_gongs_label.location = 0;
        level._hud_gongs_label.alignx = "right";
        level._hud_gongs_label.aligny = "middle";
        level._hud_gongs_label.foreground = 1;
        level._hud_gongs_label.fontscale = 1.3;
        level._hud_gongs_label.sort = 20;
        level._hud_gongs_label.x = 0;
        level._hud_gongs_label.y = 240;
        level._hud_gongs_label.og_scale = 1;
        level._hud_gongs_label.color = vectorscale( ( 1, 1, 1 ), 255.0 );
        level._hud_gongs_label.alpha = 1;
        level._hud_gongs_label settext( "Gongs: " );
        level._ringing = newdebughudelem();
        level._ringing.location = 0;
        level._ringing.alignx = "left";
        level._ringing.aligny = "middle";
        level._ringing.foreground = 1;
        level._ringing.fontscale = 1.3;
        level._ringing.sort = 20;
        level._ringing.x = 10;
        level._ringing.y = 270;
        level._ringing.og_scale = 1;
        level._ringing.color = vectorscale( ( 1, 1, 1 ), 255.0 );
        level._ringing.alpha = 1;
        level._ringing_label = newdebughudelem();
        level._ringing_label.location = 0;
        level._ringing_label.alignx = "right";
        level._ringing_label.aligny = "middle";
        level._ringing_label.foreground = 1;
        level._ringing_label.fontscale = 1.3;
        level._ringing_label.sort = 20;
        level._ringing_label.x = 0;
        level._ringing_label.y = 270;
        level._ringing_label.og_scale = 1;
        level._ringing_label.color = vectorscale( ( 1, 1, 1 ), 255.0 );
        level._ringing_label.alpha = 1;
        level._ringing_label settext( "Ringing: " );
        level._resonating = newdebughudelem();
        level._resonating.location = 0;
        level._resonating.alignx = "left";
        level._resonating.aligny = "middle";
        level._resonating.foreground = 1;
        level._resonating.fontscale = 1.3;
        level._resonating.sort = 20;
        level._resonating.x = 10;
        level._resonating.y = 300;
        level._resonating.og_scale = 1;
        level._resonating.color = vectorscale( ( 1, 1, 1 ), 255.0 );
        level._resonating.alpha = 1;
        level._resonating_label = newdebughudelem();
        level._resonating_label.location = 0;
        level._resonating_label.alignx = "right";
        level._resonating_label.aligny = "middle";
        level._resonating_label.foreground = 1;
        level._resonating_label.fontscale = 1.3;
        level._resonating_label.sort = 20;
        level._resonating_label.x = 0;
        level._resonating_label.y = 300;
        level._resonating_label.og_scale = 1;
        level._resonating_label.color = vectorscale( ( 1, 1, 1 ), 255.0 );
        level._resonating_label.alpha = 1;
        level._resonating_label settext( "Rezanating: " );
    }

    gongs = getentarray( "sq_gong", "targetname" );

    while ( true )
    {
        if ( isdefined( level._num_gongs ) )
            level._hud_gongs setvalue( level._num_gongs );
        else
            level.selected_tile1 setvalue( "-1" );

        gong_text = "";

        for ( i = 0; i < gongs.size; i++ )
        {
            if ( isdefined( gongs[i].ringing ) && gongs[i].ringing )
            {
                gong_text = gong_text + "x";
                continue;
            }

            gong_text = gong_text + "o";
        }

        level._ringing settext( gong_text );

        if ( flag( "gongs_resonating" ) )
            level._resonating_label settext( "Yes" );
        else
            level._resonating_label settext( "No" );

        wait 0.05;
    }
}

init_stage()
{
    maps\mp\zm_temple_sq_brock::delete_radio();
    level notify( "bag_start" );
    flag_clear( "given_dynamite" );
    flag_clear( "dynamite_chat" );
    gongs = getentarray( "sq_gong", "targetname" );
    array_thread( gongs, ::gong_handler );
    level thread give_me_the_boom_stick();
    maps\mp\zm_temple_sq::reset_dynamite();
    level thread delayed_start_skit();
}

delayed_start_skit()
{
    wait 0.5;
    level thread maps\mp\zm_temple_sq_skits::start_skit( "tt8" );
}

dynamite_debug()
{
/#
    self endon( "caught" );

    while ( true )
    {
        print3d( self.origin, "+", vectorscale( ( 0, 1, 0 ), 255.0 ), 2 );
        wait 0.1;
    }
#/
}

fire_in_the_hole()
{
    self endon( "caught" );
    self.dropped = 1;
    self unlink();
    dest = getstruct( self.target, "targetname" );
    level.catch_trig = spawn( "trigger_radius", self.origin, 0, 24, 10 );
    level.catch_trig enablelinkto();
    level.catch_trig linkto( self );
    level.catch_trig.owner_ent = self;
    level.catch_trig thread butter_fingers();
/#
    self thread dynamite_debug();
#/
    self notsolid();
    self moveto( dest.origin, 1.4, 0.2, 0 );
    self waittill( "movedone" );
    players = get_players();
    players[randomintrange( 0, players.size )] thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "quest8", undefined, 5 );
    playsoundatposition( "evt_sq_bag_dynamite_explosion", dest.origin );
    level.catch_trig notify( "boom" );
    level.catch_trig delete();
    level.catch_trig = undefined;
    stage_failed( "sq", "BaG" );
}

butter_fingers()
{
    self endon( "boom" );
    self endon( "death" );

    while ( true )
    {
        self waittill( "trigger", who );

        if ( isdefined( who ) && is_player_valid( who ) )
        {
            who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "quest8", undefined, 6 );
            who playsound( "evt_sq_bag_dynamite_catch" );
            who._has_dynamite = 1;
            self.owner_ent notify( "caught" );
            self.owner_ent hide();
            who add_sidequest_icon( "sq", "dynamite" );
            self delete();
            break;
        }
    }
}

give_me_the_boom_stick()
{
    level endon( "sq_BaG_over" );
    wall = getent( "sq_wall", "targetname" );
    wall solid();
    flag_wait( "meteorite_shrunk" );
    player_close = 0;
    player = undefined;

    while ( !player_close )
    {
        players = get_players();

        for ( i = 0; i < players.size; i++ )
        {
            if ( distance2dsquared( players[i].origin, wall.origin ) < 57600 )
            {
                player_close = 1;
                player = players[i];
                break;
            }
        }

        wait 0.1;
    }

    level bag_story_vox_pt1( player );
    flag_set( "dynamite_chat" );
    level._give_trig = spawn( "trigger_radius_use", wall.origin, 0, 56, 72 );
    level._give_trig setcursorhint( "HINT_NOICON" );
    level._give_trig.radius = 48;
    level._give_trig.height = 72;
    not_given = 1;

    while ( not_given )
    {
        level._give_trig waittill( "trigger", who );

        if ( isplayer( who ) && is_player_valid( who ) && isdefined( who._has_dynamite ) && who._has_dynamite )
        {
            who._has_dynamite = undefined;
            who remove_sidequest_icon( "sq", "dynamite" );
            not_given = 0;
        }
    }

    level notify( "suspend_timer" );
    level._give_trig delete();
    level._give_trig = undefined;
    level bag_story_vox_pt2();
    players_far = 0;

    for ( players = get_players(); players_far < players.size; players = get_players() )
    {
        players_far = 0;

        for ( i = 0; i < players.size; i++ )
        {
            if ( distance2dsquared( players[i].origin, wall.origin ) > 129600 )
                players_far++;
        }

        wait 0.1;
    }

    flag_set( "given_dynamite" );
}

stage_logic()
{
    flag_wait( "meteorite_shrunk" );
    flag_set( "pap_override" );
    flag_wait( "dynamite_chat" );
    flag_wait( "given_dynamite" );
    wait 5.0;
    stage_completed( "sq", "BaG" );
}

exit_stage( success )
{
    if ( success )
    {
        maps\mp\zm_temple_sq_brock::create_radio( 9, maps\mp\zm_temple_sq_brock::radio9_override );
        level._buttons_can_reset = 0;
    }
    else
    {
        maps\mp\zm_temple_sq_brock::create_radio( 8 );
        flag_clear( "meteorite_shrunk" );
        ent = getent( "sq_meteorite", "targetname" );
        ent.origin = ent.original_origin;
        ent.angles = ent.original_angles;
        ent setmodel( "p_ztem_meteorite" );
        maps\mp\zm_temple_sq::reset_dynamite();
        flag_clear( "pap_override" );
        level thread maps\mp\zm_temple_sq_skits::fail_skit();
    }

    if ( isdefined( level.catch_trig ) )
    {
        level.catch_trig delete();
        level.catch_trig = undefined;
    }

    players = get_players();

    for ( i = 0; i < players.size; i++ )
    {
        if ( isdefined( players[i]._has_dynamite ) )
        {
            players[i]._has_dynamite = undefined;
            players[i] remove_sidequest_icon( "sq", "dynamite" );
        }
    }

    if ( isdefined( level._give_trig ) )
        level._give_trig delete();

    gongs = getentarray( "sq_gong", "targetname" );
    array_thread( gongs, ::dud_gong_handler );

    if ( isdefined( level._bag_sound_ent ) )
    {
        level._bag_sound_ent delete();
        level._bag_sound_ent = undefined;
    }

    level.skit_vox_override = 0;
}

resonate_runner()
{
    if ( !isdefined( level._resonate_time ) || level._resonate_time == 0 )
        level._resonate_time = 60;
    else
    {
        level._resonate_time = level._resonate_time + 60;
        return;
    }

    level endon( "wrong_gong" );
    flag_set( "gongs_resonating" );

    while ( level._resonate_time )
    {
        level._resonate_time--;
        wait 1.0;
    }

    flag_clear( "gongs_resonating" );
}

gong_resonate( player )
{
    level endon( "kill_resonate" );
    self.ringing = 1;

    if ( is_true( self.right_gong ) )
        self playloopsound( "evt_sq_bag_gong_correct_loop_" + level._num_gongs, 5 );
    else
        self playsound( "evt_sq_bag_gong_incorrect" );

    if ( level._num_gongs == 4 )
        level thread resonate_runner();

    if ( isdefined( player ) && isplayer( player ) )
    {
        if ( self.right_gong && level._num_gongs == 1 )
            player thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "quest8", undefined, 1 );
        else if ( self.right_gong && flag( "gongs_resonating" ) )
            player thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "quest8", undefined, 2 );
        else if ( !self.right_gong )
            player thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "quest8", undefined, 0 );
    }

    if ( self.right_gong == 0 )
    {
        level notify( "wrong_gong" );
        level._resonate_time = 0;
        gongs = getentarray( "sq_gong", "targetname" );

        for ( i = 0; i < gongs.size; i++ )
        {
            if ( gongs[i].right_gong )
            {
                if ( gongs[i].ringing )
                {
                    if ( level._num_gongs >= 0 )
                        level._num_gongs--;

                    gongs[i] stoploopsound( 5 );
                }
            }

            gongs[i].ringing = 0;
        }

        level notify( "kill_resonate" );
    }

    wait 60;

    if ( self.right_gong && level._num_gongs >= 0 )
        level._num_gongs--;

    self.ringing = 0;
    self stoploopsound( 5 );
}

gong_goes_bong( in_stage, player )
{
    if ( self.right_gong && level._num_gongs < 4 )
        level._num_gongs++;

    self thread gong_resonate( player );
}

gong_handler()
{
    level endon( "sq_BaG_over" );

    if ( !isdefined( self.ringing ) )
        self.ringing = 0;

    self thread debug_gong();

    while ( true )
    {
        self waittill( "triggered", who );

        if ( !self.ringing )
        {
            self playsound( "evt_sq_bag_gong_hit" );
            self gong_goes_bong( 1, who );
        }
    }
}

debug_gong()
{
/#
    level endon( "bag_start" );
    level endon( "sq_BaG_over" );

    while ( true )
    {
        if ( !self.ringing && self.right_gong )
            print3d( self.origin + vectorscale( ( 0, 0, 1 ), 64.0 ), "+", vectorscale( ( 0, 1, 0 ), 255.0 ), 1 );

        wait 0.1;
    }
#/
}

gong_wobble()
{
    if ( isdefined( self.wobble_threaded ) )
        return;

    self.wobble_threaded = 1;

    while ( true )
    {
        self waittill( "triggered" );
        self playsound( "evt_sq_bag_gong_hit" );
    }
}

dud_gong_handler()
{
    level endon( "bag_start" );
    self thread gong_wobble();

    if ( !isdefined( self.ringing ) )
        self.ringing = 0;

    self thread debug_gong();

    while ( true )
    {
        self waittill( "triggered" );

        if ( !self.ringing )
            self gong_goes_bong( 0 );
    }
}

bag_story_vox_pt1( player )
{
    level endon( "sq_StD_over" );
    struct = getstruct( "sq_location_bag", "targetname" );

    if ( !isdefined( struct ) )
        return;

    level._bag_sound_ent = spawn( "script_origin", struct.origin );
    level._bag_sound_ent playsound( "vox_egg_story_5_0", "sounddone" );
    level._bag_sound_ent waittill( "sounddone" );
    level._bag_sound_ent playsound( "vox_egg_story_5_1", "sounddone" );
    level._bag_sound_ent waittill( "sounddone" );
    level._bag_sound_ent playsound( "vox_egg_story_5_2", "sounddone" );
    level._bag_sound_ent waittill( "sounddone" );

    if ( isdefined( player ) )
    {
        level.skit_vox_override = 1;
        player playsound( "vox_egg_story_5_3" + maps\mp\zm_temple_sq::get_variant_from_entity_num( player getentitynumber() ), "vox_egg_sounddone" );
        player waittill( "vox_egg_sounddone" );
        level.skit_vox_override = 0;
    }

    level._bag_sound_ent playsound( "vox_egg_story_5_4", "sounddone" );
    level._bag_sound_ent waittill( "sounddone" );
    level._bag_sound_ent playsound( "vox_egg_story_5_5", "sounddone" );
    level._bag_sound_ent waittill( "sounddone" );
    level._bag_sound_ent delete();
    level._bag_sound_ent = undefined;
}

bag_story_vox_pt2()
{
    level endon( "sq_StD_over" );
    struct = getstruct( "sq_location_bag", "targetname" );

    if ( !isdefined( struct ) )
        return;

    level._bag_sound_ent = spawn( "script_origin", struct.origin );
    level._bag_sound_ent playsound( "vox_egg_story_5_7", "sounddone" );
    level._bag_sound_ent waittill( "sounddone" );
    level._bag_sound_ent playsound( "vox_egg_story_5_8", "sounddone" );
    level._bag_sound_ent waittill( "sounddone" );
    level._bag_sound_ent delete();
    level._bag_sound_ent = undefined;
}
