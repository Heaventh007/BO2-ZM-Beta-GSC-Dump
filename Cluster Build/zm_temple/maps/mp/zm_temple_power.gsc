// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include maps\mp\_utility;
#include common_scripts\utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_utility_raven;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_game_module;

init_electric_switch()
{
    level.power_blockers = getentarray( "temple_power_door", "targetname" );
    flag_init( "left_switch_pulled" );
    flag_init( "right_switch_pulled" );
    flag_init( "left_switch_done" );
    flag_init( "right_switch_done" );
    water_wheel_init();
    left_power_switch_model = getent( "elec_switch_left", "targetname" );
    right_power_switch_model = getent( "elec_switch_right", "targetname" );
    level thread power_switch( "power_trigger_left", "left_switch_pulled" );
    level thread power_switch( "power_trigger_right", "right_switch_pulled" );
    left_power_switch_model thread wait_for_power_switch( "left_switch_pulled", "left_switch_done" );
    right_power_switch_model thread wait_for_power_switch( "right_switch_pulled", "right_switch_done" );
    level thread wait_for_power();
    level thread on_power_on();
}

water_wheel_init()
{
    level thread water_start( "left_switch_done", 48, 25, 0, "evt_waterwheel02" );
    level thread water_start( "right_switch_done", 49, 26, 1, "evt_waterwheel01" );
    level thread water_sounds_left();
    level thread water_sounds_right();
}

power_switch( trigger_name, switch_flag )
{
    switch_trigger = getent( trigger_name, "targetname" );
    switch_trigger sethintstring( &"ZOMBIE_TEMPLE_RELEASE_WATER" );
    switch_trigger setcursorhint( "HINT_NOICON" );

    while ( true )
    {
        switch_trigger waittill( "trigger", player );

        if ( isplayer( player ) )
        {
            flag_set( switch_flag );
            break;
        }
    }

    switch_trigger delete();
    level thread play_poweron_vox( player );
}

play_poweron_vox( player )
{
    level notify( "end_duplicate_poweron_vox" );
    level endon( "end_duplicate_poweron_vox" );
    wait 5;

    if ( isdefined( player ) && flag( "power_on" ) )
        player thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "poweron" );
}

wait_for_power_switch( switch_flag, switch_done_flag )
{
    flag_wait( switch_flag );
    master_switch = self;
    master_switch notsolid();
    master_switch rotateroll( -90, 0.5 );
    master_switch playsound( "zmb_switch_flip" );
    master_switch waittill( "rotatedone" );
    master_switch playsound( "zmb_turn_on" );
    flag_set( switch_done_flag );
}

wait_for_power()
{
    flag_wait( "left_switch_done" );
    flag_wait( "right_switch_done" );
    wait 1.0;
    maps\mp\zombies\_zm_game_module::turn_power_on_and_open_doors();
}

on_power_on()
{
    flag_wait( "power_on" );
    flag_set( "left_switch_pulled" );
    flag_set( "right_switch_pulled" );
    level thread activate_perk_machines();
    clientnotify( "ZPO" );

    for ( i = 0; i < level.power_blockers.size; i++ )
        level.power_blockers[i] connectpaths();

    array_delete( level.power_blockers );
    playsoundatposition( "zmb_poweron_front", ( 0, 0, 0 ) );
    playsoundatposition( "zmb_poweron_rear", ( 0, 0, 0 ) );
    wait 4.5;
    exploder( 15 );
}

activate_perk_machines()
{
    level notify( "juggernog_on" );
    wait_network_frame();
    level notify( "sleight_on" );
    wait_network_frame();
    level notify( "revive_on" );
    wait_network_frame();
    level notify( "marathon_on" );
    wait_network_frame();
    level notify( "divetonuke_on" );
    wait_network_frame();
    level notify( "deadshot_on" );
    wait_network_frame();
    level notify( "doubletap_on" );
    wait_network_frame();
    level notify( "Pack_A_Punch_on" );
}

move_water_covers( name_of_water_covers )
{
    water_covers = getentarray( name_of_water_covers, "targetname" );

    for ( i = 0; i < water_covers.size; i++ )
        water_covers[i] thread _movez( -180, 4.0, 0.25, 0.25 );
}

_movez( z_value, time, acceleration_time, deceleration_time )
{
    self movez( z_value, time, acceleration_time, deceleration_time );
}

water_start( switch_done_flag, water_exploder, spark_exploder, isright, sound )
{
    flag_wait( switch_done_flag );
    wait 3.5;
    exploder( water_exploder );
    stop_exploder( spark_exploder );
    wait 1.2;
    soundent = getent( sound + "_origin", "targetname" );

    if ( isdefined( soundent ) )
        soundent playloopsound( sound, 1 );

    water_wheel_rotate_constant( isright );
}

water_sounds_left()
{
    flag_wait( "left_switch_done" );
    wait 3.5;
    start_struct = getstruct( "water_spout_01", "targetname" );

    if ( isdefined( start_struct ) )
        level thread play_sound_in_space( "evt_water_spout01", start_struct.origin );

    wait 1.0;
    loop_struct = getstruct( "water_pour_01", "targetname" );

    if ( isdefined( loop_struct ) )
    {
        sound_entity = spawn( "script_origin", ( 0, 0, 1 ) );
        sound_entity.origin = loop_struct.origin;
    }
}

water_sounds_right()
{
    flag_wait( "right_switch_done" );
    wait 3.5;
    start_struct = getstruct( "water_spout_02", "targetname" );

    if ( isdefined( start_struct ) )
        level thread play_sound_in_space( "evt_water_spout02", start_struct.origin );

    wait 1.0;
    loop_struct = getstruct( "water_pour_02", "targetname" );

    if ( isdefined( loop_struct ) )
    {
        sound_entity = spawn( "script_origin", ( 0, 0, 1 ) );
        sound_entity.origin = loop_struct.origin;
    }
}

water_wheel_rotate_constant( isright )
{
    if ( isright )
        clientnotify( "wwr" );
    else
        clientnotify( "wwl" );
}
