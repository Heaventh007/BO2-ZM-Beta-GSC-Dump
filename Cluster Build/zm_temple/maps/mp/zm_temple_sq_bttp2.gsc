// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include maps\mp\_utility;
#include common_scripts\utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_sidequests;
#include maps\mp\zm_temple_sq_brock;
#include maps\mp\zm_temple_sq_skits;
#include maps\mp\zm_temple_sq;
#include maps\mp\zombies\_zm_audio;

init()
{
    declare_sidequest_stage( "sq", "bttp2", ::init_stage, ::stage_logic, ::exit_stage );
    set_stage_time_limit( "sq", "bttp2", 300, ::bttp2_timer_func );
}

init_stage()
{
    level notify( "bttp2_start" );
    level._num_dials_correct = 0;
    dials = getentarray( "sq_bttp2_dial", "targetname" );
    level._num_dials_to_match = dials.size;
    array_thread( dials, ::dial_handler );
    maps\mp\zm_temple_sq_brock::delete_radio();

    if ( flag( "radio_7_played" ) )
        level thread delayed_start_skit( "tt7a" );
    else
        level thread delayed_start_skit( "tt7b" );

    level thread bolt_from_the_blue();
}

delayed_start_skit( skit )
{
    wait 0.5;
    level thread maps\mp\zm_temple_sq_skits::start_skit( skit );
}

bolt_from_the_blue()
{
    wait 25;
    a_struct = getstruct( "sq_bttp2_bolt_from_the_blue_a", "targetname" );
    b_struct = getstruct( "sq_bttp2_bolt_from_the_blue_b", "targetname" );
    a = spawn( "script_model", a_struct.origin );
    a setmodel( "p_ztem_glyphs_00" );
    a hide();
    wait_network_frame();
    b = spawn( "script_model", b_struct.origin );
    b setmodel( "p_ztem_glyphs_00" );
    b hide();
    wait_network_frame();
    original_origin = a.origin;

    for ( i = 0; i < 7; i++ )
    {
        yaw = randomfloat( 360 );
        r = randomfloatrange( 500, 1000 );
        amntx = cos( yaw ) * r;
        amnty = sin( yaw ) * r;
        a.origin = original_origin + ( amntx, amnty, 0 );
        maps\mp\zm_temple_sq::bounce_from_a_to_b( a, b, 0 );
        wait 0.55;
    }

    wait 5;
    a.origin = original_origin;
    maps\mp\zm_temple_sq::bounce_from_a_to_b( b, a, 1 );
    wait 1;
    a delete();
    b delete();
}

bttp2_timer_func()
{
    if ( flag( "radio_7_played" ) )
        return 300;
    else
        return 60;
}

stage_logic()
{
    while ( level._num_dials_correct != level._num_dials_to_match )
        wait 0.1;

    level notify( "raise_crystal_1" );
    level notify( "raise_crystal_2" );
    level notify( "raise_crystal_3" );
    level notify( "raise_crystal_4" );
    level notify( "raise_crystal_5" );
    level notify( "raise_crystal_6", 1 );
    level waittill( "raised_crystal_6" );
    wait 5.0;
    stage_completed( "sq", "bttp2" );
}

exit_stage( success )
{
    dials = getentarray( "sq_bttp2_dial", "targetname" );
    array_thread( dials, ::dud_dial_handler );

    if ( success )
        maps\mp\zm_temple_sq_brock::create_radio( 8 );
    else
    {
        maps\mp\zm_temple_sq_brock::create_radio( 7, maps\mp\zm_temple_sq_brock::radio7_override );
        level thread maps\mp\zm_temple_sq_skits::fail_skit();
    }
}

dial_trigger()
{
    level endon( "bttp2_start" );
    level endon( "sq_bttp2_over" );

    while ( true )
    {
        self waittill( "triggered", who );
        self.owner_ent notify( "triggered", who );
    }
}

dial_handler()
{
    if ( !flag( "radio_7_played" ) )
        self thread dud_dial_handler( "We don't know what we're doing." );

    level endon( "sq_bttp2_over" );
    self.angles = self.original_angles;
    pos = randomintrange( 0, 3 );

    if ( pos == self.script_int )
        pos = ( pos + 1 ) % 4;

    self rotatepitch( 90 * pos, 0.01 );
    correct = 0;

    while ( true )
    {
        self waittill( "triggered", who );
        self playsound( "evt_sq_bttp2_wheel_turn" );
        self rotatepitch( 90, 0.25 );
        self waittill( "rotatedone" );
        pos = ( pos + 1 ) % 4;

        if ( pos == self.script_int )
        {
            level._num_dials_correct++;
/#
            print3d( self.origin, "+", vectorscale( ( 0, 1, 0 ), 255.0 ), 10 );
#/
            correct = 1;

            if ( isdefined( who ) && isplayer( who ) )
            {
                if ( level._num_dials_correct == level._num_dials_to_match )
                    who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "quest7", undefined, 0 );
            }
        }
        else if ( correct )
        {
            correct = 0;
            level._num_dials_correct--;
        }

        wait 0.1;
    }
}

dud_dial_handler( dont_know_alias )
{
    level endon( "bttp2_start" );
    self.trigger thread dial_trigger();

    if ( !isdefined( self.original_angles ) )
        self.original_angles = self.angles;

    self.angles = self.original_angles;
    rot = randomintrange( 0, 3 );
    self rotatepitch( rot * 90, 0.01 );

    while ( true )
    {
        self waittill( "triggered" );
        self playsound( "evt_sq_bttp2_wheel_turn" );

        if ( isdefined( dont_know_alias ) )
        {
/#
            iprintlnbold( "Temp player vox : " + dont_know_alias );
#/
        }

        self rotatepitch( 90, 0.25 );
    }
}
