// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include maps\mp\_utility;
#include common_scripts\utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_sidequests;
#include maps\mp\zm_temple_sq_brock;
#include maps\mp\zm_temple_sq_skits;
#include maps\mp\zm_temple_sq_oafc;
#include maps\mp\zm_temple_sq_dgcwf;
#include maps\mp\zm_temple_sq_lgs;
#include maps\mp\zm_temple_sq_ptt;
#include maps\mp\zm_temple_sq_std;
#include maps\mp\zm_temple_sq_bttp;
#include maps\mp\zm_temple_sq_bttp2;
#include maps\mp\zm_temple_sq_bag;
#include maps\mp\zombies\_zm_perks;
#include maps\mp\zombies\_zm;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_weap_shrink_ray;

init()
{
    precachemodel( "p_ztem_skeleton" );
    precachemodel( "p_ztem_meteorite_small" );
    precachemodel( "p_ztem_meteorite" );
    flag_init( "pap_override" );
    flag_init( "radio_9_played" );
    flag_init( "gongs_resonating" );
    flag_init( "trap_destroyed" );
    flag_init( "radio_7_played" );
    flag_init( "meteorite_shrunk" );
    flag_init( "doing_bounce_around" );
    level._crystal_bounce_paths = [];
    level._crystal_bounce_paths[1] = array( 2, 4, 3, 5, 6, "R" );
    level._crystal_bounce_paths[2] = array( 1, 2, 3, 4, 1, "R" );
    level._crystal_bounce_paths[3] = array( 4, 3, 1, 3, 5, "R" );
    level._crystal_bounce_paths[4] = array( 1, 3, 2, 6, 5, "R" );
    level._crystal_bounce_paths[5] = array( 6, 5, 6, 1, 3, 5, "R" );
    level._crystal_bounce_paths[6] = array( 5, 6, 1, 4, 2, 1, 3, "M" );
    precachemodel( "p_ztem_crystal_and_holder" );
    precachemodel( "p_ztem_crystal_holder" );
    precachemodel( "p_ztem_dynamite" );
    precachemodel( "p_ztem_temple_wall_broken" );
    precachemodel( "p_ztem_temple_wall_solid" );
    maps\mp\zm_temple_sq_brock::init();
    maps\mp\zm_temple_sq_skits::init_skits();
    declare_sidequest( "sq", ::init_sidequest, undefined, ::complete_sidequest, ::generic_stage_start, ::generic_stage_complete );
    declare_sidequest_asset( "sq", "sq_sundial", ::sundial_monitor );
    declare_sidequest_asset( "sq", "sq_sundial_button", ::sundial_button );
    declare_sidequest_asset( "sq", "sq_ptt_dial", ::ptt_dial_handler );
    declare_sidequest_asset( "sq", "sq_bttp2_dial", ::bttp2_dial_handler );
    declare_sidequest_asset( "sq", "sq_spiketrap" );
    declare_sidequest_asset_from_struct( "sq", "sq_crystals", ::crystal_handler );
    declare_sidequest_asset( "sq", "sq_gong", ::gong_handler, ::gong_trigger_handler );
    declare_sidequest_icon( "sq", "vril", "zom_hud_icon_vril" );
    declare_sidequest_icon( "sq", "dynamite", "zom_hud_icon_dynamite" );
    declare_sidequest_icon( "sq", "anti115", "zom_hud_icon_meteor" );
    maps\mp\zm_temple_sq_oafc::init();
    maps\mp\zm_temple_sq_dgcwf::init();
    maps\mp\zm_temple_sq_lgs::init();
    maps\mp\zm_temple_sq_ptt::init();
    maps\mp\zm_temple_sq_std::init();
    maps\mp\zm_temple_sq_bttp::init();
    maps\mp\zm_temple_sq_bttp2::init();
    maps\mp\zm_temple_sq_bag::init();
    level._num_gongs = 0;
    randomize_gongs();
    precache_sidequest_assets();
    trig = getent( "sq_dgcwf_trig", "targetname" );
    trig trigger_off();
/#
    level thread force_eclipse_watcher();
    level thread raise_all_crystals();
#/
    level thread gong_watcher();
    level._sq_perk_array = array( "specialty_armorvest", "specialty_quickrevive", "specialty_fastreload", "specialty_rof", "specialty_longersprint", "specialty_flakjacket", "specialty_deadshot" );

    if ( isdefined( level.zombie_additionalprimaryweapon_machine_origin ) )
        level._sq_perk_array[level._sq_perk_array.size] = "specialty_additionalprimaryweapon";
}

randomize_gongs()
{
    gongs = getentarray( "sq_gong", "targetname" );
    gongs = array_randomize( gongs );

    for ( i = 0; i < gongs.size; i++ )
    {
        if ( i < 4 )
        {
            gongs[i].right_gong = 1;
            continue;
        }

        gongs[i].right_gong = 0;
    }
}

watch_for_respawn()
{
    self endon( "disconnect" );

    while ( true )
    {
        self waittill_either( "spawned_player", "player_revived" );
        waittillframeend;
        self setmaxhealth( level.zombie_vars["zombie_perk_juggernaut_health"] );
    }
}

reward()
{
    level notify( "temple_sidequest_achieved" );
    self add_sidequest_icon( "sq", "anti115" );

    for ( i = 0; i < level._sq_perk_array.size; i++ )
    {
        if ( !self hasperk( level._sq_perk_array[i] ) )
        {
            self playsound( "evt_sq_bag_gain_perks" );
            self maps\mp\zombies\_zm_perks::give_perk( level._sq_perk_array[i] );
            wait 0.25;
        }
    }

    self._retain_perks = 1;
    self thread watch_for_respawn();
}

raise_all_crystals()
{
    while ( 0 == getdvarint( #"_id_2FFAB434" ) )
        wait 0.1;

    level notify( "raise_crystal_1" );
    level notify( "raise_crystal_2" );
    level notify( "raise_crystal_3" );
    level notify( "raise_crystal_4" );
    level notify( "raise_crystal_5" );
    level notify( "raise_crystal_6" );
}

gong_watcher()
{
    if ( isdefined( level._gong_watcher_running ) )
        return;

    level._gong_watcher_running = 1;
    level thread watch_for_gongs_gone_bad();

    while ( true )
    {
        flag_wait( "gongs_resonating" );

        for ( i = 0; i < level._raised_crystals.size; i++ )
        {
            if ( level._raised_crystals[i] )
            {
                exploder( 500 + i + 1 );
                wait_network_frame();
            }
        }

        while ( flag( "gongs_resonating" ) )
            wait 0.1;

        for ( i = 0; i < level._raised_crystals.size; i++ )
        {
            stop_exploder( 500 + i + 1 );
            wait_network_frame();
        }
    }
}

watch_for_gongs_gone_bad()
{
    while ( true )
    {
        level waittill( "wrong_gong" );

        for ( i = 0; i < level._raised_crystals.size; i++ )
        {
            if ( level._raised_crystals[i] )
            {
                exploder( 510 + i + 1 );
                wait_network_frame();
            }
        }

        wait 1.0;
        flag_clear( "gongs_resonating" );
        wait 6;

        for ( i = 0; i < level._raised_crystals.size; i++ )
        {
            stop_exploder( 510 + i + 1 );
            wait_network_frame();
        }
    }
}

force_eclipse_watcher()
{
    while ( true )
    {
        while ( 0 == getdvarint( #"_id_961D051F" ) )
            wait 0.1;

        back_to_the_eclipse();
        reveal_meteor();

        while ( 1 == getdvarint( #"_id_961D051F" ) )
            wait 0.1;

        back_to_the_future();
        hide_meteor();
    }
}

gong_trigger_handler()
{
    while ( true )
    {
        self waittill( "damage", amount, attacker, dir, point, mod );

        if ( isplayer( attacker ) && mod == "MOD_MELEE" )
            self.owner_ent notify( "triggered", attacker );
    }
}

gong_handler()
{
    self thread maps\mp\zm_temple_sq_bag::dud_gong_handler();
}

ptt_dial_handler()
{
    self thread maps\mp\zm_temple_sq_ptt::dud_dial_handler();
}

bttp2_dial_handler()
{
    self thread maps\mp\zm_temple_sq_bttp2::dud_dial_handler();
}

start_temple_sidequest()
{
    hide_meteor();
    flag_wait( "all_players_connected" );
    sidequest_start( "sq" );
}

restart_sundial_monitor()
{
    level endon( "kill_sundial_monitor" );
    level waittill( "reset_sundial" );
    wait 0.1;
    self thread sundial_monitor();
}

spin_dial( duration, multiplier )
{
    if ( !isdefined( duration ) )
        duration = 2.0;

    if ( !isdefined( multiplier ) )
        multiplier = 1.3;

    for ( spin_time = 0.1; spin_time < duration; spin_time = spin_time * multiplier )
    {
        self playloopsound( "evt_sq_gen_sundial_spin", 0.5 );
        self rotatepitch( 180, spin_time );
        wait( spin_time * 0.95 );
    }

    self stoploopsound( 2 );
}

short_dial_spin()
{
    spin_dial( 1.0, 1.6 );
}

sundial_monitor()
{
    level endon( "reset_sundial" );
    level endon( "end_game" );
    self.dont_rethread = 1;
    self thread restart_sundial_monitor();

    if ( !isdefined( self.original_pos ) )
    {
        self.original_pos = self.origin - anglestoup( self.angles );
        self.off_pos = self.original_pos - anglestoup( self.angles ) * 34;
    }

    self.origin = self.off_pos;
    level._sundial_buttons_pressed = 0;
    level._stage_active = 0;
    level._sundial_active = 0;
    flag_wait( "power_on" );
    level notify( "kill_buttons" );
    wait 0.05;
    buttons = getentarray( "sq_sundial_button", "targetname" );
    array_thread( buttons, ::sundial_button );

    while ( true )
    {
        while ( level._sundial_buttons_pressed < 4 )
            wait 0.1;

        level._sundial_active = 1;
        self playsound( "evt_sq_gen_transition_start" );
        self playsound( "evt_sq_gen_sundial_emerge" );
        self moveto( self.original_pos, 0.25 );
        self waittill( "movedone" );
        self thread spin_dial();
        wait 0.5;
        stage = sidequest_start_next_stage( "sq" );
        level notify( "stage_starting" );
        amount = 8.5;
        level waittill( "timed_stage_75_percent" );
        self playsound( "evt_sq_gen_sundial_timer" );
        self moveto( self.origin - anglestoup( self.angles ) * amount, 1 );
        self thread short_dial_spin();
        level waittill( "timed_stage_50_percent" );
        self playsound( "evt_sq_gen_sundial_timer" );
        self moveto( self.origin - anglestoup( self.angles ) * amount, 1 );
        self thread short_dial_spin();
        level waittill( "timed_stage_25_percent" );
        self playsound( "evt_sq_gen_sundial_timer" );
        self moveto( self.origin - anglestoup( self.angles ) * amount, 1 );
        self thread short_dial_spin();
        level waittill( "timed_stage_10_seconds_to_go" );
        self thread play_one_second_increments();
        self moveto( self.origin - anglestoup( self.angles ) * amount, 10 );
        self thread spin_dial();
        self waittill( "movedone" );
        level._sundial_active = 0;
        wait 0.1;
    }
}

play_one_second_increments()
{
    level endon( "sidequest_sq_complete" );
    level endon( "reset_sundial" );

    while ( level._sundial_active == 1 )
    {
        self playsound( "evt_sq_gen_sundial_timer" );
        wait 1;
    }
}

sundial_button_already_pressed_by( who, buttons )
{
/#
    if ( get_players().size < 4 )
        return false;
#/

    for ( i = 0; i < buttons.size; i++ )
    {
        if ( isdefined( buttons[i].triggering_player ) && buttons[i].triggering_player == who )
            return true;
    }

    return false;
}

sundial_button()
{
    level endon( "stage_starting" );
    level endon( "kill_buttons" );

    if ( !isdefined( self.dont_rethread ) )
    {
        self.dont_rethread = 1;
        self.on_pos = self.origin - anglestoup( self.angles );
        self.off_pos = self.on_pos - anglestoup( self.angles ) * 5.5;
        self moveto( self.off_pos, 0.01 );
    }

    if ( isdefined( self.trigger ) )
    {
        self.trigger delete();
        self.trigger = undefined;
    }

    self.triggering_player = undefined;
    flag_wait( "power_on" );
    self moveto( self.on_pos, 0.25 );
    self waittill( "movedone" );
    buttons = getentarray( "sq_sundial_button", "targetname" );
    offset = anglestoforward( self.angles ) * 5 - vectorscale( ( 0, 0, 1 ), 16.0 );
    self.trigger = spawn( "trigger_radius_use", self.on_pos + offset, 0, 48, 32 );
    self.trigger setcursorhint( "HINT_NOICON" );
    self.trigger.radius = 48;

    while ( true )
    {
        self.trigger waittill( "trigger", who );

        if ( sundial_button_already_pressed_by( who, buttons ) )
            continue;

        if ( !level._stage_active && level._buttons_can_reset )
        {
            self.triggering_player = who;
            level._sundial_buttons_pressed++;
            self playsound( "evt_sq_gen_button" );
            self moveto( self.off_pos, 0.25 );
            delay = 1;
/#
            if ( get_players().size == 1 )
                delay = 10;
#/
            wait( delay );

            while ( level._sundial_active )
                wait 0.1;

            self.triggering_player = undefined;
            self moveto( self.on_pos, 0.25 );

            if ( level._sundial_buttons_pressed > 0 )
                level._sundial_buttons_pressed--;
        }
    }
}

init_gongs()
{

}

init_sidequest()
{
    level._buttons_can_reset = 1;

    if ( !isdefined( level._sidequest_firsttime ) )
    {
        back_to_the_future();
        level._sidequest_firsttime = 0;
    }

    players = get_players();

    for ( i = 0; i < players.size; i++ )
    {
        entnum = players[i] getentitynumber();

        if ( isdefined( players[i].zm_random_char ) )
            entnum = players[i].zm_random_char;

        if ( entnum == 3 && maps\mp\zombies\_zm::is_sidequest_previously_completed( "COTD" ) )
        {
            players[i] add_sidequest_icon( "sq", "vril" );
            break;
        }
    }

    maps\mp\zm_temple_sq_brock::create_radio( 1 );
    init_gongs();
    wall = getent( "sq_wall", "targetname" );
    wall setmodel( "p_ztem_temple_wall_solid" );
    crystals = getentarray( "sq_crystals", "targetname" );
    level._raised_crystals = [];

    for ( i = 0; i < crystals.size; i++ )
        level._raised_crystals[i] = 0;

    trap = getent( "sq_spiketrap", "targetname" );
    trap show();
    flag_clear( "radio_4_played" );
    flag_clear( "radio_7_played" );
    flag_clear( "radio_9_played" );
    flag_clear( "meteorite_shrunk" );
    meteorite = getent( "sq_meteorite", "targetname" );
    meteorite setmodel( "p_ztem_meteorite" );
    meteorite hide();

    if ( !isdefined( meteorite.original_origin ) )
    {
        meteorite.original_origin = meteorite.origin;
        meteorite.original_angles = meteorite.angles;
    }

    meteorite.origin = meteorite.original_origin;
    meteorite.angles = meteorite.original_angles;
    anti115 = getent( "sq_anti_115", "targetname" );
    anti115 show();
    level thread pap_watcher();
}

pap_watcher()
{
    level notify( "only_one_pap_watcher" );
    level endon( "only_one_pap_watcher" );

    while ( true )
    {
        flag_wait( "pap_override" );

        while ( flag( "pack_machine_in_use" ) )
            wait 0.1;

        level thread pack_a_punch_hide();

        while ( flag( "pap_override" ) )
            wait 0.1;

        level thread pack_a_punch_show();
    }
}

cheat_complete_stage()
{
    level endon( "reset_sundial" );

    while ( true )
    {
        if ( getdvar( #"_id_1186DB2D" ) != "" )
        {
            if ( isdefined( level._last_stage_started ) )
            {
                setdvar( "cheat_sq", "" );
                stage_completed( "sq", level._last_stage_started );
            }
        }

        wait 0.1;
    }
}

generic_stage_start()
{
/#
    level thread cheat_complete_stage();
#/
    level._stage_active = 1;
    back_to_the_eclipse();
    reveal_meteor();
}

generic_stage_complete()
{
    level notify( "reset_sundial" );
    level._stage_active = 0;
    back_to_the_future();
    hide_meteor();
}

complete_sidequest()
{
    level notify( "kill_sundial_monitor" );
    level notify( "reset_sundial" );
    level notify( "kill_buttons" );
    level thread sidequest_done();
}

spin_115()
{
    self endon( "picked_up" );

    while ( true )
    {
        self rotateyaw( 180, 0.4 );
        wait 0.4;
    }
}

sidequest_done()
{
    wall = getent( "sq_wall", "targetname" );
    wall setmodel( "p_ztem_temple_wall_broken" );
    wall notsolid();
    anti115 = getent( "sq_anti_115", "targetname" );
    anti115 thread spin_115();
    anti115 playloopsound( "zmb_meteor_loop" );
    exploder( 520 );
    trigger = spawn( "trigger_radius_use", anti115.origin, 0, 32, 72 );
    trigger setcursorhint( "HINT_NOICON" );
    trigger.radius = 48;
    trigger.height = 72;

    while ( true )
    {
        trigger waittill( "trigger", who );

        if ( isplayer( who ) && !isdefined( who._has_anti115 ) )
        {
            who._has_anti115 = 1;
            who playsound( "zmb_meteor_activate" );
            who thread reward();
            who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "quest8", undefined, 7 );
            who thread delayed_loser_response();
            break;
        }
        else if ( isplayer( who ) )
            who playsound( "zmb_no_cha_ching" );
    }

    trigger delete();
    anti115 stoploopsound( 1 );
    anti115 notify( "picked_up" );
    level notify( "picked_up" );
    anti115 hide();
    stop_exploder( 520 );
    players_far = 0;

    for ( players = get_players(); players_far < players.size; players = get_players() )
    {
        players_far = 0;

        for ( i = 0; i < players.size; i++ )
        {
            if ( distance2dsquared( players[i].origin, wall.origin ) > 129600 )
                players_far++;
        }

        wait 0.1;
    }

    flag_clear( "pap_override" );
    level thread reset_sidequest();
}

delayed_loser_response()
{
    wait 5;
    losers = get_players();
    arrayremovevalue( losers, self );

    if ( losers.size >= 1 )
        losers[randomintrange( 0, losers.size )] thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "quest8", undefined, 8 );
}

reset_sidequest()
{
    sidequest = level._zombie_sidequests["sq"];

    if ( sidequest.num_reps >= 3 )
        return;

    sidequest.num_reps++;
    flag_wait( "radio_9_played" );

    while ( flag( "doing_bounce_around" ) )
        wait 0.1;

    stage_names = getarraykeys( sidequest.stages );

    for ( i = 0; i < stage_names.size; i++ )
        sidequest.stages[stage_names[i]].completed = 0;

    sidequest.last_completed_stage = -1;
    sidequest.active_stage = -1;
    flag_clear( "radio_7_played" );
    flag_clear( "radio_9_played" );
    flag_clear( "trap_destroyed" );
    randomize_gongs();
    crystals = getentarray( "sq_crystals", "targetname" );

    for ( i = 0; i < crystals.size; i++ )
    {
        if ( isdefined( crystals[i].trigger ) )
        {
            crystals[i].trigger delete();
            crystals[i] delete();
        }
    }

    dynamite = getent( "dynamite", "targetname" );
    dynamite delete();
    buttons = getentarray( "sq_sundial_button", "targetname" );

    for ( i = 0; i < buttons.size; i++ )
    {
        if ( isdefined( buttons[i].trigger ) )
        {
            buttons[i].trigger delete();
            buttons[i].trigger = undefined;
        }
    }

    start_temple_sidequest();
    dial = getent( "sq_sundial", "targetname" );
    dial thread sundial_monitor();
}

back_to_the_eclipse()
{
    clientnotify( "ec" );
}

back_to_the_future()
{
    clientnotify( "db" );
}

reveal_meteor()
{
    ent = getent( "sq_meteorite", "targetname" );

    if ( isdefined( ent ) )
    {
        ent show();
        exploder( 518 );
    }
}

hide_meteor()
{
    ent = getent( "sq_meteorite", "targetname" );

    if ( isdefined( ent ) )
    {
        ent hide();
        stop_exploder( 518 );
    }
}

spawn_skel()
{
    if ( !isdefined( level._sq_skel ) )
    {
        ent = getent( "sq_spiketrap", "targetname" );

        if ( isdefined( ent ) )
        {
            sb = spawn( "script_model", ent.origin );
            sb.angles = ent.angles;
            sb setmodel( "p_ztem_skeleton" );
            level._sq_skel = sb;
        }
    }
}

remove_skel()
{
    if ( isdefined( level._sq_skel ) )
    {
        level._sq_skel delete();
        level._sq_skel = undefined;
    }
}

reset_dynamite()
{
    dynamite = getent( "dynamite", "targetname" );
    dynamite.angles = dynamite.original_angles;
    dynamite.origin = dynamite.original_origin;
    dynamite unlink();
    dynamite linkto( dynamite.owner_ent, "", dynamite.origin - dynamite.owner_ent.origin, dynamite.angles - dynamite.owner_ent.angles );
    dynamite.dropped = undefined;
    dynamite show();
}

delay_kill_loop_sound_and_delete()
{
    self stoploopsound( 0.5 );
    wait 0.5;
    self delete();
}

crystal_handler()
{
    if ( isdefined( self.trigger ) )
    {
        maps\mp\zombies\_zm_weap_shrink_ray::remove_shrinkable_object( self.trigger );
        self.trigger thread delay_kill_loop_sound_and_delete();
        self.trigger = undefined;
    }

    if ( isdefined( self.script_noteworthy ) && self.script_noteworthy == "dynamite" && !isdefined( self.dynamite ) )
    {
        dyn_pos = getstruct( self.target, "targetname" );
        dynamite = spawn( "script_model", dyn_pos.origin );
        dynamite.angles = dyn_pos.angles;
        dynamite setmodel( "p_ztem_dynamite" );
        dynamite.targetname = "dynamite";
        dynamite.target = dyn_pos.target;
        dynamite.original_origin = dynamite.origin;
        dynamite.original_angles = dynamite.angles;
        dynamite.owner_ent = self;
        dynamite linkto( self, "", dynamite.origin - self.origin, dynamite.angles - self.angles );
        self.dynamite = dynamite;
    }

    if ( !isdefined( self.original_origin ) )
        self.original_origin = self.origin;

    self dontinterpolate();
    self.origin = self.original_origin - vectorscale( ( 0, 0, 1 ), 154.0 );
    self hide();
    level waittill( "raise_crystal_" + self.script_int, actual_stage );

    if ( actual_stage )
        level notify( "suspend_timer" );

    self show();
    self playsound( "evt_sq_gen_crystal_start" );
    self playloopsound( "evt_sq_gen_crystal_loop", 2 );
    self moveto( self.origin + vectorscale( ( 0, 0, 1 ), 154.0 ), 4.0, 0.8, 0.4 );
    self waittill( "movedone" );
    self stoploopsound( 1 );
    self playsound( "evt_sq_gen_crystal_end" );
    level notify( "raised_crystal_" + self.script_int );

    if ( isdefined( self.script_noteworthy ) && self.script_noteworthy == "empty_holder" )
    {
        if ( isdefined( actual_stage ) && actual_stage )
            level waittill( "crystal_dropped" );

        self setmodel( "p_ztem_crystal_and_holder" );
    }

    trigger = spawn( "trigger_damage", self.origin + vectorscale( ( 0, 0, 1 ), 134.0 ), 0, 32, 32 );
    trigger.radius = 32;
    trigger.height = 32;
    trigger thread crystal_trigger_thread();
    trigger.owner_ent = self;
    maps\mp\zombies\_zm_weap_shrink_ray::add_shrinkable_object( trigger );
    self.trigger = trigger;
    self thread play_loopsound_while_resonating();
    self thread force_stoploopsound_end();
    level._raised_crystals[self.script_int - 1] = 1;
}

play_loopsound_while_resonating()
{
    self.trigger endon( "death" );

    while ( true )
    {
        flag_wait( "gongs_resonating" );
        self playloopsound( "evt_sq_bag_crystal_loop", 2 );

        while ( flag( "gongs_resonating" ) )
            wait 0.1;

        self stoploopsound( 0.5 );
    }
}

get_crystal_from_script_int( num )
{
    sq = getentarray( "sq_crystals", "targetname" );

    for ( i = 0; i < sq.size; i++ )
    {
        if ( sq[i].script_int == num )
            return sq[i];
    }
}

is_crystal_raised( i )
{
    if ( isdefined( level._raised_crystals[i - 1] ) && level._raised_crystals[i - 1] == 1 )
        return true;

    return false;
}

bounce_from_a_to_b( a, b, hotsauce )
{
    if ( hotsauce )
        a setclientflag( level._cf_scriptmover_client_flag_hotsauce_start );
    else
        a setclientflag( level._cf_scriptmover_client_flag_weaksauce_start );

    b setclientflag( level._cf_scriptmover_client_flag_sauce_end );
    wait_network_frame();
    wait_network_frame();
    wait_network_frame();

    if ( isdefined( a ) )
    {
        a clearclientflag( level._cf_scriptmover_client_flag_hotsauce_start );
        a clearclientflag( level._cf_scriptmover_client_flag_weaksauce_start );
    }

    if ( isdefined( b ) )
        b clearclientflag( level._cf_scriptmover_client_flag_sauce_end );
}

do_bounce_off( start, hotsauce )
{
    if ( !isdefined( level._bounce_off_ent ) )
    {
        level._bounce_off_ent = spawn( "script_model", ( 0, 0, 0 ) );
        level._bounce_off_ent setmodel( "p_ztem_glyphs_00" );
        level._bounce_off_ent hide();
    }

    yaw = randomfloat( 360 );
    r = randomfloatrange( 100, 200 );
    amntx = cos( yaw ) * r;
    amnty = sin( yaw ) * r;
    level._bounce_off_ent.origin = start.origin + ( amntx, amnty, randomint( 60 ) );
    level thread bounce_from_a_to_b( start, level._bounce_off_ent, hotsauce );
}

shrink_time()
{
    wait 1.0;
    clientnotify( "mts" );
    self playsound( "evt_sq_bag_shrink_meteor" );
    exploder( 519 );
    wait 0.1;
    stop_exploder( 518 );
    self hide();
    wait 0.25;
    flag_set( "meteorite_shrunk" );
    level thread shut_off_all_looping_sounds();
    self playsound( "evt_sq_bag_silence" );
    self playsound( "evt_sq_bag_meteor_fall" );
    self moveto( self.origin - vectorscale( ( 0, 0, 1 ), 120.0 ), 2.0, 0.5 );
    self waittill( "movedone" );
    players = get_players();
    players[randomintrange( 0, players.size )] thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "quest8", undefined, 4 );
}

crystal_shrink_logic( hotsauce )
{
    level._crystal_shrink_logic_running = 1;
    flag_set( "doing_bounce_around" );
    bounce_path = level._crystal_bounce_paths[self.script_int];
    start = self;
    end = undefined;

    if ( isdefined( bounce_path ) )
    {
        for ( i = 0; i < bounce_path.size; i++ )
        {
            if ( "" + bounce_path[i] == "M" )
            {
                if ( sidequest_stage_active( "sq", "BaG" ) && !flag( "meteorite_shrunk" ) )
                {
                    ent = getent( "sq_meteorite", "targetname" );

                    if ( hotsauce )
                    {
                        start playsound( "evt_sq_bag_crystal_bounce_correct" );
                        exploder( 509 );
                        ent thread shrink_time();
                    }
                    else
                    {
                        start playsound( "evt_sq_bag_crystal_bounce_fail" );
                        exploder( 529 );
                        players = get_players();
                        players[randomintrange( 0, players.size )] thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "quest8", undefined, 3 );
                    }
                }
                else
                {
                    start playsound( "evt_sq_bag_crystal_bounce_fail" );
                    exploder( 529 );
                }
            }
            else if ( "" + bounce_path[i] == "R" )
            {
                start playsound( "evt_sq_bag_crystal_bounce_fail" );
                do_bounce_off( start, hotsauce );
                break;
            }
            else if ( is_crystal_raised( bounce_path[i] ) )
            {
                end = get_crystal_from_script_int( bounce_path[i] );
                start playsound( "evt_sq_bag_crystal_bounce_correct" );
                level thread bounce_from_a_to_b( start, end, hotsauce );
                start = end;
            }
            else
            {
                start playsound( "evt_sq_bag_crystal_bounce_fail" );
                do_bounce_off( start, hotsauce );
                break;
            }

            wait 0.5;
            end playsound( "evt_sq_bag_crystal_hit_" + i );

            if ( hotsauce && isdefined( end ) && isdefined( end.dynamite ) && !isdefined( end.dynamite.dropped ) && sidequest_stage_active( "sq", "BaG" ) )
                end.dynamite thread maps\mp\zm_temple_sq_bag::fire_in_the_hole();

            end playsound( "evt_sq_bag_crystal_charge" );

            if ( hotsauce )
                exploder( end.script_int + 520 );
            else
                exploder( end.script_int + 530 );

            wait 0.5;
        }
    }

    level._crystal_shrink_logic_running = undefined;
    flag_clear( "doing_bounce_around" );
}

crystal_shrink_thread()
{
    self endon( "death" );

    while ( true )
    {
        self waittill( "shrunk", hotsauce );

        if ( !flag( "gongs_resonating" ) )
            hotsauce = 0;

        if ( !isdefined( level._crystal_shrink_logic_running ) )
            self.owner_ent thread crystal_shrink_logic( hotsauce );
    }
}

crystal_trigger_thread()
{
    self endon( "death" );
    self thread crystal_shrink_thread();

    while ( true )
        self waittill( "damage", amount, attacker, dir, point, type );
}

pack_a_punch_hide()
{
    if ( !isdefined( level._pap_hidden ) )
    {
        level._pap_hidden = 0;
        pap_machine_trig = getent( "zombie_vending_upgrade", "targetname" );
        pap_machine_trig enablelinkto();
    }

    if ( level._pap_hidden )
        return;

    level._pap_hidden = 1;
    pap_clip = getent( "zombie_vending_upgrade_clip", "targetname" );
    pap_clip notsolid();
    pap_clip connectpaths();
    pap_machine_trig = getent( "zombie_vending_upgrade", "targetname" );
    pap_pieces = getentarray( pap_machine_trig.target, "targetname" );
    pap_jingle_struct = getstruct( "pack_jingle_struct", "script_noteworthy" );

    if ( !isdefined( pap_jingle_struct.original_origin ) )
    {
        pap_jingle_struct.original_origin = pap_jingle_struct.origin;
        pap_machine_trig.original_origin = pap_machine_trig.origin;
    }

    link_ent = spawn( "script_origin", pap_machine_trig.origin );
    link_ent.angles = pap_jingle_struct.angles;
    pap_machine_trig linkto( link_ent );
    level._original_pap_spot = pap_machine_trig.origin;
    pap_clip linkto( link_ent );

    for ( i = 0; i < pap_pieces.size; i++ )
    {
        if ( isdefined( pap_pieces[i].target ) )
            getent( pap_pieces[i].target, "targetname" ) linkto( link_ent );

        pap_pieces[i] linkto( link_ent );
    }

    link_ent moveto( link_ent.origin + vectorscale( ( 0, 0, -1 ), 350.0 ), 5 );
    link_ent waittill( "movedone" );

    for ( i = 0; i < pap_pieces.size; i++ )
    {
        if ( isdefined( pap_pieces[i].target ) )
            getent( pap_pieces[i].target, "targetname" ) hide();

        pap_pieces[i] hide();
    }

    pap_machine_trig unlink();

    for ( i = 0; i < pap_pieces.size; i++ )
    {
        if ( isdefined( pap_pieces[i].target ) )
            getent( pap_pieces[i].target, "targetname" ) unlink();

        pap_pieces[i] unlink();
    }

    pap_jingle_struct.origin = pap_jingle_struct.original_origin;
    pap_jingle_struct.angles = link_ent.angles;
    pap_clip unlink();
    link_ent delete();
    level._pap_hidden = 2;
}

pack_a_punch_show()
{
    if ( !isdefined( level._pap_hidden ) || level._pap_hidden == 0 )
        return;

    if ( level._pap_hidden == 1 )
    {
        while ( level._pap_hidden != 2 )
            wait 1;
    }

    pap_clip = getent( "zombie_vending_upgrade_clip", "targetname" );
    pap_clip solid();
    pap_clip connectpaths();
    pap_machine_trig = getent( "zombie_vending_upgrade", "targetname" );
    pap_pieces = getentarray( pap_machine_trig.target, "targetname" );
    pap_jingle_struct = getstruct( "pack_jingle_struct", "script_noteworthy" );
    link_ent = spawn( "script_origin", pap_machine_trig.origin );
    link_ent.angles = pap_jingle_struct.angles;
    pap_machine_trig linkto( link_ent );
    pap_clip linkto( link_ent );

    for ( i = 0; i < pap_pieces.size; i++ )
    {
        if ( isdefined( pap_pieces[i].target ) )
        {
            getent( pap_pieces[i].target, "targetname" ) linkto( link_ent );
            getent( pap_pieces[i].target, "targetname" ) hide();
        }

        pap_pieces[i] linkto( link_ent );
        pap_pieces[i] hide();
    }

    for ( i = 0; i < pap_pieces.size; i++ )
    {
        if ( isdefined( pap_pieces[i].target ) )
            getent( pap_pieces[i].target, "targetname" ) show();

        pap_pieces[i] show();
    }

    link_ent moveto( level._original_pap_spot, 5 );
    link_ent waittill( "movedone" );
    pap_machine_trig unlink();

    for ( i = 0; i < pap_pieces.size; i++ )
    {
        if ( isdefined( pap_pieces[i].target ) )
            getent( pap_pieces[i].target, "targetname" ) unlink();

        pap_pieces[i] unlink();
    }

    pap_jingle_struct.origin = pap_jingle_struct.original_origin;
    pap_jingle_struct.angles = link_ent.angles;
    pap_clip unlink();
    link_ent delete();
    level._pap_hidden = 0;
}

get_variant_from_entity_num( player_number )
{
    if ( !isdefined( player_number ) )
        player_number = 0;

    post_fix = "a";

    switch ( player_number )
    {
        case 0:
            post_fix = "a";
            break;
        case 1:
            post_fix = "b";
            break;
        case 2:
            post_fix = "c";
            break;
        case 3:
            post_fix = "d";
            break;
    }

    return post_fix;
}

shut_off_all_looping_sounds()
{
    gongs = getentarray( "sq_gong", "targetname" );

    for ( i = 0; i < gongs.size; i++ )
    {
        if ( gongs[i].right_gong )
        {
            if ( gongs[i].ringing )
            {
                if ( level._num_gongs >= 0 )
                    level._num_gongs--;

                gongs[i] stoploopsound( 0.5 );
            }
        }

        gongs[i].ringing = 0;
    }

    level notify( "force_stoploopsound_end" );
    level notify( "kill_resonate" );
}

force_stoploopsound_end()
{
    self.trigger endon( "death" );
    level waittill( "force_stoploopsound_end" );
    self stoploopsound( 0.5 );
}
