// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_fx;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\zombies\_zm_weap_freezegun;
#include clientscripts\mp\zombies\_zm;

init()
{
    if ( getdvar( #"createfx" ) == "on" )
        return;

    if ( isdefined( level.use_freezegun_features ) && level.use_freezegun_features == 1 )
    {

    }
    else if ( !clientscripts\mp\zombies\_zm_weapons::is_weapon_included( "freezegun_zm" ) )
        return;

    registerclientfield( "actor", "freezegun_torso_damage_fx", 1, 1, "int", ::freezegun_torso_damage_fx, 1 );
    registerclientfield( "actor", "freezegun_extremity_damage_fx", 1, 1, "int", ::freezegun_extremity_damage_fx, 1 );
    level._gib_overload_func = clientscripts\mp\zombies\_zm_weap_freezegun::freezegun_gib_override;
    level._effect["freezegun_shatter"] = loadfx( "weapon/freeze_gun/fx_freezegun_shatter" );
    level._effect["freezegun_crumple"] = loadfx( "weapon/freeze_gun/fx_freezegun_crumple" );
    level._effect["freezegun_damage_torso"] = loadfx( "maps/zombie/fx_zombie_freeze_torso" );
    level._effect["freezegun_damage_sm"] = loadfx( "maps/zombie/fx_zombie_freeze_md" );
    level._effect["freezegun_shatter_upgraded"] = loadfx( "weapon/freeze_gun/fx_exp_freezegun_impact" );
    level._effect["freezegun_crumple_upgraded"] = loadfx( "weapon/freeze_gun/fx_exp_freezegun_impact" );
    level._effect["freezegun_shatter_gib_fx"] = loadfx( "weapon/bullet/fx_flesh_gib_fatal_01" );
    level._effect["freezegun_shatter_gibtrail_fx"] = loadfx( "weapon/freeze_gun/fx_trail_freezegun_blood_streak" );
    level._effect["freezegun_crumple_gib_fx"] = loadfx( "system_elements/fx_null" );
    level._effect["freezegun_crumple_gibtrail_fx"] = loadfx( "system_elements/fx_null" );
    level thread player_init();
}

player_init()
{
    waitforclient( 0 );
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
        player = players[i];
}

freezegun_get_gibfx( shatter )
{
    if ( shatter )
        return level._effect["freezegun_shatter_gib_fx"];
    else
        return level._effect["freezegun_crumple_gib_fx"];
}

freezegun_get_gibtrailfx( shatter )
{
    if ( shatter )
        return level._effect["freezegun_shatter_gibtrail_fx"];
    else
        return level._effect["freezegun_crumple_gibtrail_fx"];
}

freezegun_get_gibsound( shatter )
{
    if ( shatter )
        return "zmb_death_gibs";
    else
        return "zmb_death_gibs";
}

freezegun_get_gibforce( tag, force_from_torso, shatter )
{
    if ( shatter )
    {
        start_pos = self.origin;

        if ( force_from_torso )
            start_pos = self gettagorigin( "J_SpineLower" );

        forward = vectornormalize( self gettagorigin( tag ) - start_pos );
        forward = forward * randomintrange( 600, 1000 );
        forward = forward + ( 0, 0, randomintrange( 400, 700 ) );
        return forward;
    }
    else
        return ( 0, 0, 0 );
}

freezegun_get_shatter_effect( upgraded )
{
    if ( upgraded )
        return level._effect["freezegun_shatter_upgraded"];
    else
        return level._effect["freezegun_shatter"];
}

freezegun_get_crumple_effect( upgraded )
{
    if ( upgraded )
        return level._effect["freezegun_crumple_upgraded"];
    else
        return level._effect["freezegun_crumple"];
}

freezegun_end_extremity_damage_fx( localclientnum, key )
{
    deletefx( localclientnum, self.freezegun_extremity_damage_fx_handles[localclientnum][key], 0 );
}

freezegun_end_all_extremity_damage_fx( localclientnum )
{
    keys = getarraykeys( self.freezegun_extremity_damage_fx_handles[localclientnum] );

    for ( i = 0; i < keys.size; i++ )
        freezegun_end_extremity_damage_fx( localclientnum, keys[i] );
}

freezegun_end_extremity_damage_fx_for_all_localclients( key )
{
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
        freezegun_end_extremity_damage_fx( i, key );
}

freezegun_play_extremity_damage_fx( localclientnum, fx, key, tag )
{
    self.freezegun_extremity_damage_fx_handles[localclientnum][key] = playfxontag( localclientnum, fx, self, tag );
}

freezegun_play_all_extremity_damage_fx( localclientnum )
{
    if ( !isdefined( self.freezegun_extremity_damage_fx_handles ) )
        self.freezegun_extremity_damage_fx_handles = [];

    if ( isdefined( self.freezegun_extremity_damage_fx_handles[localclientnum] ) )
        return;

    self.freezegun_extremity_damage_fx_handles[localclientnum] = [];

    if ( !self clientscripts\mp\zombies\_zm::has_gibbed_piece( level._zombie_gib_piece_index_right_arm ) )
        freezegun_play_extremity_damage_fx( localclientnum, level._effect["freezegun_damage_sm"], "right_arm", "J_Elbow_RI" );

    if ( !self clientscripts\mp\zombies\_zm::has_gibbed_piece( level._zombie_gib_piece_index_left_arm ) )
        freezegun_play_extremity_damage_fx( localclientnum, level._effect["freezegun_damage_sm"], "left_arm", "J_Elbow_LE" );

    if ( !self clientscripts\mp\zombies\_zm::has_gibbed_piece( level._zombie_gib_piece_index_right_leg ) )
        freezegun_play_extremity_damage_fx( localclientnum, level._effect["freezegun_damage_sm"], "right_leg", "J_Knee_RI" );

    if ( !self clientscripts\mp\zombies\_zm::has_gibbed_piece( level._zombie_gib_piece_index_left_leg ) )
        freezegun_play_extremity_damage_fx( localclientnum, level._effect["freezegun_damage_sm"], "left_leg", "J_Knee_LE" );
}

freezegun_extremity_damage_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
    {
        if ( newval )
        {
            self thread freezegun_play_all_extremity_damage_fx( i );
            continue;
        }

        self thread freezegun_end_all_extremity_damage_fx( i );
    }
}

freezegun_end_all_torso_damage_fx( localclientnum )
{
    deletefx( localclientnum, self.freezegun_damage_torso_fx[localclientnum], 1 );
}

freezegun_play_all_torso_damage_fx( localclientnum )
{
    if ( !isdefined( self.freezegun_damage_torso_fx ) )
        self.freezegun_damage_torso_fx = [];

    if ( isdefined( self.freezegun_damage_torso_fx[localclientnum] ) )
        return;

    if ( isdefined( level.use_freezegun_features ) && level.use_freezegun_features == 1 )
    {
        is_gibbed = self clientscripts\mp\zombies\_zm::has_gibbed_piece( level._zombie_gib_piece_index_left_leg ) || self clientscripts\mp\zombies\_zm::has_gibbed_piece( level._zombie_gib_piece_index_right_leg );

        if ( is_gibbed )
            self.freezegun_damage_torso_fx[localclientnum] = playfxontag( localclientnum, level._effect["freezegun_damage_torso"], self, "J_SpineLower" );
        else
            self.freezegun_damage_torso_fx[localclientnum] = playfxontag( localclientnum, level._effect["waterfreeze"], self, "tag_origin" );
    }
    else
        self.freezegun_damage_torso_fx[localclientnum] = playfxontag( localclientnum, level._effect["freezegun_damage_torso"], self, "J_SpineLower" );
}

freezegun_torso_damage_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
    {
        if ( newval )
        {
            self thread freezegun_play_all_torso_damage_fx( i );
            continue;
        }

        self thread freezegun_end_all_torso_damage_fx( i );
    }
}

freezegun_do_gib_fx( tag, shatter )
{
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
        playfxontag( i, freezegun_get_gibtrailfx( shatter ), self, tag );
}

freezegun_do_gib( model, tag, force_from_torso, shatter )
{
    if ( shatter && !force_from_torso )
    {
        tag_pos = self.origin;
        tag_angles = ( 0, 0, 1 );
    }
    else
    {
        tag_pos = self gettagorigin( tag );
        tag_angles = self gettagangles( tag );
    }

    createdynentandlaunch( 0, model, tag_pos, tag_angles, tag_pos, self freezegun_get_gibforce( tag, force_from_torso, shatter ), freezegun_get_gibtrailfx( shatter ), 1 );
    self freezegun_do_gib_fx( tag, shatter );
}

freezegun_gib_override( type, locations )
{
    if ( "freeze" != type && "up" != type )
    {
        if ( isdefined( self.freezegun_damage_fx_handles ) )
        {
            for ( i = 0; i < locations.size; i++ )
            {
                switch ( locations[i] )
                {
                    case 0:
                        players = getlocalplayers();

                        for ( i = 0; i < players.size; i++ )
                            self freezegun_end_all_extremity_damage_fx( i );

                        break;
                    case 1:
                        freezegun_end_extremity_damage_fx_for_all_localclients( "right_arm" );
                        break;
                    case 2:
                        freezegun_end_extremity_damage_fx_for_all_localclients( "left_arm" );
                        break;
                    case 3:
                        freezegun_end_extremity_damage_fx_for_all_localclients( "right_leg" );
                        break;
                    case 4:
                        freezegun_end_extremity_damage_fx_for_all_localclients( "left_leg" );
                        break;
                    case 6:
                        freezegun_end_extremity_damage_fx_for_all_localclients( "left_arm" );
                        break;
                }
            }
        }

        return false;
    }

    upgraded = 0;

    for ( i = 0; i < locations.size; i++ )
    {
        switch ( locations[i] )
        {
            case 7:
                upgraded = 1;
                break;
        }
    }

    shatter = 0;
    explosion_effect = freezegun_get_crumple_effect( upgraded );
    alias = "wpn_freezegun_collapse_zombie";

    if ( "up" == type )
    {
        shatter = 1;
        explosion_effect = freezegun_get_shatter_effect( upgraded );
        alias = "wpn_freezegun_shatter_zombie";
    }

    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
    {
        self clientscripts\mp\zombies\_zm::deletezombieeyes( i );
        self freezegun_end_all_extremity_damage_fx( i );
        self freezegun_end_all_torso_damage_fx( i );
        playfx( i, explosion_effect, self.origin );
        playsound( 0, alias, self.origin );
    }

    for ( i = 0; i < locations.size; i++ )
    {
        switch ( locations[i] )
        {
            case 0:
                if ( !self clientscripts\mp\zombies\_zm::has_gibbed_piece( level._zombie_gib_piece_index_right_arm ) && isdefined( self._gib_def.gibspawn1 ) && isdefined( self._gib_def.gibspawntag1 ) )
                    self thread freezegun_do_gib( self._gib_def.gibspawn1, self._gib_def.gibspawntag1, 1, shatter );

                if ( !self clientscripts\mp\zombies\_zm::has_gibbed_piece( level._zombie_gib_piece_index_left_arm ) && isdefined( self._gib_def.gibspawn2 ) && isdefined( self._gib_def.gibspawntag2 ) )
                    self thread freezegun_do_gib( self._gib_def.gibspawn2, self._gib_def.gibspawntag2, 1, shatter );

                if ( !self clientscripts\mp\zombies\_zm::has_gibbed_piece( level._zombie_gib_piece_index_right_leg ) && isdefined( self._gib_def.gibspawn3 ) && isdefined( self._gib_def.gibspawntag3 ) )
                    self thread freezegun_do_gib( self._gib_def.gibspawn3, self._gib_def.gibspawntag3, 0, shatter );

                if ( !self clientscripts\mp\zombies\_zm::has_gibbed_piece( level._zombie_gib_piece_index_left_leg ) && isdefined( self._gib_def.gibspawn4 ) && isdefined( self._gib_def.gibspawntag4 ) )
                    self thread freezegun_do_gib( self._gib_def.gibspawn4, self._gib_def.gibspawntag4, 0, shatter );

                self thread freezegun_do_gib_fx( "J_SpineLower", shatter );
                self clientscripts\mp\zombies\_zm::mark_piece_gibbed( level._zombie_gib_piece_index_right_arm );
                self clientscripts\mp\zombies\_zm::mark_piece_gibbed( level._zombie_gib_piece_index_left_arm );
                self clientscripts\mp\zombies\_zm::mark_piece_gibbed( level._zombie_gib_piece_index_right_leg );
                self clientscripts\mp\zombies\_zm::mark_piece_gibbed( level._zombie_gib_piece_index_left_leg );
                self clientscripts\mp\zombies\_zm::mark_piece_gibbed( level._zombie_gib_piece_index_head );
                break;
        }
    }

    self.gibbed = 1;
    return true;
}
