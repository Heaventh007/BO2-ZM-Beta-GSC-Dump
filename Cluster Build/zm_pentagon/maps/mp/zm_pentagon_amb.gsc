// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include maps\mp\_utility;
#include common_scripts\utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\animscripts\zm_utility;
#include maps\mp\zombies\_zm_audio;

main()
{
    level thread setup_phone_audio();
}

setup_phone_audio()
{
    wait 1;
    level.phone_counter = 0;
    array_thread( getentarray( "secret_phone_trig", "targetname" ), ::phone_egg );
}

phone_egg()
{
    if ( !isdefined( self ) )
        return;

    phone = getent( self.target, "targetname" );

    if ( isdefined( phone ) )
        blinky = playfxontag( level._effect["fx_zombie_light_glow_telephone"], phone, "tag_light" );

    self usetriggerrequirelookat();
    self setcursorhint( "HINT_NOICON" );
    self playloopsound( "zmb_egg_phone_loop" );
/#
    self thread debug_track();
#/
    self waittill( "trigger", player );
    self stoploopsound( 1 );
    player playsound( "zmb_egg_phone_activate" );
    level.phone_counter = level.phone_counter + 1;

    if ( level.phone_counter == 3 )
    {
        level pentagon_unlock_doa();
        playsoundatposition( "evt_doa_unlock", ( 0, 0, 0 ) );
        wait 5;
        level thread play_music_easter_egg();
    }
}

play_music_easter_egg()
{
    level.music_override = 1;

    if ( is_mature() )
        level thread maps\mp\zombies\_zm_audio::change_zombie_music( "egg" );
    else
    {
        level.music_override = 0;
        return;
    }

    wait 265;
    level.music_override = 0;
    level thread maps\mp\zombies\_zm_audio::change_zombie_music( "wave_loop" );
}

play_pentagon_announcer_vox( alias, defcon_level )
{
    if ( !isdefined( alias ) )
        return;

    if ( !isdefined( level.pentann_is_speaking ) )
        level.pentann_is_speaking = 0;

    if ( isdefined( defcon_level ) )
        alias = alias + "_" + defcon_level;

    if ( level.pentann_is_speaking == 0 )
    {
        level.pentann_is_speaking = 1;
        level play_initial_alarm();
        level play_sound_2d( alias );
        level.pentann_is_speaking = 0;
    }
}

play_initial_alarm()
{
    structs = getstructarray( "defcon_alarms", "targetname" );

    for ( i = 0; i < structs.size; i++ )
        playsoundatposition( "evt_thief_alarm_single", structs[i].origin );

    wait 0.5;
}

pentagon_unlock_doa()
{
    level.zombie_pentagon_player_cf_updateprofile = 0;
    players = get_players();
    array_thread( players, ::pentagon_delay_update );
}

pentagon_delay_update()
{

}

debug_track()
{
/#
    self endon( "trigger" );
    spawn_struct = getent( self.target, "targetname" );

    while ( true )
    {
/#
        print3d( spawn_struct.origin, "+", vectorscale( ( 0, 1, 0 ), 255.0 ), 1 );
#/
        wait 1;
    }
#/
}
