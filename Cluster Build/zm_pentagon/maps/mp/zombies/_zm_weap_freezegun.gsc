// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_spawner;

init()
{
    if ( is_true( level.use_freezegun_features ) )
    {

    }
    else if ( !maps\mp\zombies\_zm_weapons::is_weapon_included( "freezegun_zm" ) )
        return;

    registerclientfield( "actor", "freezegun_extremity_damage_fx", 1, 1, "int" );
    registerclientfield( "actor", "freezegun_torso_damage_fx", 1, 1, "int" );
    set_zombie_var( "freezegun_cylinder_radius", 120 );
    set_zombie_var( "freezegun_inner_range", 60 );
    set_zombie_var( "freezegun_outer_range", 600 );
    set_zombie_var( "freezegun_inner_damage", 1000 );
    set_zombie_var( "freezegun_outer_damage", 500 );
    set_zombie_var( "freezegun_shatter_range", 180 );
    set_zombie_var( "freezegun_shatter_inner_damage", 500 );
    set_zombie_var( "freezegun_shatter_outer_damage", 250 );
    set_zombie_var( "freezegun_cylinder_radius_upgraded", 180 );
    set_zombie_var( "freezegun_inner_range_upgraded", 120 );
    set_zombie_var( "freezegun_outer_range_upgraded", 900 );
    set_zombie_var( "freezegun_inner_damage_upgraded", 1500 );
    set_zombie_var( "freezegun_outer_damage_upgraded", 750 );
    set_zombie_var( "freezegun_shatter_range_upgraded", 300 );
    set_zombie_var( "freezegun_shatter_inner_damage_upgraded", 750 );
    set_zombie_var( "freezegun_shatter_outer_damage_upgraded", 500 );
    level._effect["freezegun_shatter"] = loadfx( "weapon/freeze_gun/fx_freezegun_shatter" );
    level._effect["freezegun_crumple"] = loadfx( "weapon/freeze_gun/fx_freezegun_crumple" );
    level._effect["freezegun_smoke_cloud"] = loadfx( "weapon/freeze_gun/fx_freezegun_smoke_cloud" );
    level._effect["freezegun_damage_torso"] = loadfx( "maps/zombie/fx_zombie_freeze_torso" );
    level._effect["freezegun_damage_sm"] = loadfx( "maps/zombie/fx_zombie_freeze_md" );
    level._effect["freezegun_shatter_upgraded"] = loadfx( "weapon/freeze_gun/fx_exp_freezegun_impact" );
    level._effect["freezegun_crumple_upgraded"] = loadfx( "weapon/freeze_gun/fx_exp_freezegun_impact" );
    level._effect["freezegun_shatter_gib_fx"] = loadfx( "weapon/bullet/fx_flesh_gib_fatal_01" );
    level._effect["freezegun_shatter_gibtrail_fx"] = loadfx( "weapon/freeze_gun/fx_trail_freezegun_blood_streak" );
    level._effect["freezegun_crumple_gib_fx"] = loadfx( "system_elements/fx_null" );
    level._effect["freezegun_crumple_gibtrail_fx"] = loadfx( "system_elements/fx_null" );
/#
    level thread freezegun_devgui_dvar_think();
#/
    onplayerconnect_callback( ::freezegun_on_player_connect );
}

freezegun_devgui_dvar_think()
{
/#
    if ( !maps\mp\zombies\_zm_weapons::is_weapon_included( "freezegun_zm" ) )
        return;

    setdvar( "scr_freezegun_cylinder_radius", level.zombie_vars["freezegun_cylinder_radius"] );
    setdvar( "scr_freezegun_inner_range", level.zombie_vars["freezegun_inner_range"] );
    setdvar( "scr_freezegun_outer_range", level.zombie_vars["freezegun_outer_range"] );
    setdvar( "scr_freezegun_inner_damage", level.zombie_vars["freezegun_inner_damage"] );
    setdvar( "scr_freezegun_outer_damage", level.zombie_vars["freezegun_outer_damage"] );
    setdvar( "scr_freezegun_shatter_range", level.zombie_vars["freezegun_shatter_range"] );
    setdvar( "scr_freezegun_shatter_inner_damage", level.zombie_vars["freezegun_shatter_inner_damage"] );
    setdvar( "scr_freezegun_shatter_outer_damage", level.zombie_vars["freezegun_shatter_outer_damage"] );
    setdvar( "scr_freezegun_cylinder_radius_upgraded", level.zombie_vars["freezegun_cylinder_radius_upgraded"] );
    setdvar( "scr_freezegun_inner_range_upgraded", level.zombie_vars["freezegun_inner_range_upgraded"] );
    setdvar( "scr_freezegun_outer_range_upgraded", level.zombie_vars["freezegun_outer_range_upgraded"] );
    setdvar( "scr_freezegun_inner_damage_upgraded", level.zombie_vars["freezegun_inner_damage_upgraded"] );
    setdvar( "scr_freezegun_outer_damage_upgraded", level.zombie_vars["freezegun_outer_damage_upgraded"] );
    setdvar( "scr_freezegun_shatter_range_upgraded", level.zombie_vars["freezegun_shatter_range_upgraded"] );
    setdvar( "scr_freezegun_shatter_inner_damage_upgraded", level.zombie_vars["freezegun_shatter_inner_damage_upgraded"] );
    setdvar( "scr_freezegun_shatter_outer_damage_upgraded", level.zombie_vars["freezegun_shatter_outer_damage_upgraded"] );

    for (;;)
    {
        level.zombie_vars["freezegun_cylinder_radius"] = getdvarint( #"_id_89118F97" );
        level.zombie_vars["freezegun_inner_range"] = getdvarint( #"_id_6F465E7E" );
        level.zombie_vars["freezegun_outer_range"] = getdvarint( #"_id_66A73BF1" );
        level.zombie_vars["freezegun_inner_damage"] = getdvarint( #"_id_37695030" );
        level.zombie_vars["freezegun_outer_damage"] = getdvarint( #"_id_1AE5DC03" );
        level.zombie_vars["freezegun_shatter_range"] = getdvarint( #"_id_33624B1D" );
        level.zombie_vars["freezegun_shatter_inner_damage"] = getdvarint( #"_id_02B404CA" );
        level.zombie_vars["freezegun_shatter_outer_damage"] = getdvarint( #"_id_E630909D" );
        level.zombie_vars["freezegun_cylinder_radius_upgraded"] = getdvarint( #"_id_6FC601E2" );
        level.zombie_vars["freezegun_inner_range_upgraded"] = getdvarint( #"_id_B6CB84A9" );
        level.zombie_vars["freezegun_outer_range_upgraded"] = getdvarint( #"_id_EA34337C" );
        level.zombie_vars["freezegun_inner_damage_upgraded"] = getdvarint( #"_id_87267E9B" );
        level.zombie_vars["freezegun_outer_damage_upgraded"] = getdvarint( #"_id_27A507CE" );
        level.zombie_vars["freezegun_shatter_range_upgraded"] = getdvarint( #"_id_89A11428" );
        level.zombie_vars["freezegun_shatter_inner_damage_upgraded"] = getdvarint( #"_id_82170075" );
        level.zombie_vars["freezegun_shatter_outer_damage_upgraded"] = getdvarint( #"_id_229589A8" );
        wait 0.5;
    }
#/
}

freezegun_on_player_connect()
{
    self thread wait_for_thundergun_fired();
}

wait_for_thundergun_fired()
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );

    for (;;)
    {
        self waittill( "weapon_fired" );
        currentweapon = self getcurrentweapon();

        if ( currentweapon == "freezegun_zm" || currentweapon == "freezegun_upgraded_zm" )
        {
            self thread freezegun_fired( currentweapon == "freezegun_upgraded_zm" );
            view_pos = self gettagorigin( "tag_flash" ) - self getplayerviewheight();
            view_angles = self gettagangles( "tag_flash" );
            playfx( level._effect["freezegun_smoke_cloud"], view_pos, anglestoforward( view_angles ), anglestoup( view_angles ) );
        }
    }
}

freezegun_fired( upgraded )
{
    if ( !isdefined( level.freezegun_enemies ) )
    {
        level.freezegun_enemies = [];
        level.freezegun_enemies_dist_ratio = [];
    }

    self freezegun_get_enemies_in_range( upgraded );

    for ( i = 0; i < level.freezegun_enemies.size; i++ )
        level.freezegun_enemies[i] thread freezegun_do_damage( upgraded, self, level.freezegun_enemies_dist_ratio[i] );

    level.freezegun_enemies = [];
    level.freezegun_enemies_dist_ratio = [];
}

freezegun_get_cylinder_radius( upgraded )
{
    if ( upgraded )
        return level.zombie_vars["freezegun_cylinder_radius_upgraded"];
    else
        return level.zombie_vars["freezegun_cylinder_radius"];
}

freezegun_get_inner_range( upgraded )
{
    if ( upgraded )
        return level.zombie_vars["freezegun_inner_range_upgraded"];
    else
        return level.zombie_vars["freezegun_inner_range"];
}

freezegun_get_outer_range( upgraded )
{
    if ( upgraded )
        return level.zombie_vars["freezegun_outer_range_upgraded"];
    else
        return level.zombie_vars["freezegun_outer_range"];
}

freezegun_get_inner_damage( upgraded )
{
    if ( upgraded )
        return level.zombie_vars["freezegun_inner_damage_upgraded"];
    else
        return level.zombie_vars["freezegun_inner_damage"];
}

freezegun_get_outer_damage( upgraded )
{
    if ( upgraded )
        return level.zombie_vars["freezegun_outer_damage_upgraded"];
    else
        return level.zombie_vars["freezegun_outer_damage"];
}

freezegun_get_shatter_range( upgraded )
{
    if ( upgraded )
        return level.zombie_vars["freezegun_shatter_range_upgraded"];
    else
        return level.zombie_vars["freezegun_shatter_range"];
}

freezegun_get_shatter_inner_damage( upgraded )
{
    if ( upgraded )
        return level.zombie_vars["freezegun_shatter_inner_damage_upgraded"];
    else
        return level.zombie_vars["freezegun_shatter_inner_damage"];
}

freezegun_get_shatter_outer_damage( upgraded )
{
    if ( upgraded )
        return level.zombie_vars["freezegun_shatter_outer_damage_upgraded"];
    else
        return level.zombie_vars["freezegun_shatter_outer_damage"];
}

freezegun_get_enemies_in_range( upgraded )
{
    inner_range = freezegun_get_inner_range( upgraded );
    outer_range = freezegun_get_outer_range( upgraded );
    cylinder_radius = freezegun_get_cylinder_radius( upgraded );
    view_pos = self getweaponmuzzlepoint();
    zombies = get_array_of_closest( view_pos, get_round_enemy_array(), undefined, undefined, outer_range * 1.1 );

    if ( !isdefined( zombies ) )
        return;

    freezegun_inner_range_squared = inner_range * inner_range;
    freezegun_outer_range_squared = outer_range * outer_range;
    cylinder_radius_squared = cylinder_radius * cylinder_radius;
    forward_view_angles = self getweaponforwarddir();
    end_pos = view_pos + vectorscale( forward_view_angles, outer_range );
/#
    if ( 2 == getdvarint( #"_id_AD7AE67D" ) )
    {
        near_circle_pos = view_pos + vectorscale( forward_view_angles, 2 );
        circle( near_circle_pos, cylinder_radius, ( 1, 0, 0 ), 0, 0, 100 );
        line( near_circle_pos, end_pos, ( 0, 0, 1 ), 1, 0, 100 );
        circle( end_pos, cylinder_radius, ( 1, 0, 0 ), 0, 0, 100 );
    }
#/

    for ( i = 0; i < zombies.size; i++ )
    {
        if ( !isdefined( zombies[i] ) || !isalive( zombies[i] ) )
            continue;

        test_origin = zombies[i] getcentroid();
        test_range_squared = distancesquared( view_pos, test_origin );

        if ( test_range_squared > freezegun_outer_range_squared )
        {
            zombies[i] freezegun_debug_print( "range", ( 1, 0, 0 ) );
            return;
        }

        normal = vectornormalize( test_origin - view_pos );
        dot = vectordot( forward_view_angles, normal );

        if ( 0 > dot )
        {
            zombies[i] freezegun_debug_print( "dot", ( 1, 0, 0 ) );
            continue;
        }

        radial_origin = pointonsegmentnearesttopoint( view_pos, end_pos, test_origin );

        if ( distancesquared( test_origin, radial_origin ) > cylinder_radius_squared )
        {
            zombies[i] freezegun_debug_print( "cylinder", ( 1, 0, 0 ) );
            continue;
        }

        if ( 0 == zombies[i] damageconetrace( view_pos, self ) )
        {
            zombies[i] freezegun_debug_print( "cone", ( 1, 0, 0 ) );
            continue;
        }

        level.freezegun_enemies[level.freezegun_enemies.size] = zombies[i];
        level.freezegun_enemies_dist_ratio[level.freezegun_enemies_dist_ratio.size] = ( freezegun_outer_range_squared - test_range_squared ) / ( freezegun_outer_range_squared - freezegun_inner_range_squared );
    }
}

freezegun_debug_print( msg, color )
{
/#
    if ( !getdvarint( #"_id_AD7AE67D" ) )
        return;

    if ( !isdefined( color ) )
        color = ( 1, 1, 1 );

    print3d( self.origin + vectorscale( ( 0, 0, 1 ), 60.0 ), msg, color, 1, 1, 40 );
#/
}

freezegun_do_damage( upgraded, player, dist_ratio )
{
    damage = int( lerpfloat( freezegun_get_outer_damage( upgraded ), freezegun_get_inner_damage( upgraded ), dist_ratio ) );
    self dodamage( damage, player.origin, player, player, "projectile" );
    self freezegun_debug_print( damage, ( 0, 1, 0 ) );
}

freezegun_set_extremity_damage_fx()
{
    self setclientfield( "freezegun_extremity_damage_fx", 1 );
}

freezegun_clear_extremity_damage_fx()
{
    self setclientfield( "freezegun_extremity_damage_fx", 0 );
}

freezegun_set_torso_damage_fx()
{
    self setclientfield( "freezegun_torso_damage_fx", 1 );
}

freezegun_clear_torso_damage_fx()
{
    self setclientfield( "freezegun_torso_damage_fx", 0 );
}

freezegun_damage_response( player, amount )
{
    if ( isdefined( self.freezegun_damage_response_func ) )
    {
        if ( self [[ self.freezegun_damage_response_func ]]( player, amount ) )
            return;
    }

    self.freezegun_damage = self.freezegun_damage + amount;
    new_move_speed = self.zombie_move_speed;
    percent_dmg = self enemy_percent_damaged_by_freezegun();

    if ( 0.66 <= percent_dmg )
        new_move_speed = "walk";
    else if ( 0.33 <= percent_dmg )
    {
        if ( "sprint" == self.zombie_move_speed )
            new_move_speed = "run";
        else
            new_move_speed = "walk";
    }

    if ( !self.isdog && self.zombie_move_speed != new_move_speed )
        self set_zombie_run_cycle( new_move_speed );

    self thread freezegun_set_extremity_damage_fx();
}

freezegun_do_gib( gib_type, upgraded )
{
    gibarray = [];
    gibarray[gibarray.size] = level._zombie_gib_piece_index_all;

    if ( upgraded )
        gibarray[gibarray.size] = 7;

    self gib( gib_type, gibarray );
    self hide();
    wait 0.1;
    self self_delete();
}

freezegun_do_shatter( player, weap, shatter_trigger, crumple_trigger )
{
    freezegun_debug_print( "shattered" );
    self freezegun_cleanup_freezegun_triggers( shatter_trigger, crumple_trigger );
    upgraded = weap == "freezegun_upgraded_zm";
    self radiusdamage( self.origin, freezegun_get_shatter_range( upgraded ), freezegun_get_shatter_inner_damage( upgraded ), freezegun_get_shatter_outer_damage( upgraded ), player, "MOD_EXPLOSIVE", weap );

    if ( is_mature() )
        self thread freezegun_do_gib( "up", upgraded );
    else
    {
        self startragdoll();
        self freezegun_clear_extremity_damage_fx();
        self freezegun_clear_torso_damage_fx();
    }
}

freezegun_wait_for_shatter( player, weap, shatter_trigger, crumple_trigger )
{
    shatter_trigger endon( "cleanup_freezegun_triggers" );
    orig_attacker = self.attacker;
    shatter_trigger waittill( "damage", amount, attacker, dir, org, mod );

    if ( isdefined( attacker ) && attacker == orig_attacker && "MOD_PROJECTILE" == mod && ( "freezegun_zm" == attacker getcurrentweapon() || "freezegun_upgraded_zm" == attacker getcurrentweapon() ) )
        self thread freezegun_do_crumple( weap, shatter_trigger, crumple_trigger );
    else
        self thread freezegun_do_shatter( player, weap, shatter_trigger, crumple_trigger );
}

freezegun_do_crumple( weap, shatter_trigger, crumple_trigger )
{
    freezegun_debug_print( "crumpled" );
    self freezegun_cleanup_freezegun_triggers( shatter_trigger, crumple_trigger );
    upgraded = weap == "freezegun_upgraded_zm";

    if ( isdefined( self ) )
    {
        if ( is_mature() )
            self thread freezegun_do_gib( "freeze", upgraded );
        else
        {
            self startragdoll();
            self freezegun_clear_extremity_damage_fx();
            self freezegun_clear_torso_damage_fx();
        }
    }
}

freezegun_wait_for_crumple( weap, shatter_trigger, crumple_trigger )
{
    crumple_trigger endon( "cleanup_freezegun_triggers" );
    crumple_trigger waittill( "trigger" );
    self thread freezegun_do_crumple( weap, shatter_trigger, crumple_trigger );
}

freezegun_cleanup_freezegun_triggers( shatter_trigger, crumple_trigger )
{
    self notify( "cleanup_freezegun_triggers" );
    shatter_trigger notify( "cleanup_freezegun_triggers" );
    crumple_trigger notify( "cleanup_freezegun_triggers" );
    shatter_trigger self_delete();
    crumple_trigger self_delete();
}

freezegun_run_skipped_death_events()
{
    self thread maps\mp\zombies\_zm_audio::do_zombies_playvocals( "death", self.animname );
    self thread maps\mp\zombies\_zm_spawner::zombie_eye_glow_stop();
}

freezegun_death( hit_location, hit_origin, player )
{
    if ( self.isdog )
    {
        self freezegun_run_skipped_death_events();
        return;
    }

    if ( !self.has_legs )
    {
        if ( !isdefined( level._zombie_freezegun_death_missing_legs[self.animname] ) )
        {
            self freezegun_run_skipped_death_events();
            return;
        }

        self.deathanim = random( level._zombie_freezegun_death_missing_legs[self.animname] );
    }
    else
    {
        if ( !isdefined( level._zombie_freezegun_death[self.animname] ) )
        {
            self freezegun_run_skipped_death_events();
            return;
        }

        self.deathanim = random( level._zombie_freezegun_death[self.animname] );
    }

    self.freezegun_death = 1;
    self.skip_death_notetracks = 1;
    self.nodeathragdoll = 1;
    self playsound( "wpn_freezegun_impact_zombie" );

    if ( isplayer( player ) )
    {
        if ( randomintrange( 0, 101 ) >= 88 )
            player maps\mp\zombies\_zm_audio::create_and_play_dialog( "kill", "freeze" );
    }

    anim_len = getanimlength( self.deathanim );
    self thread freezegun_set_extremity_damage_fx();
    self thread freezegun_set_torso_damage_fx();
    shatter_trigger = spawn( "trigger_damage", self.origin, 0, 15, 72 );
    shatter_trigger enablelinkto();
    shatter_trigger linkto( self );
    spawnflags = 87;
    crumple_trigger = spawn( "trigger_radius", self.origin, spawnflags, 15, 72 );
    crumple_trigger enablelinkto();
    crumple_trigger linkto( self );
    weap = self.damageweapon;
    self thread freezegun_wait_for_shatter( player, weap, shatter_trigger, crumple_trigger );
    self thread freezegun_wait_for_crumple( weap, shatter_trigger, crumple_trigger );
    self endon( "cleanup_freezegun_triggers" );
    wait( anim_len );
    self thread freezegun_do_crumple( weap, shatter_trigger, crumple_trigger );
}

is_freezegun_damage( mod )
{
    if ( is_true( self.water_damage ) )
        return true;

    return isdefined( mod ) && ( "MOD_EXPLOSIVE" == mod || "MOD_PROJECTILE" == mod ) && isdefined( self.damageweapon ) && ( self.damageweapon == "freezegun_zm" || self.damageweapon == "freezegun_upgraded_zm" );
}

is_freezegun_shatter_damage( mod )
{
    return "MOD_EXPLOSIVE" == mod && isdefined( self.damageweapon ) && ( self.damageweapon == "freezegun_zm" || self.damageweapon == "freezegun_upgraded_zm" );
}

should_do_freezegun_death( mod )
{
    return is_freezegun_damage( mod );
}

enemy_damaged_by_freezegun()
{
    return 0 < self.freezegun_damage;
}

enemy_percent_damaged_by_freezegun()
{
    return self.freezegun_damage / self.maxhealth;
}

enemy_killed_by_freezegun()
{
    return isdefined( self.freezegun_death ) && self.freezegun_death == 1;
}
