// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_music;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\zm_pentagon_fx;
#include clientscripts\mp\zm_pentagon_teleporter;
#include clientscripts\mp\zm_pentagon_amb;
#include clientscripts\mp\_ambient;
#include clientscripts\mp\zombies\_zm;
#include clientscripts\mp\zombies\_zm_weap_cymbal_monkey;
#include clientscripts\mp\zombies\_zm_weap_freezegun;

main()
{
    level.default_game_mode = "zclassic";
    level._uses_crossbow = 1;
    level._power_on = 0;
    level.zombiemode_using_revive_perk = 1;
    level.zombiemode_using_juggernaut_perk = 1;
    level.zombiemode_using_doubletap_perk = 1;
    level.zombiemode_using_sleightofhand_perk = 1;
    level.zombiemode_using_pack_a_punch = 1;
    start_zombie_stuff();
    clientscripts\mp\zm_pentagon_fx::main();

    if ( !is_true( level.createfx_enabled ) )
        init_level_specific_wall_buy_fx();

    clientscripts\mp\zm_pentagon_teleporter::main();
    thread clientscripts\mp\zm_pentagon_amb::main();
    level init_pentagon_box_screens();
    thread waitforclient( 0 );
    register_zombie_types();
    pentagon_client_flags();
    level thread pentagon_zpo_listener();
    level thread pentagon_tlo_listener();
    level thread set_visionset_office();
    level thread set_visionset_warroom();
    level thread set_visionset_lab();
    level thread set_visionset_tech();
    level thread pentagon_office_light_model_swap_init();
    onplayerconnect_callback( clientscripts\mp\_ambient::clocks_init );
}

register_zombie_types()
{

}

include_weapons()
{
    include_weapon( "frag_grenade_zm", 0 );
    include_weapon( "claymore_zm", 0 );
    include_weapon( "m1911_zm", 0 );
    include_weapon( "m1911_upgraded_zm", 0 );
    include_weapon( "python_zm" );
    include_weapon( "python_upgraded_zm", 0 );
    include_weapon( "fiveseven_zm" );
    include_weapon( "fiveseven_upgraded_zm", 0 );
    include_weapon( "m14_zm", 0 );
    include_weapon( "m14_upgraded_zm", 0 );
    include_weapon( "m16_zm", 0 );
    include_weapon( "m16_gl_upgraded_zm", 0 );
    include_weapon( "xm8_zm" );
    include_weapon( "xm8_upgraded_zm", 0 );
    include_weapon( "type95_zm" );
    include_weapon( "type95_upgraded_zm", 0 );
    include_weapon( "ak74u_zm", 0 );
    include_weapon( "ak74u_upgraded_zm", 0 );
    include_weapon( "mp5k_zm", 0 );
    include_weapon( "mp5k_upgraded_zm", 0 );
    include_weapon( "mp40_zm", 0 );
    include_weapon( "mp40_upgraded_zm", 0 );
    include_weapon( "beretta93r_zm", 0 );
    include_weapon( "mpl_upgraded_zm", 0 );
    include_weapon( "pdw57_zm", 0 );
    include_weapon( "pdw57_upgraded_zm", 0 );
    include_weapon( "kard_zm" );
    include_weapon( "kard_upgraded_zm", 0 );
    include_weapon( "fivesevendw_zm" );
    include_weapon( "fivesevendw_upgraded_zm", 0 );
    include_weapon( "870mcs_zm", 0 );
    include_weapon( "870mcs_upgraded_zm", 0 );
    include_weapon( "rottweil72_zm", 0 );
    include_weapon( "rottweil72_upgraded_zm", 0 );
    include_weapon( "srm1216_zm" );
    include_weapon( "srm1216_upgraded_zm", 0 );
    include_weapon( "saiga12_zm" );
    include_weapon( "saiga12_upgraded_zm", 0 );
    include_weapon( "tar21_zm" );
    include_weapon( "tar21_upgraded_zm", 0 );
    include_weapon( "galil_zm" );
    include_weapon( "galil_upgraded_zm", 0 );
    include_weapon( "hk416_zm" );
    include_weapon( "hk416_upgraded_zm", 0 );
    include_weapon( "sa58_zm" );
    include_weapon( "sa58_upgraded_zm", 0 );
    include_weapon( "barretm82_zm" );
    include_weapon( "barretm82_upgraded_zm", 0 );
    include_weapon( "dsr50_zm" );
    include_weapon( "dsr50_upgraded_zm", 0 );
    include_weapon( "rpd_zm" );
    include_weapon( "rpd_upgraded_zm", 0 );
    include_weapon( "hamr_zm" );
    include_weapon( "hamr_upgraded_zm", 0 );
    include_weapon( "usrpg_zm" );
    include_weapon( "usrpg_upgraded_zm", 0 );
    include_weapon( "m32_zm" );
    include_weapon( "m32_upgraded_zm", 0 );
    include_weapon( "cymbal_monkey_zm" );
    include_weapon( "ray_gun_zm" );
    include_weapon( "ray_gun_upgraded_zm", 0 );
    include_weapon( "freezegun_zm" );
    include_weapon( "freezegun_upgraded_zm", 0 );
    include_weapon( "knife_ballistic_zm", 1 );
    include_weapon( "knife_ballistic_upgraded_zm", 0 );
    include_weapon( "knife_ballistic_bowie_zm", 0 );
    include_weapon( "knife_ballistic_bowie_upgraded_zm", 0 );
    include_weapon( "minigun_zm" );
}

set_visionset_office()
{
    while ( true )
    {
        level waittill( "vis1", clientnum );

        if ( level._power_on == 1 )
            visionsetnaked( clientnum, "zombie_pentagon_offices_poweroff", 0.0 );
        else
            visionsetnaked( clientnum, "zombie_pentagon", 0.0 );
    }
}

set_visionset_warroom()
{
    while ( true )
    {
        level waittill( "vis2", clientnum );
        visionsetnaked( clientnum, "zombie_pentagon_warroom", 2.0 );
    }
}

set_visionset_lab()
{
    while ( true )
    {
        level waittill( "vis3", clientnum );
        visionsetnaked( clientnum, "zombie_pentagon_lab", 2.0 );
    }
}

set_visionset_tech()
{
    while ( true )
    {
        level waittill( "vis4", clientnum );
        visionsetnaked( clientnum, "zombie_pentagon_electrician", 1.0 );
    }
}

init_pentagon_box_screens()
{
    level._pentagon_fire_sale = array( "p_zom_monitor_screen_fsale1", "p_zom_monitor_screen_fsale2" );
    level.magic_box_tv_off = array( "p_zom_monitor_screen_off" );
    level.magic_box_tv_on = array( "p_zom_monitor_screen_on" );
    level.magic_box_tv_lobby_1 = array( "p_zom_monitor_screen_lobby0", "p_zom_monitor_screen_lobby1" );
    level.magic_box_tv_lobby_2 = array( "p_zom_monitor_screen_lobby0", "p_zom_monitor_screen_lobby2" );
    level.magic_box_tv_warroom_1 = array( "p_zom_monitor_screen_warroom0", "p_zom_monitor_screen_warroom1" );
    level.magic_box_tv_labs_1 = array( "p_zom_monitor_screen_labs0", "p_zom_monitor_screen_labs1" );
    level.magic_box_tv_labs_2 = array( "p_zom_monitor_screen_labs0", "p_zom_monitor_screen_labs2" );
    level.magic_box_tv_labs_3 = array( "p_zom_monitor_screen_labs0", "p_zom_monitor_screen_labs3" );
    level.magic_box_tv_random = array( "p_zom_monitor_screen_logo" );
    level._box_locations = array( level.magic_box_tv_lobby_1, level.magic_box_tv_lobby_2, level.magic_box_tv_warroom_1, level.magic_box_tv_labs_1, level.magic_box_tv_labs_2, level.magic_box_tv_labs_3 );
    level._custom_box_monitor = ::pentagon_screen_switch;
}

pentagon_zpo_listener()
{
    while ( true )
    {
        level waittill( "ZPO" );
        level._power_on = 1;
        level notify( "TLO" );
    }
}

pentagon_tlo_listener()
{
    while ( true )
    {
        level waittill( "TLO" );
        level notify( "por0" );
        level notify( "por1" );
        level notify( "por2" );
        level notify( "por3" );
        level notify( "por4" );
        level waittill( "TLF" );
        level notify( "por0" );
        level notify( "por1" );
        level notify( "por2" );
        level notify( "por3" );
        level notify( "por4" );
    }
}

pentagon_tv_init( client_num )
{
    if ( !isdefined( level.pentagon_tvs ) )
        level.pentagon_tvs = [];

    if ( isdefined( level.pentagon_tvs[client_num] ) )
        return;

    level.pentagon_tvs[client_num] = getentarray( client_num, "model_pentagon_box_screens", "targetname" );

    for ( i = 0; i < level.pentagon_tvs[client_num].size; i++ )
    {
        tele = level.pentagon_tvs[client_num][i];
        tele setmodel( level.magic_box_tv_off[0] );
        wait 0.1;
    }
}

pentagon_screen_switch( client_num, state, oldstate )
{
    pentagon_tv_init( client_num );

    if ( state == "n" )
    {
        if ( level._power_on == 0 )
            screen_to_display = level.magic_box_tv_off;
        else
            screen_to_display = level.magic_box_tv_on;
    }
    else if ( state == "f" )
        screen_to_display = level._pentagon_fire_sale;
    else
    {
        array_number = int( state );
        screen_to_display = level._box_locations[array_number];
    }

    stop_notify = "stop_tv_swap";

    for ( i = 0; i < level.pentagon_tvs[client_num].size; i++ )
    {
        tele = level.pentagon_tvs[client_num][i];
        tele notify( stop_notify );
        wait 0.2;
        tele thread magic_box_screen_swap( screen_to_display, "stop_tv_swap" );
        tele thread play_magic_box_tv_audio( state );
    }
}

magic_box_screen_swap( model_array, endon_notify )
{
    self endon( endon_notify );

    while ( true )
    {
        for ( i = 0; i < model_array.size; i++ )
        {
            self setmodel( model_array[i] );
            wait 3.0;
        }

        if ( 6 > randomint( 100 ) && isdefined( level.magic_box_tv_random ) )
        {
            self setmodel( level.magic_box_tv_random[randomint( level.magic_box_tv_random.size )] );
            wait 2.0;
        }

        wait 1.0;
    }
}

pentagon_office_light_model_swap_init()
{
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
    {
        office_light_models = getentarray( i, "model_interior_office_lights", "targetname" );

        if ( isdefined( office_light_models ) && office_light_models.size > 0 )
            array_thread( office_light_models, ::pentagon_office_light_model_swap );
    }
}

pentagon_office_light_model_swap()
{
    level waittill( "ZPO" );

    if ( self.model == "p_pent_light_ceiling_on" )
        self setmodel( "p_pent_light_ceiling" );
    else if ( self.model == "p_pent_light_tinhat_on" )
        self setmodel( "p_pent_light_tinhat_off" );
}

play_magic_box_tv_audio( state )
{
    alias = "amb_tv_static";

    if ( state == "n" )
    {
        if ( level._power_on == 0 )
            alias = undefined;
        else
            alias = "amb_tv_static";
    }
    else if ( state == "f" )
        alias = "mus_fire_sale";
    else
        alias = "amb_tv_static";

    if ( !isdefined( alias ) )
        self stoploopsound( 0.5 );
    else
        self playloopsound( alias, 0.5 );
}

pentagon_client_flags()
{
    level.zombie_pentagon_player_portalfx = 5;
    level.zombie_pentagon_player_portalfx_cool = 6;
    level.zombie_pentagon_player_cf_updateprofile = 0;
    registerclientfield( "allplayers", "clientfield_pentagon_player_portalfx", 7000, 1, "int", clientscripts\mp\zm_pentagon_teleporter::teleporter_fx_init, 0 );
    registerclientfield( "world", "clientfield_pentagon_pig_play", 7000, 1, "int", ::lab_pig_startup, 0 );
    registerclientfield( "world", "clientfield_pentagon_pig_death", 7000, 1, "int", ::lab_pig_death, 0 );
}

update_player_profile( localclientnum, set, newent )
{

}

include_powerups()
{
    include_powerup( "nuke" );
    include_powerup( "insta_kill" );
    include_powerup( "double_points" );
    include_powerup( "full_ammo" );
    include_powerup( "carpenter" );
    include_powerup( "fire_sale" );
    include_powerup( "bonfire_sale" );
    include_powerup( "tesla" );
    include_powerup( "minigun" );
}

start_zombie_stuff()
{
    if ( !is_true( getdvar( #"createfx" ) != "" ) )
        include_weapons();

    include_powerups();
    clientscripts\mp\zombies\_zm::init();
    clientscripts\mp\zombies\_zm_weap_cymbal_monkey::init();
    clientscripts\mp\zombies\_zm_weap_freezegun::init();
}

#using_animtree("critter");

lab_pig_startup( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    scriptmodelsuseanimtree( #animtree );
    hoist_piggy = getent( localclientnum, "hoist_pig", "targetname" );
    hoist_piggy.animname = "pig";
    hoist_piggy useanimtree( #animtree );
    hoist_piggy setanim( %a_rebirth_pig_hoist_squirm, 1.0, 0, 1.0 );
    hoist_piggy thread pig_audio( localclientnum );
}

lab_pig_death( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    hoist_piggy = getent( localclientnum, "hoist_pig", "targetname" );
    hoist_piggy.animname = "pig";
    hoist_piggy useanimtree( #animtree );
    hoist_piggy notify( "stop_squirming" );
    hoist_piggy playsound( localclientnum, "amb_pig_death", hoist_piggy.origin );
    hoist_piggy setanim( %a_rebirth_pig_hoist_death, 1.0, 0, 1.0 );
    anim_length = getanimlength( %a_rebirth_pig_hoist_death );
    wait( anim_length );
    hoist_piggy setanim( %a_rebirth_pig_hoist_deathpose, 1.0, 0, 1.0 );
}

pig_audio( localclientnum )
{
    self endon( "stop_squirming" );

    while ( true )
    {
        self playsound( localclientnum, "amb_pig", self.origin );
        wait( randomfloatrange( 1.5, 2.75 ) );
    }
}

init_level_specific_wall_buy_fx()
{
    level._effect["pdw57_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_pdw57" );
    level._effect["frag_grenade_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_frag_nade" );
}
