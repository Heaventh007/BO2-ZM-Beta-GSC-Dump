// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_music;
#include clientscripts\mp\zm_factory_teleporter;

main()
{
    level thread setup_teleport_aftereffects();
    level thread wait_for_black_box();
    level thread wait_for_teleport_aftereffect();
}

setup_teleport_aftereffects()
{
    waitforclient( 0 );
    level.teleport_ae_funcs = [];

    if ( getlocalplayers().size == 1 )
        level.teleport_ae_funcs[level.teleport_ae_funcs.size] = clientscripts\mp\zm_factory_teleporter::teleport_aftereffect_fov;

    level.teleport_ae_funcs[level.teleport_ae_funcs.size] = clientscripts\mp\zm_factory_teleporter::teleport_aftereffect_shellshock;
    level.teleport_ae_funcs[level.teleport_ae_funcs.size] = clientscripts\mp\zm_factory_teleporter::teleport_aftereffect_shellshock_electric;
    level.teleport_ae_funcs[level.teleport_ae_funcs.size] = clientscripts\mp\zm_factory_teleporter::teleport_aftereffect_bw_vision;
    level.teleport_ae_funcs[level.teleport_ae_funcs.size] = clientscripts\mp\zm_factory_teleporter::teleport_aftereffect_red_vision;
    level.teleport_ae_funcs[level.teleport_ae_funcs.size] = clientscripts\mp\zm_factory_teleporter::teleport_aftereffect_flashy_vision;
    level.teleport_ae_funcs[level.teleport_ae_funcs.size] = clientscripts\mp\zm_factory_teleporter::teleport_aftereffect_flare_vision;
}

wait_for_black_box()
{
    secondclientnum = -1;

    while ( true )
    {
        level waittill( "black_box_start", localclientnum );
        assert( isdefined( localclientnum ) );
        savedvis = getvisionsetnaked( localclientnum );
        visionsetnaked( localclientnum, "default", 0 );

        while ( secondclientnum != localclientnum )
            level waittill( "black_box_end", secondclientnum );

        visionsetnaked( localclientnum, savedvis, 0 );
    }
}

wait_for_teleport_aftereffect()
{
    while ( true )
    {
        level waittill( "tae", localclientnum );

        if ( getdvar( #"_id_A0FE0B5C" ) == "-1" )
            self thread [[ level.teleport_ae_funcs[randomint( level.teleport_ae_funcs.size )] ]]( localclientnum );
        else
            self thread [[ level.teleport_ae_funcs[int( getdvar( #"_id_A0FE0B5C" ) )] ]]( localclientnum );
    }
}

teleport_aftereffect_shellshock( localclientnum )
{
    wait 0.05;
}

teleport_aftereffect_shellshock_electric( localclientnum )
{
    wait 0.05;
}

teleport_aftereffect_fov( localclientnum )
{
    println( "***FOV Aftereffect***\\n" );
    start_fov = 30;
    end_fov = getdvarfloat( #"cg_fov_default" );
    duration = 0.5;

    for ( i = 0; i < duration; i = i + 0.017 )
    {
        fov = start_fov + ( end_fov - start_fov ) * ( i / duration );
        setclientdvar( "cg_fov", fov );
        waitrealtime( 0.017 );
    }
}

teleport_aftereffect_bw_vision( localclientnum )
{
    println( "***B&W Aftereffect***\\n" );
    savedvis = getvisionsetnaked( localclientnum );
    visionsetnaked( localclientnum, "cheat_bw_invert_contrast", 0.4 );
    wait 1.25;
    visionsetnaked( localclientnum, savedvis, 1 );
}

teleport_aftereffect_red_vision( localclientnum )
{
    println( "***Red Aftereffect***\\n" );
    savedvis = getvisionsetnaked( localclientnum );
    visionsetnaked( localclientnum, "zombie_turned", 0.4 );
    wait 1.25;
    visionsetnaked( localclientnum, savedvis, 1 );
}

teleport_aftereffect_flashy_vision( localclientnum )
{
    println( "***Flashy Aftereffect***\\n" );
    savedvis = getvisionsetnaked( localclientnum );
    visionsetnaked( localclientnum, "cheat_bw_invert_contrast", 0.1 );
    wait 0.4;
    visionsetnaked( localclientnum, "cheat_bw_contrast", 0.1 );
    wait 0.4;
    wait 0.4;
    wait 0.4;
    visionsetnaked( localclientnum, savedvis, 5 );
}

teleport_aftereffect_flare_vision( localclientnum )
{
    println( "***Flare Aftereffect***\\n" );
    savedvis = getvisionsetnaked( localclientnum );
    visionsetnaked( localclientnum, "flare", 0.4 );
    wait 1.25;
    visionsetnaked( localclientnum, savedvis, 1 );
}
