// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zm_factory_teleporter;
#include maps\mp\zm_factory_fx;
#include maps\mp\zombies\_zm;
#include maps\mp\animscripts\zm_death;
#include maps\mp\_sticky_grenade;
#include maps\mp\zombies\_load;
#include maps\mp\gametypes_zm\_spawning;
#include maps\mp\zombies\_zm_ai_dogs;
#include maps\mp\zombies\_zm_weap_tesla;
#include maps\mp\zombies\_zm_weap_bowie;
#include maps\mp\zombies\_zm_weap_cymbal_monkey;
#include maps\mp\zombies\_zm_weap_claymore;
#include maps\mp\zombies\_zm_weap_ballistic_knife;
#include maps\mp\zombies\_zm_zonemgr;
#include character\c_usa_dempsey_zm;
#include character\c_rus_nikolai_zm;
#include character\c_jap_takeo_zm;
#include character\c_ger_richtofen_zm;
#include maps\mp\zombies\_zm_game_module;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_score;
#include maps\mp\zombies\_zm_laststand;
#include maps\mp\zombies\_zm_net;
#include maps\mp\zombies\_zm_ai_basic;

main()
{
    maps\mp\zm_factory_fx::main();
    maps\mp\zombies\_zm::init_fx();
    maps\mp\animscripts\zm_death::precache_gib_fx();
    level.zombiemode = 1;
    level thread maps\mp\_sticky_grenade::init();
    maps\mp\zombies\_load::main();
    precachemodel( "viewmodel_usa_pow_arms" );
    precachemodel( "viewmodel_rus_prisoner_arms" );
    precachemodel( "viewmodel_vtn_nva_standard_arms" );
    precachemodel( "viewmodel_usa_hazmat_arms" );
    level.pulls_since_last_ray_gun = 0;
    level.pulls_since_last_tesla_gun = 0;
    level.player_drops_tesla_gun = 0;
    level._allow_melee_weapon_switching = 1;
    level.mixed_rounds_enabled = 1;
    level.burning_zombies = [];
    level.zombie_rise_spawners = [];
    level.max_barrier_search_dist_override = 400;
    level.door_dialog_function = maps\mp\zombies\_zm::play_door_dialog;
    script_anims_init();
    maps\mp\gametypes_zm\_spawning::level_use_unified_spawning( 1 );
    level.givecustomloadout = ::givecustomloadout;
    level.precachecustomcharacters = ::precachecustomcharacters;
    level.givecustomcharacters = ::givecustomcharacters;
    initcharacterstartindex();
    level._round_start_func = maps\mp\zombies\_zm::round_start;
    setdvar( "perk_altMeleeDamage", 1000 );
    precachestring( &"ZOMBIE_NEED_POWER" );
    precachestring( &"ZOMBIE_ELECTRIC_SWITCH" );
    precachestring( &"ZOMBIE_POWER_UP_TPAD" );
    precachestring( &"ZOMBIE_TELEPORT_TO_CORE" );
    precachestring( &"ZOMBIE_LINK_TPAD" );
    precachestring( &"ZOMBIE_LINK_ACTIVE" );
    precachestring( &"ZOMBIE_INACTIVE_TPAD" );
    precachestring( &"ZOMBIE_START_TPAD" );
    precacheshellshock( "electrocution" );
    precachemodel( "zombie_zapper_cagelight_red" );
    precachemodel( "zombie_zapper_cagelight_green" );
    precachemodel( "lights_indlight_on" );
    precachemodel( "lights_milit_lamp_single_int_on" );
    precachemodel( "lights_tinhatlamp_on" );
    precachemodel( "lights_berlin_subway_hat_0" );
    precachemodel( "lights_berlin_subway_hat_50" );
    precachemodel( "lights_berlin_subway_hat_100" );
    precachemodel( "p6_power_lever" );
    precachestring( &"ZOMBIE_BETTY_ALREADY_PURCHASED" );
    precachestring( &"ZOMBIE_BETTY_HOWTO" );
    level.zombiemode_using_pack_a_punch = 1;
    level.pap_interaction_height = 47;
    level.zombiemode_using_doubletap_perk = 1;
    level.zombiemode_using_juggernaut_perk = 1;
    level.zombiemode_using_revive_perk = 1;
    level.zombiemode_using_sleightofhand_perk = 1;
    level._zombie_custom_add_weapons = ::custom_add_weapons;
    include_weapons();
    include_powerups();
    init_level_specific_wall_buy_fx();
    level._effect["zombie_grain"] = loadfx( "misc/fx_zombie_grain_cloud" );
    level.zombiemode_player_set_viewmodel_override = ::player_set_viewmodel_override;
    level.register_offhand_weapons_for_level_defaults_override = ::register_offhand_weapons_for_level_defaults_override;
    level.dogs_enabled = 1;
    level.dog_spawn_func = maps\mp\zombies\_zm_ai_dogs::dog_spawn_factory_logic;
    level.custom_ai_type = [];
    level.custom_ai_type[level.custom_ai_type.size] = maps\mp\zombies\_zm_ai_dogs::init;
    level.use_zombie_heroes = 1;
    maps\mp\zombies\_zm::init();
    maps\mp\zombies\_zm_weap_tesla::init();
    maps\mp\zombies\_zm_weap_bowie::init();
    maps\mp\zombies\_zm_weap_cymbal_monkey::init();
    maps\mp\zombies\_zm_weap_claymore::init();
    maps\mp\zombies\_zm_weap_ballistic_knife::init();
    maps\mp\zombies\_zm_ai_dogs::enable_dog_rounds();
    level thread maps\mp\zombies\_zm::post_main();
    init_sounds();
    init_achievement();
    level thread power_electric_switch();
    thread init_elec_trap_trigs();
    level.zones = [];
    level.zone_manager_init_func = ::factory_zone_init;
    init_zones[0] = "receiver_zone";
    level thread maps\mp\zombies\_zm_zonemgr::manage_zones( init_zones );
    level.zombie_ai_limit = 24;
    teleporter_init();
    level thread intro_screen();
    level thread jump_from_bridge();
    level lock_additional_player_spawner();
    level thread bridge_init();
    level thread phono_egg_init( "phono_one", "phono_one_origin" );
    level thread phono_egg_init( "phono_two", "phono_two_origin" );
    level thread phono_egg_init( "phono_three", "phono_three_origin" );
    level.meteor_counter = 0;
    level thread meteor_egg( "meteor_one" );
    level thread meteor_egg( "meteor_two" );
    level thread meteor_egg( "meteor_three" );
    level thread radio_egg_init( "radio_one", "radio_one_origin" );
    level thread radio_egg_init( "radio_two", "radio_two_origin" );
    level thread radio_egg_init( "radio_three", "radio_three_origin" );
    level thread radio_egg_init( "radio_four", "radio_four_origin" );
    level thread radio_egg_init( "radio_five", "radio_five_origin" );
    level.monk_scream_trig = getent( "monk_scream_trig", "targetname" );
    level thread play_giant_mythos_lines();
    level thread play_level_easteregg_vox( "vox_corkboard_1" );
    level thread play_level_easteregg_vox( "vox_corkboard_2" );
    level thread play_level_easteregg_vox( "vox_corkboard_3" );
    level thread play_level_easteregg_vox( "vox_teddy" );
    level thread play_level_easteregg_vox( "vox_fieldop" );
    level thread play_level_easteregg_vox( "vox_telemap" );
    level thread play_level_easteregg_vox( "vox_maxis" );
    level thread play_level_easteregg_vox( "vox_illumi_1" );
    level thread play_level_easteregg_vox( "vox_illumi_2" );
    level thread setup_custom_vox();
    level thread factory_german_safe();
    level thread mature_settings_changes();
    set_zombie_var( "zombie_powerup_drop_max_per_round", 3 );
    trigs = getentarray( "audio_bump_trigger", "targetname" );

    for ( i = 0; i < trigs.size; i++ )
    {
        if ( isdefined( trigs[i].script_sound ) && trigs[i].script_sound == "fly_bump_bottle" )
            trigs[i] thread check_for_change();
    }

    trigs = getentarray( "trig_ee", "targetname" );
    array_thread( trigs, ::extra_events );
    level thread flytrap();
    level.zombie_visionset = "zombie_factory";
    visionsetnaked( "zombie_factory", 0 );
}

precachecustomcharacters()
{
    character\c_usa_dempsey_zm::precache();
    character\c_rus_nikolai_zm::precache();
    character\c_jap_takeo_zm::precache();
    character\c_ger_richtofen_zm::precache();
    precachemodel( "viewmodel_usa_pow_arms" );
    precachemodel( "viewmodel_rus_prisoner_arms" );
    precachemodel( "viewmodel_vtn_nva_standard_arms" );
    precachemodel( "viewmodel_usa_hazmat_arms" );
}

initcharacterstartindex()
{
    level.characterstartindex = randomint( 4 );
}

selectcharacterindextouse()
{
    if ( level.characterstartindex >= 4 )
        level.characterstartindex = 0;

    self.characterindex = level.characterstartindex;
    level.characterstartindex++;
    return self.characterindex;
}

givecustomcharacters()
{
    if ( isdefined( level.hotjoin_player_setup ) && [[ level.hotjoin_player_setup ]]( "viewmodel_rus_prisoner_arms" ) )
        return;

    self detachall();

    if ( !isdefined( self.characterindex ) )
        self.characterindex = self selectcharacterindextouse();

/#
    if ( getdvar( #"_id_40772CF1" ) != "" )
        self.characterindex = getdvarint( #"_id_40772CF1" );
#/

    switch ( self.characterindex )
    {
        case 0:
            self character\c_usa_dempsey_zm::main();
            self setviewmodel( "viewmodel_usa_pow_arms" );
            self.characterindex = 0;
            break;
        case 1:
            self character\c_rus_nikolai_zm::main();
            self setviewmodel( "viewmodel_rus_prisoner_arms" );
            self.characterindex = 1;
            break;
        case 2:
            self character\c_jap_takeo_zm::main();
            self setviewmodel( "viewmodel_vtn_nva_standard_arms" );
            self.characterindex = 2;
            break;
        case 3:
            self character\c_ger_richtofen_zm::main();
            self setviewmodel( "viewmodel_usa_hazmat_arms" );
            self.characterindex = 3;
            break;
    }

    self setmovespeedscale( 1 );
    self setsprintduration( 4 );
    self setsprintcooldown( 0 );
}

givecustomloadout( takeallweapons, alreadyspawned )
{
    self giveweapon( "knife_zm" );
    self give_start_weapon( 1 );
}

player_set_viewmodel_override( entity_num )
{
    switch ( self.entity_num )
    {
        case 0:
            self setviewmodel( "viewmodel_usa_pow_arms" );
            break;
        case 1:
            self setviewmodel( "viewmodel_rus_prisoner_arms" );
            break;
        case 2:
            self setviewmodel( "viewmodel_vtn_nva_standard_arms" );
            break;
        case 3:
            self setviewmodel( "viewmodel_usa_hazmat_arms" );
            break;
    }
}

register_offhand_weapons_for_level_defaults_override()
{
    register_lethal_grenade_for_level( "frag_grenade_zm" );
    level.zombie_lethal_grenade_player_init = "frag_grenade_zm";
    register_tactical_grenade_for_level( "cymbal_monkey_zm" );
    level.zombie_tactical_grenade_player_init = undefined;
    register_placeable_mine_for_level( "mine_bouncing_betty" );
    level.zombie_placeable_mine_player_init = undefined;
    register_melee_weapon_for_level( "knife_zm" );
    register_melee_weapon_for_level( "bowie_knife_zm" );
    level.zombie_melee_weapon_player_init = "knife_zm";
}

init_achievement()
{

}

factory_zone_init()
{
    add_adjacent_zone( "receiver_zone", "outside_east_zone", "enter_outside_east" );
    add_adjacent_zone( "receiver_zone", "outside_west_zone", "enter_outside_west" );
    add_adjacent_zone( "wnuen_zone", "outside_east_zone", "enter_wnuen_building" );
    add_adjacent_zone( "wnuen_zone", "wnuen_bridge_zone", "enter_wnuen_loading_dock" );
    add_adjacent_zone( "warehouse_bottom_zone", "outside_west_zone", "enter_warehouse_building" );
    add_adjacent_zone( "warehouse_bottom_zone", "warehouse_top_zone", "enter_warehouse_second_floor" );
    add_adjacent_zone( "warehouse_top_zone", "bridge_zone", "enter_warehouse_second_floor" );
    add_adjacent_zone( "tp_east_zone", "wnuen_zone", "enter_tp_east" );
    add_adjacent_zone( "tp_east_zone", "outside_east_zone", "enter_tp_east", 1 );
    add_zone_flags( "enter_tp_east", "enter_wnuen_building" );
    add_adjacent_zone( "tp_south_zone", "outside_south_zone", "enter_tp_south" );
    add_adjacent_zone( "tp_west_zone", "warehouse_top_zone", "enter_tp_west" );
}

intro_screen()
{
    flag_wait( "start_zombie_round_logic" );
    wait 2;
    level.intro_hud = [];

    for ( i = 0; i < 3; i++ )
    {
        level.intro_hud[i] = newhudelem();
        level.intro_hud[i].x = 0;
        level.intro_hud[i].y = 0;
        level.intro_hud[i].alignx = "left";
        level.intro_hud[i].aligny = "bottom";
        level.intro_hud[i].horzalign = "left";
        level.intro_hud[i].vertalign = "bottom";
        level.intro_hud[i].foreground = 1;

        if ( level.splitscreen && !level.hidef )
            level.intro_hud[i].fontscale = 2.75;
        else
            level.intro_hud[i].fontscale = 1.75;

        level.intro_hud[i].alpha = 0.0;
        level.intro_hud[i].color = ( 1, 1, 1 );
        level.intro_hud[i].inuse = 0;
    }

    level.intro_hud[0].y = -110;
    level.intro_hud[1].y = -90;
    level.intro_hud[2].y = -70;
    level.intro_hud[0] settext( &"ZOMBIE_INTRO_FACTORY_LEVEL_PLACE" );
    level.intro_hud[1] settext( "" );
    level.intro_hud[2] settext( "" );

    for ( i = 0; i < 3; i++ )
    {
        level.intro_hud[i] fadeovertime( 3.5 );
        level.intro_hud[i].alpha = 1;
        wait 1.5;
    }

    wait 1.5;

    for ( i = 0; i < 3; i++ )
    {
        level.intro_hud[i] fadeovertime( 3.5 );
        level.intro_hud[i].alpha = 0;
        wait 1.5;
    }

    for ( i = 0; i < 3; i++ )
        level.intro_hud[i] destroy();
}

script_anims_init()
{

}

factory_playanim( animname )
{

}

anim_override_func()
{

}

lock_additional_player_spawner()
{
    spawn_points = getstructarray( "player_respawn_point", "targetname" );

    for ( i = 0; i < spawn_points.size; i++ )
        spawn_points[i].locked = 1;
}

bridge_init()
{
    flag_init( "bridge_down" );
    wnuen_bridge = getent( "wnuen_bridge", "targetname" );
    wnuen_bridge_coils = getentarray( "wnuen_bridge_coils", "targetname" );

    for ( i = 0; i < wnuen_bridge_coils.size; i++ )
        wnuen_bridge_coils[i] linkto( wnuen_bridge );

    wnuen_bridge rotatepitch( 90, 1, 0.5, 0.5 );
    warehouse_bridge = getent( "warehouse_bridge", "targetname" );
    warehouse_bridge_coils = getentarray( "warehouse_bridge_coils", "targetname" );

    for ( i = 0; i < warehouse_bridge_coils.size; i++ )
        warehouse_bridge_coils[i] linkto( warehouse_bridge );

    warehouse_bridge rotatepitch( -90, 1, 0.5, 0.5 );
    bridge_audio = getstruct( "bridge_audio", "targetname" );
    flag_wait( "power_on" );
    wnuen_bridge rotatepitch( -90, 4, 0.5, 1.5 );
    warehouse_bridge rotatepitch( 90, 4, 0.5, 1.5 );

    if ( isdefined( bridge_audio ) )
        playsoundatposition( "bridge_lower", bridge_audio.origin );

    wnuen_bridge connectpaths();
    warehouse_bridge connectpaths();
    exploder( 500 );
    wnuen_bridge waittill( "rotatedone" );
    flag_set( "bridge_down" );

    if ( isdefined( bridge_audio ) )
        playsoundatposition( "bridge_hit", bridge_audio.origin );

    wnuen_bridge_clip = getent( "wnuen_bridge_clip", "targetname" );
    wnuen_bridge_clip delete();
    warehouse_bridge_clip = getent( "warehouse_bridge_clip", "targetname" );
    warehouse_bridge_clip delete();
    maps\mp\zombies\_zm_zonemgr::connect_zones( "wnuen_bridge_zone", "bridge_zone" );
    maps\mp\zombies\_zm_zonemgr::connect_zones( "warehouse_top_zone", "bridge_zone" );
}

jump_from_bridge()
{
    trig = getent( "trig_outside_south_zone", "targetname" );
    trig waittill( "trigger" );
    maps\mp\zombies\_zm_zonemgr::connect_zones( "outside_south_zone", "bridge_zone", 1 );
    maps\mp\zombies\_zm_zonemgr::connect_zones( "outside_south_zone", "wnuen_bridge_zone", 1 );
}

init_sounds()
{
    maps\mp\zombies\_zm_utility::add_sound( "break_stone", "break_stone" );
    maps\mp\zombies\_zm_utility::add_sound( "gate_door", "zmb_gate_slide_open" );
    maps\mp\zombies\_zm_utility::add_sound( "heavy_door", "zmb_heavy_door_open" );
    maps\mp\zombies\_zm_utility::add_sound( "door_slide_open", "door_slide_open" );
}

include_powerups()
{
    include_powerup( "nuke" );
    include_powerup( "insta_kill" );
    include_powerup( "double_points" );
    include_powerup( "full_ammo" );
    include_powerup( "carpenter" );
}

include_weapons()
{
    include_weapon( "knife_zm", 0 );
    include_weapon( "frag_grenade_zm", 0 );
    include_weapon( "claymore_zm", 0 );
    include_weapon( "m1911_zm", 0 );
    include_weapon( "m1911_upgraded_zm", 0 );
    include_weapon( "python_zm" );
    include_weapon( "python_upgraded_zm", 0 );
    include_weapon( "fiveseven_zm" );
    include_weapon( "fiveseven_upgraded_zm", 0 );
    include_weapon( "saritch_zm", 0 );
    include_weapon( "saritch_upgraded_zm", 0 );
    include_weapon( "ballista_zm", 0 );
    include_weapon( "ballista_upgraded_zm", 0 );
    include_weapon( "thompson_zm", 0 );
    include_weapon( "thompson_upgraded_zm", 0 );
    include_weapon( "xm8_zm" );
    include_weapon( "xm8_upgraded_zm", 0 );
    include_weapon( "type95_zm" );
    include_weapon( "type95_upgraded_zm", 0 );
    include_weapon( "mp44_zm", 0 );
    include_weapon( "mp44_upgraded_zm", 0 );
    include_weapon( "mp5k_zm", 0 );
    include_weapon( "mp5k_upgraded_zm", 0 );
    include_weapon( "mp40_zm", 0 );
    include_weapon( "mp40_upgraded_zm", 0 );
    include_weapon( "mpl_zm", 0 );
    include_weapon( "mpl_upgraded_zm", 0 );
    include_weapon( "kard_zm" );
    include_weapon( "kard_upgraded_zm", 0 );
    include_weapon( "fivesevendw_zm" );
    include_weapon( "fivesevendw_upgraded_zm", 0 );
    include_weapon( "870mcs_zm", 0 );
    include_weapon( "870mcs_upgraded_zm", 0 );
    include_weapon( "rottweil72_zm", 0 );
    include_weapon( "rottweil72_upgraded_zm", 0 );
    include_weapon( "srm1216_zm" );
    include_weapon( "srm1216_upgraded_zm", 0 );
    include_weapon( "saiga12_zm" );
    include_weapon( "saiga12_upgraded_zm", 0 );
    include_weapon( "tar21_zm" );
    include_weapon( "tar21_upgraded_zm", 0 );
    include_weapon( "galil_zm" );
    include_weapon( "galil_upgraded_zm", 0 );
    include_weapon( "hk416_zm" );
    include_weapon( "hk416_upgraded_zm", 0 );
    include_weapon( "fnfal_zm", 0 );
    include_weapon( "fnfal_upgraded_zm", 0 );
    include_weapon( "sa58_zm", 0 );
    include_weapon( "sa58_upgraded_zm", 0 );
    include_weapon( "barretm82_zm" );
    include_weapon( "barretm82_upgraded_zm", 0 );
    include_weapon( "dsr50_zm" );
    include_weapon( "dsr50_upgraded_zm", 0 );
    include_weapon( "rpd_zm" );
    include_weapon( "rpd_upgraded_zm", 0 );
    include_weapon( "hamr_zm" );
    include_weapon( "hamr_upgraded_zm", 0 );
    include_weapon( "usrpg_zm" );
    include_weapon( "usrpg_upgraded_zm", 0 );
    include_weapon( "m32_zm" );
    include_weapon( "m32_upgraded_zm", 0 );
    include_weapon( "cymbal_monkey_zm" );
    include_weapon( "ray_gun_zm" );
    include_weapon( "ray_gun_upgraded_zm", 0 );
    include_weapon( "tesla_gun_zm" );
    include_weapon( "tesla_gun_upgraded_zm", 0 );
    include_weapon( "knife_ballistic_zm" );
    include_weapon( "knife_ballistic_upgraded_zm", 0 );
    include_weapon( "knife_ballistic_bowie_zm", 0 );
    include_weapon( "knife_ballistic_bowie_upgraded_zm", 0 );
    level._uses_retrievable_ballisitic_knives = 1;
    add_limited_weapon( "m1911_zm", 0 );
    add_limited_weapon( "tesla_gun_zm", 1 );
    add_limited_weapon( "knife_ballistic_zm", 1 );
}

init_level_specific_wall_buy_fx()
{
    level._effect["frag_grenade_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_frag_nade" );
    level._effect["fnfal_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_fal" );
    level._effect["ballista_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_ballista" );
    level._effect["mp40_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_mp40" );
    level._effect["stg44_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_stg44" );
    level._effect["thompson_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_thompson" );
    level._effect["saritch_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_smr" );
}

custom_add_weapons()
{
    add_zombie_weapon( "srm1216_zm", "srm1216_upgraded_zm", &"ZOMBIE_WEAPON_SRM1216", 50, "wpck_m1216", "", undefined, 1 );
    add_zombie_weapon( "m1911_zm", "m1911_upgraded_zm", &"ZOMBIE_WEAPON_M1911", 50, "pistol", "", undefined );
    add_zombie_weapon( "python_zm", "python_upgraded_zm", &"ZOMBIE_WEAPON_PYTHON", 50, "pistol", "", undefined );
    add_zombie_weapon( "mp44_zm", "mp44_upgraded_zm", &"ZOMBIE_WEAPON_MP44", 1200, "smg", "", undefined );
    add_zombie_weapon( "mp5k_zm", "mp5k_upgraded_zm", &"ZOMBIE_WEAPON_MP5K", 1000, "smg", "", undefined );
    add_zombie_weapon( "kard_zm", "kard_upgraded_zm", &"ZOMBIE_WEAPON_KARD", 50, "wpck_kap", "", undefined, 1 );
    add_zombie_weapon( "rottweil72_zm", "rottweil72_upgraded_zm", &"ZOMBIE_WEAPON_ROTTWEIL72", 500, "shotgun", "", undefined );
    add_zombie_weapon( "ballista_zm", "ballista_upgraded_zm", &"ZOMBIE_WEAPON_BALLISTA", 200, "sniper", "", undefined );
    add_zombie_weapon( "saritch_zm", "saritch_upgraded_zm", &"ZOMBIE_WEAPON_SARITCH", 500, "wpck_sidr", "", undefined, 1 );
    add_zombie_weapon( "thompson_zm", "thompson_upgraded_zm", &"ZOMBIE_WEAPON_THOMPSON", 1200, "smg", "", undefined );
    add_zombie_weapon( "galil_zm", "galil_upgraded_zm", &"ZOMBIE_WEAPON_GALIL", 50, "assault", "", undefined );
    add_zombie_weapon( "fnfal_zm", "fnfal_upgraded_zm", &"ZOMBIE_WEAPON_FNFAL", 1200, "burstrifle", "", undefined );
    add_zombie_weapon( "sa58_zm", "sa58_upgraded_zm", &"ZOMBIE_WEAPON_SA58", 600, "assault", "", undefined );
    add_zombie_weapon( "frag_grenade_zm", undefined, &"ZOMBIE_WEAPON_FRAG_GRENADE", 250, "grenade", "", undefined );
    add_zombie_weapon( "sticky_grenade_zm", undefined, &"ZOMBIE_WEAPON_STICKY_GRENADE", 250, "grenade", "", undefined );
    add_zombie_weapon( "claymore_zm", undefined, &"ZOMBIE_WEAPON_CLAYMORE", 1000, "grenade", "", undefined );
    add_zombie_weapon( "cymbal_monkey_zm", undefined, &"ZOMBIE_WEAPON_SATCHEL_2000", 2000, "monkey", "", undefined );
    add_zombie_weapon( "ray_gun_zm", "ray_gun_upgraded_zm", &"ZOMBIE_WEAPON_RAYGUN", 10000, "raygun", "", undefined );
    add_zombie_weapon( "knife_ballistic_zm", "knife_ballistic_upgraded_zm", &"ZOMBIE_WEAPON_KNIFE_BALLISTIC", 10, "sickle", "", undefined );
    add_zombie_weapon( "knife_ballistic_bowie_zm", "knife_ballistic_bowie_upgraded_zm", &"ZOMBIE_WEAPON_KNIFE_BALLISTIC", 10, "sickle", "", undefined );
    add_zombie_weapon( "fiveseven_zm", "fiveseven_upgraded_zm", &"ZOMBIE_WEAPON_FIVESEVEN", 50, "pistol", "", undefined );
    add_zombie_weapon( "mp40_zm", "mp40_upgraded_zm", &"ZOMBIE_WEAPON_MP40", 1000, "smg", "", undefined );
    add_zombie_weapon( "mpl_zm", "mpl_upgraded_zm", &"ZOMBIE_WEAPON_MPL", 1000, "smg", "", undefined );
    add_zombie_weapon( "fivesevendw_zm", "fivesevendw_upgraded_zm", &"ZOMBIE_WEAPON_FIVESEVENDW", 50, "wpck_duel57", "", undefined, 1 );
    add_zombie_weapon( "870mcs_zm", "870mcs_upgraded_zm", &"ZOMBIE_WEAPON_870MCS", 1500, "shotgun", "", undefined );
    add_zombie_weapon( "saiga12_zm", "saiga12_upgraded_zm", &"ZOMBIE_WEAPON_SAIGA12", 50, "wpck_saiga12", "", undefined, 1 );
    add_zombie_weapon( "xm8_zm", "xm8_upgraded_zm", &"ZOMBIE_WEAPON_XM8", 50, "wpck_m8a1", "", undefined, 1 );
    add_zombie_weapon( "type95_zm", "type95_upgraded_zm", &"ZOMBIE_WEAPON_TYPE95", 50, "wpck_type25", "", undefined, 1 );
    add_zombie_weapon( "tar21_zm", "tar21_upgraded_zm", &"ZOMBIE_WEAPON_TAR21", 50, "wpck_x95l", "", undefined, 1 );
    add_zombie_weapon( "hk416_zm", "hk416_upgraded_zm", &"ZOMBIE_WEAPON_HK416", 100, "", "", undefined );
    add_zombie_weapon( "barretm82_zm", "barretm82_upgraded_zm", &"ZOMBIE_WEAPON_BARRETM82", 50, "sniper", "", undefined );
    add_zombie_weapon( "dsr50_zm", "dsr50_upgraded_zm", &"ZOMBIE_WEAPON_DR50", 50, "wpck_dsr50", "", undefined, 1 );
    add_zombie_weapon( "rpd_zm", "rpd_upgraded_zm", &"ZOMBIE_WEAPON_RPD", 50, "wpck_rpd", "", undefined, 1 );
    add_zombie_weapon( "hamr_zm", "hamr_upgraded_zm", &"ZOMBIE_WEAPON_HAMR", 50, "wpck_hamr", "", undefined, 1 );
    add_zombie_weapon( "usrpg_zm", "usrpg_upgraded_zm", &"ZOMBIE_WEAPON_USRPG", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "m32_zm", "m32_upgraded_zm", &"ZOMBIE_WEAPON_M32", 50, "wpck_m32", "", undefined, 1 );
    add_zombie_weapon( "tesla_gun_zm", "tesla_gun_upgraded_zm", &"ZOMBIE_WEAPON_TESLA", 10, "tesla", "", undefined );
}

factory_ray_gun_weighting_func()
{
    if ( level.chest_moves > 0 )
    {
        num_to_add = 1;

        if ( isdefined( level.pulls_since_last_ray_gun ) )
        {
            if ( level.pulls_since_last_ray_gun > 11 )
                num_to_add = num_to_add + int( level.zombie_include_weapons.size * 0.1 );
            else if ( level.pulls_since_last_ray_gun > 7 )
                num_to_add = num_to_add + int( 0.05 * level.zombie_include_weapons.size );
        }

        return num_to_add;
    }
    else
        return 0;
}

factory_cymbal_monkey_weighting_func()
{
    players = get_players();
    count = 0;

    for ( i = 0; i < players.size; i++ )
    {
        if ( players[i] maps\mp\zombies\_zm_weapons::has_weapon_or_upgrade( "cymbal_monkey_zm" ) )
            count++;
    }

    if ( count > 0 )
        return 1;
    else if ( level.round_number < 10 )
        return 3;
    else
        return 5;
}

power_electric_switch()
{
    trig = getent( "use_power_switch", "targetname" );
    master_switch = getent( "power_switch", "targetname" );
    master_switch notsolid();
    trig sethintstring( &"ZOMBIE_ELECTRIC_SWITCH" );
    trig setcursorhint( "HINT_NOICON" );
    cheat = 0;
/#
    if ( getdvarint( #"_id_FA81816F" ) >= 3 )
    {
        wait 5;
        cheat = 1;
    }
#/
    user = undefined;

    if ( cheat != 1 )
        trig waittill( "trigger", user );

    master_switch rotateroll( -90, 0.3 );
    master_switch playsound( "zmb_switch_flip" );
    maps\mp\zombies\_zm_game_module::turn_power_on_and_open_doors();
    wait_network_frame();
    level notify( "sleight_on" );
    wait_network_frame();
    level notify( "revive_on" );
    wait_network_frame();
    level notify( "doubletap_on" );
    wait_network_frame();
    level notify( "juggernog_on" );
    wait_network_frame();
    level notify( "Pack_A_Punch_on" );
    wait_network_frame();
    level notify( "specialty_armorvest_power_on" );
    wait_network_frame();
    level notify( "specialty_rof_power_on" );
    wait_network_frame();
    level notify( "specialty_quickrevive_power_on" );
    wait_network_frame();
    level notify( "specialty_fastreload_power_on" );
    wait_network_frame();
    wait_network_frame();
    exploder( 600 );
    trig delete();
    playfx( level._effect["switch_sparks"], getstruct( "power_switch_fx", "targetname" ).origin );
    maps\mp\zombies\_zm_zonemgr::connect_zones( "outside_east_zone", "outside_south_zone" );
    maps\mp\zombies\_zm_zonemgr::connect_zones( "outside_west_zone", "outside_south_zone", 1 );
}

init_elec_trap_trigs()
{
    array_thread( getentarray( "warehouse_electric_trap", "targetname" ), ::electric_trap_think, "enter_warehouse_building" );
    array_thread( getentarray( "wuen_electric_trap", "targetname" ), ::electric_trap_think, "enter_wnuen_building" );
    array_thread( getentarray( "bridge_electric_trap", "targetname" ), ::electric_trap_think, "bridge_down" );
}

electric_trap_dialog()
{
    self endon( "warning_dialog" );
    level endon( "switch_flipped" );
    timer = 0;

    while ( true )
    {
        wait 0.5;
        players = get_players();

        for ( i = 0; i < players.size; i++ )
        {
            dist = distancesquared( players[i].origin, self.origin );

            if ( dist > 4900 )
            {
                timer = 0;
                continue;
            }

            if ( dist < 4900 && timer < 3 )
            {
                wait 0.5;
                timer++;
            }

            if ( dist < 4900 && timer == 3 )
            {
                players[i] maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "intro" );
                wait 3;
                self notify( "warning_dialog" );
            }
        }
    }
}

hint_string( string )
{
    self sethintstring( string );
    self setcursorhint( "HINT_NOICON" );
}

electric_trap_think( enable_flag )
{
    self sethintstring( &"ZOMBIE_NEED_POWER" );
    self setcursorhint( "HINT_NOICON" );
    self.zombie_cost = 1000;
    self thread electric_trap_dialog();
    triggers = getentarray( self.targetname, "targetname" );
    flag_wait( "power_on" );
    self.zombie_dmg_trig = getent( self.target, "targetname" );
    self.zombie_dmg_trig.in_use = 0;
    self sethintstring( &"ZOMBIE_BUTTON_ACTIVATE_ELECTRIC" );
    self setcursorhint( "HINT_NOICON" );
    light_name = "zapper_light_wuen";

    if ( !flag( enable_flag ) )
    {
        self trigger_off();
        zapper_light_red( light_name );
        flag_wait( enable_flag );
        self trigger_on();
    }

    zapper_light_green( light_name );

    while ( true )
    {
        array_thread( triggers, ::hint_string, &"ZOMBIE_BUTTON_ACTIVATE_ELECTRIC" );
        self waittill( "trigger", who );

        if ( who in_revive_trigger() )
            continue;

        if ( is_player_valid( who ) )
        {
            if ( who.score >= self.zombie_cost )
            {
                if ( !self.zombie_dmg_trig.in_use )
                {
                    self.zombie_dmg_trig.in_use = 1;
                    array_thread( triggers, ::hint_string, &"ZOMBIE_TRAP_ACTIVE" );
                    play_sound_at_pos( "purchase", who.origin );
                    self thread electric_trap_move_switch( self );
                    self waittill( "switch_activated" );
                    who maps\mp\zombies\_zm_score::minus_to_player_score( self.zombie_cost );
                    self.zombie_dmg_trig trigger_on();
                    self thread activate_electric_trap();
                    self waittill( "elec_done" );
                    clientnotify( self.script_string + "off" );

                    if ( isdefined( self.fx_org ) )
                        self.fx_org delete();

                    if ( isdefined( self.zapper_fx_org ) )
                        self.zapper_fx_org delete();

                    if ( isdefined( self.zapper_fx_switch_org ) )
                        self.zapper_fx_switch_org delete();

                    array_thread( triggers, ::hint_string, &"ZOMBIE_TRAP_COOLDOWN" );
                    self.zombie_dmg_trig trigger_off();
                    wait 25;
                    self notify( "available" );
                    self.zombie_dmg_trig.in_use = 0;
                }
            }
        }
    }
}

electric_trap_move_switch( parent )
{
    light_name = "";
    tswitch = getent( "trap_handle_" + parent.script_linkto, "targetname" );

    switch ( tswitch.script_linkname )
    {
        case "10":
        case "11":
            light_name = "zapper_light_wuen";
            break;
        case "20":
        case "21":
            light_name = "zapper_light_warehouse";
            break;
        case "30":
        case "31":
            light_name = "zapper_light_bridge";
            break;
    }

    light_name = "zapper_light_wuen";
    zapper_light_red( light_name );
    tswitch rotatepitch( 180, 0.5 );
    tswitch playsound( "amb_sparks_l_b" );
    tswitch waittill( "rotatedone" );
    self notify( "switch_activated" );
    self waittill( "available" );
    tswitch rotatepitch( -180, 0.5 );
    zapper_light_green( light_name );
}

activate_electric_trap()
{
    if ( isdefined( self.script_string ) && self.script_string == "warehouse" )
        clientnotify( "warehouse" );
    else if ( isdefined( self.script_string ) && self.script_string == "wuen" )
        clientnotify( "wuen" );
    else
        clientnotify( "bridge" );

    clientnotify( self.target );
    fire_points = getstructarray( self.target, "targetname" );

    for ( i = 0; i < fire_points.size; i++ )
    {
        wait_network_frame();
        fire_points[i] thread electric_trap_fx( self );
    }

    self.zombie_dmg_trig thread elec_barrier_damage();
    level waittill( "arc_done" );
}

electric_trap_fx( notify_ent )
{
    self.tag_origin = spawn( "script_model", self.origin );
    self.tag_origin playsound( "zmb_elec_start" );
    self.tag_origin playloopsound( "zmb_elec_loop" );
    self thread play_electrical_sound();
    wait 25;
    self.tag_origin stoploopsound();
    self.tag_origin delete();
    notify_ent notify( "elec_done" );
    level notify( "arc_done" );
}

play_electrical_sound()
{
    level endon( "arc_done" );

    while ( true )
    {
        wait( randomfloatrange( 0.1, 0.5 ) );
        playsoundatposition( "zmb_elec_arc", self.origin );
    }
}

elec_barrier_damage()
{
    while ( true )
    {
        self waittill( "trigger", ent );

        if ( isplayer( ent ) )
            ent thread player_elec_damage();
        else if ( !isdefined( ent.marked_for_death ) )
        {
            ent.marked_for_death = 1;
            ent thread zombie_elec_death( randomint( 100 ) );
        }
    }
}

play_elec_vocals()
{
    if ( isdefined( self ) )
    {
        org = self.origin;
        wait 0.15;
        playsoundatposition( "zmb_elec_vocals", org );
        playsoundatposition( "zmb_zombie_arc", org );
        playsoundatposition( "zmb_exp_jib_zombie", org );
    }
}

player_elec_damage()
{
    self endon( "death" );
    self endon( "disconnect" );

    if ( !isdefined( level.elec_loop ) )
        level.elec_loop = 0;

    if ( !isdefined( self.is_burning ) && !self maps\mp\zombies\_zm_laststand::player_is_in_laststand() )
    {
        self.is_burning = 1;
        self setelectrified( 1.25 );
        shocktime = 2.5;
        self shellshock( "electrocution", shocktime );

        if ( level.elec_loop == 0 )
        {
            elec_loop = 1;
            self playsound( "zmb_zombie_arc" );
        }

        if ( !self hasperk( "specialty_armorvest" ) || self.health - 100 < 1 )
        {
            radiusdamage( self.origin, 10, self.health + 100, self.health + 100 );
            self.is_burning = undefined;
        }
        else
        {
            self dodamage( 50, self.origin );
            wait 0.1;
            self.is_burning = undefined;
        }
    }
}

zombie_elec_death( flame_chance )
{
    self endon( "death" );

    if ( flame_chance > 90 && level.burning_zombies.size < 6 )
    {
        level.burning_zombies[level.burning_zombies.size] = self;
        self thread zombie_flame_watch();
        self playsound( "ignite" );
        self thread maps\mp\animscripts\zm_death::flame_death_fx();
        wait( randomfloat( 1.25 ) );
    }
    else
    {
        refs[0] = "guts";
        refs[1] = "right_arm";
        refs[2] = "left_arm";
        refs[3] = "right_leg";
        refs[4] = "left_leg";
        refs[5] = "no_legs";
        refs[6] = "head";
        self.a.gib_ref = refs[randomint( refs.size )];
        playsoundatposition( "zmb_zombie_arc", self.origin );

        if ( !self.isdog && randomint( 100 ) > 40 )
        {
            self thread electroctute_death_fx();
            self thread play_elec_vocals();
        }

        wait( randomfloat( 1.25 ) );
        self playsound( "zmb_zombie_arc" );
    }

    self dodamage( self.health + 666, self.origin );
}

zombie_flame_watch()
{
    self waittill( "death" );
    self stoploopsound();
    arrayremovevalue( level.burning_zombies, self );
}

zapper_light_red( lightname )
{
    zapper_lights = getentarray( lightname, "targetname" );

    for ( i = 0; i < zapper_lights.size; i++ )
    {
        zapper_lights[i] setmodel( "zombie_zapper_cagelight_red" );

        if ( isdefined( zapper_lights[i].fx ) )
            zapper_lights[i].fx delete();

        zapper_lights[i].fx = maps\mp\zombies\_zm_net::network_safe_spawn( "trap_light_red", 2, "script_model", zapper_lights[i].origin );
        zapper_lights[i].fx setmodel( "tag_origin" );
        zapper_lights[i].fx.angles = zapper_lights[i].angles + vectorscale( ( -1, 0, 0 ), 90.0 );
        playfxontag( level._effect["zapper_light_notready"], zapper_lights[i].fx, "tag_origin" );
    }
}

zapper_light_green( lightname )
{
    zapper_lights = getentarray( lightname, "targetname" );

    for ( i = 0; i < zapper_lights.size; i++ )
    {
        zapper_lights[i] setmodel( "zombie_zapper_cagelight_green" );

        if ( isdefined( zapper_lights[i].fx ) )
            zapper_lights[i].fx delete();

        zapper_lights[i].fx = maps\mp\zombies\_zm_net::network_safe_spawn( "trap_light_green", 2, "script_model", zapper_lights[i].origin );
        zapper_lights[i].fx setmodel( "tag_origin" );
        zapper_lights[i].fx.angles = zapper_lights[i].angles + vectorscale( ( -1, 0, 0 ), 90.0 );
        playfxontag( level._effect["zapper_light_ready"], zapper_lights[i].fx, "tag_origin" );
    }
}

electroctute_death_fx()
{
    self endon( "death" );

    if ( isdefined( self.is_electrocuted ) && self.is_electrocuted )
        return;

    self.is_electrocuted = 1;
    self thread electrocute_timeout();

    if ( self.team == level.zombie_team )
    {
        level.bconfiretime = gettime();
        level.bconfireorg = self.origin;
    }

    playfxontag( level._effect["elec_torso"], self, "J_SpineLower" );
    self playsound( "zmb_elec_jib_zombie" );
    wait 1;
    tagarray = [];
    tagarray[0] = "J_Elbow_LE";
    tagarray[1] = "J_Elbow_RI";
    tagarray[2] = "J_Knee_RI";
    tagarray[3] = "J_Knee_LE";
    tagarray = array_randomize( tagarray );
    playfxontag( level._effect["elec_md"], self, tagarray[0] );
    self playsound( "elec_jib_zombie" );
    wait 1;
    self playsound( "zmb_elec_jib_zombie" );
    tagarray[0] = "J_Wrist_RI";
    tagarray[1] = "J_Wrist_LE";

    if ( !isdefined( self.a.gib_ref ) || self.a.gib_ref != "no_legs" )
    {
        tagarray[2] = "J_Ankle_RI";
        tagarray[3] = "J_Ankle_LE";
    }

    tagarray = array_randomize( tagarray );
    playfxontag( level._effect["elec_sm"], self, tagarray[0] );
    playfxontag( level._effect["elec_sm"], self, tagarray[1] );
}

electrocute_timeout()
{
    self endon( "death" );
    self playloopsound( "amb_fire_manager_0" );
    wait 12;
    self stoploopsound();

    if ( isdefined( self ) && isalive( self ) )
    {
        self.is_electrocuted = 0;
        self notify( "stop_flame_damage" );
    }
}

check_for_change()
{
    while ( true )
    {
        self waittill( "trigger", player );

        if ( player getstance() == "prone" )
        {
            player maps\mp\zombies\_zm_score::add_to_player_score( 25 );
            play_sound_at_pos( "purchase", player.origin );
            break;
        }

        wait 0.1;
    }
}

extra_events()
{
    self usetriggerrequirelookat();
    self setcursorhint( "HINT_NOICON" );
    self waittill( "trigger" );
    targ = getent( self.target, "targetname" );

    if ( isdefined( targ ) )
        targ movez( -10, 5 );
}

flytrap()
{
    flag_init( "hide_and_seek" );
    level.flytrap_counter = 0;
    level thread hide_and_seek_target( "ee_exp_monkey" );
    wait_network_frame();
    level thread hide_and_seek_target( "ee_bowie_bear" );
    wait_network_frame();
    level thread hide_and_seek_target( "ee_perk_bear" );
    wait_network_frame();
    trig_control_panel = getent( "trig_ee_flytrap", "targetname" );
    upgrade_hit = 0;

    while ( !upgrade_hit )
    {
        trig_control_panel waittill( "damage", amount, inflictor, direction, point, type );
        weapon = inflictor getcurrentweapon();

        if ( maps\mp\zombies\_zm_weapons::is_weapon_upgraded( weapon ) )
            upgrade_hit = 1;
    }

    trig_control_panel playsound( "flytrap_hit" );
    playsoundatposition( "flytrap_creeper", trig_control_panel.origin );
    thread play_sound_2d( "sam_fly_laugh" );
    level clientnotify( "ag1" );
    wait 9.0;
    thread play_sound_2d( "sam_fly_act_0" );
    wait 6.0;
    thread play_sound_2d( "sam_fly_act_1" );
    flag_set( "hide_and_seek" );
    flag_wait( "ee_exp_monkey" );
    flag_wait( "ee_bowie_bear" );
    flag_wait( "ee_perk_bear" );
}

hide_and_seek_target( target_name )
{
    flag_init( target_name );
    obj_array = getentarray( target_name, "targetname" );

    for ( i = 0; i < obj_array.size; i++ )
        obj_array[i] hide();

    trig = getent( "trig_" + target_name, "targetname" );
    trig trigger_off();
    flag_wait( "hide_and_seek" );

    for ( i = 0; i < obj_array.size; i++ )
        obj_array[i] show();

    trig trigger_on();
    trig waittill( "trigger" );
    level.flytrap_counter = level.flytrap_counter + 1;
    thread flytrap_samantha_vox();
    trig playsound( "object_hit" );

    for ( i = 0; i < obj_array.size; i++ )
        obj_array[i] hide();

    flag_set( target_name );
}

phono_egg_init( trigger_name, origin_name )
{
    if ( !isdefined( level.phono_counter ) )
        level.phono_counter = 0;

    players = get_players();
    phono_trig = getent( trigger_name, "targetname" );
    phono_origin = getent( origin_name, "targetname" );

    if ( !isdefined( phono_trig ) || !isdefined( phono_origin ) )
        return;

    phono_trig usetriggerrequirelookat();
    phono_trig setcursorhint( "HINT_NOICON" );

    for ( i = 0; i < players.size; i++ )
    {
        phono_trig waittill( "trigger", players );
        level.phono_counter = level.phono_counter + 1;
        phono_origin play_phono_egg();
    }
}

play_phono_egg()
{
    if ( !isdefined( level.phono_counter ) )
        level.phono_counter = 0;

    if ( level.phono_counter == 1 )
        self playsound( "phono_one" );

    if ( level.phono_counter == 2 )
        self playsound( "phono_two" );

    if ( level.phono_counter == 3 )
        self playsound( "phono_three" );
}

radio_egg_init( trigger_name, origin_name )
{
    players = get_players();
    radio_trig = getent( trigger_name, "targetname" );
    radio_origin = getent( origin_name, "targetname" );

    if ( !isdefined( radio_trig ) || !isdefined( radio_origin ) )
        return;

    radio_trig usetriggerrequirelookat();
    radio_trig setcursorhint( "HINT_NOICON" );
    radio_origin playloopsound( "radio_static" );

    for ( i = 0; i < players.size; i++ )
    {
        radio_trig waittill( "trigger", players );
        radio_origin stoploopsound( 0.1 );
        radio_origin playsound( trigger_name );
    }
}

play_music_easter_egg( player )
{
    level.music_override = 1;
    level thread maps\mp\zombies\_zm_audio::change_zombie_music( "egg" );
    wait 4;

    if ( isdefined( player ) )
        player maps\mp\zombies\_zm_audio::create_and_play_dialog( "eggs", "music_activate" );

    wait 236;
    level.music_override = 0;
    level thread maps\mp\zombies\_zm_audio::change_zombie_music( "wave_loop" );
}

meteor_egg( trigger_name )
{
    meteor_trig = getent( trigger_name, "targetname" );
    meteor_trig usetriggerrequirelookat();
    meteor_trig setcursorhint( "HINT_NOICON" );
    meteor_trig playloopsound( "zmb_meteor_loop" );
    meteor_trig waittill( "trigger", player );
    meteor_trig stoploopsound( 1 );
    player playsound( "zmb_meteor_activate" );
    level.meteor_counter = level.meteor_counter + 1;

    if ( level.meteor_counter == 3 )
        level thread play_music_easter_egg( player );
}

flytrap_samantha_vox()
{
    if ( !isdefined( level.flytrap_counter ) )
        level.flytrap_counter = 0;

    if ( level.flytrap_counter == 1 )
        thread play_sound_2d( "sam_fly_first" );

    if ( level.flytrap_counter == 2 )
        thread play_sound_2d( "sam_fly_second" );

    if ( level.flytrap_counter == 3 )
    {
        thread play_sound_2d( "sam_fly_last" );
        return;
    }

    wait 0.05;
}

play_giant_mythos_lines()
{
    round = 5;
    wait 10;

    while ( true )
    {
        vox_rand = randomintrange( 1, 100 );

        if ( level.round_number <= round )
        {
            if ( vox_rand <= 2 )
            {
                players = get_players();
                p = randomint( players.size );
                players[p] thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "gen_giant" );
            }
        }
        else if ( level.round_number > round )
            return;

        wait( randomintrange( 60, 240 ) );
    }
}

play_level_easteregg_vox( object )
{
    percent = 35;
    trig = getent( object, "targetname" );

    if ( !isdefined( trig ) )
        return;

    trig usetriggerrequirelookat();
    trig setcursorhint( "HINT_NOICON" );

    while ( true )
    {
        trig waittill( "trigger", who );
        vox_rand = randomintrange( 1, 100 );

        if ( vox_rand <= percent )
        {
            index = maps\mp\zombies\_zm_weapons::get_player_index( who );

            switch ( object )
            {
                case "vox_corkboard_1":
                    who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "corkboard_1" );
                    break;
                case "vox_corkboard_2":
                    who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "corkboard_2" );
                    break;
                case "vox_corkboard_3":
                    who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "corkboard_3" );
                    break;
                case "vox_teddy":
                    if ( index != 2 )
                        who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "teddy" );

                    break;
                case "vox_fieldop":
                    if ( index != 1 && index != 3 )
                        who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "fieldop" );

                    break;
                case "vox_maxis":
                    if ( index == 3 )
                        who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "maxis" );

                    break;
                case "vox_illumi_1":
                    if ( index == 3 )
                        who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "maxis" );

                    break;
                case "vox_illumi_2":
                    if ( index == 3 )
                        who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "maxis" );

                    break;
                default:
                    return;
            }
        }
        else
            who thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "level", "gen_sigh" );

        wait 15;
    }
}

setup_custom_vox()
{
    wait 1;
    level.plr_vox["level"]["corkboard_1"] = "resp_corkmap";
    level.plr_vox["level"]["corkboard_2"] = "resp_corkmap";
    level.plr_vox["level"]["corkboard_3"] = "resp_corkmap";
    level.plr_vox["level"]["teddy"] = "resp_teddy";
    level.plr_vox["level"]["fieldop"] = "resp_fieldop";
    level.plr_vox["level"]["maxis"] = "resp_maxis";
    level.plr_vox["level"]["illumi_1"] = "resp_maxis";
    level.plr_vox["level"]["illumi_2"] = "resp_maxis";
    level.plr_vox["level"]["gen_sigh"] = "gen_sigh";
    level.plr_vox["level"]["gen_giant"] = "gen_giant";
    level.plr_vox["level"]["tele_linkall"] = "tele_linkall";
    level.plr_vox["level"]["tele_count"] = "tele_count";
    level.plr_vox["level"]["tele_help"] = "tele_help";
    level.plr_vox["level"]["perk_packa_see"] = "perk_packa_see";
    level.plr_vox["prefix"] = "vox_plr_";
}

factory_exit_level()
{
    zombies = getaiarray( level.zombie_team );

    for ( i = 0; i < zombies.size; i++ )
        zombies[i] thread factory_find_exit_point();
}

factory_find_exit_point()
{
    self endon( "death" );
    player = get_players()[0];
    dist_zombie = 0;
    dist_player = 0;
    dest = 0;
    away = vectornormalize( self.origin - player.origin );
    endpos = self.origin + vectorscale( away, 600 );
    locs = array_randomize( level.enemy_dog_locations );

    for ( i = 0; i < locs.size; i++ )
    {
        dist_zombie = distancesquared( locs[i].origin, endpos );
        dist_player = distancesquared( locs[i].origin, player.origin );

        if ( dist_zombie < dist_player )
        {
            dest = i;
            break;
        }
    }

    self notify( "stop_find_flesh" );
    self notify( "zombie_acquire_enemy" );
    self setgoalpos( locs[dest].origin );

    while ( true )
    {
        if ( !flag( "wait_and_revive" ) )
            break;

        wait_network_frame();
    }

    self thread maps\mp\zombies\_zm_ai_basic::find_flesh();
}

mature_settings_changes()
{
    if ( !is_mature() )
    {
        master_switch = getent( "power_switch", "targetname" );

        if ( isdefined( master_switch ) )
            master_switch setmodel( "p6_power_lever" );
    }
}

factory_german_safe()
{
    if ( is_german_build() )
    {
        dead_guy = getent( "hanging_dead_guy", "targetname" );
        dead_guy hide();
    }
}
