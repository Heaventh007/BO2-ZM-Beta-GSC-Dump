// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_spawner;

zombie_tracking_init()
{
    flag_wait( "start_zombie_round_logic" );

    while ( true )
    {
        zombies = getaiarray( level.zombie_team );

        if ( !isdefined( zombies ) || level.on_the_moon == 0 || is_true( level.ignore_distance_tracking ) )
        {
            wait 10.0;
            continue;
        }
        else
        {
            for ( i = 0; i < zombies.size; i++ )
            {
                if ( isdefined( zombies[i] ) && !is_true( zombies[i].ignore_distance_tracking ) )
                    zombies[i] thread delete_zombie_noone_looking( 1500 );
            }
        }

        wait 10;
    }
}

delete_zombie_noone_looking( how_close )
{
    self endon( "death" );

    if ( is_true( self.ignore_distance_tracking ) )
        return;

    if ( !isdefined( how_close ) )
        how_close = 1000;

    self.inview = 0;
    self.player_close = 0;
    players = get_players();

    for ( i = 0; i < players.size; i++ )
    {
        if ( players[i].sessionstate == "spectator" )
            continue;

        can_be_seen = self player_can_see_me( players[i] );

        if ( can_be_seen )
        {
            self.inview++;
            continue;
        }

        dist = distance( self.origin, players[i].origin );

        if ( dist < how_close )
            self.player_close++;
    }

    wait_network_frame();

    if ( self.inview == 0 && self.player_close == 0 )
    {
        if ( !isdefined( self.animname ) || isdefined( self.animname ) && self.animname != "zombie" )
            return;

        if ( isdefined( self.electrified ) && self.electrified == 1 )
            return;

        if ( self.health != level.zombie_health )
            return;
        else
        {
            if ( isdefined( self.in_the_ground ) && self.in_the_ground == 1 )
                return;

            level.zombie_total++;
            self maps\mp\zombies\_zm_spawner::reset_attack_spot();
            self notify( "zombie_delete" );
            self delete();
        }
    }
}

player_can_see_me( player )
{
    playerangles = player getplayerangles();
    playerforwardvec = anglestoforward( playerangles );
    playerunitforwardvec = vectornormalize( playerforwardvec );
    banzaipos = self.origin;
    playerpos = player getorigin();
    playertobanzaivec = banzaipos - playerpos;
    playertobanzaiunitvec = vectornormalize( playertobanzaivec );
    forwarddotbanzai = vectordot( playerunitforwardvec, playertobanzaiunitvec );
    anglefromcenter = acos( forwarddotbanzai );
    playerfov = getdvarfloat( #"cg_fov" );
    banzaivsplayerfovbuffer = getdvarfloat( #"_id_BCB625CF" );

    if ( banzaivsplayerfovbuffer <= 0 )
        banzaivsplayerfovbuffer = 0.2;

    playercanseeme = anglefromcenter <= playerfov * 0.5 * ( 1 - banzaivsplayerfovbuffer );
    return playercanseeme;
}
