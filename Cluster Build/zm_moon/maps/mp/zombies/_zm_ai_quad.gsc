// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_ai_quad;
#include maps\mp\zombies\_zm_spawner;
#include maps\mp\zombies\_zm_ai_basic;
#include maps\mp\zombies\_zm_net;

init()
{
    init_quad_zombie_fx();
    level.quad_spawners = getentarray( "quad_zombie_spawner", "script_noteworthy" );
    array_thread( level.quad_spawners, ::add_spawn_function, maps\mp\zombies\_zm_ai_quad::quad_prespawn );

    if ( isdefined( level.zombie_spawners ) )
        level.zombie_spawners = arraycombine( level.zombie_spawners, level.quad_spawners, 0, 0 );
}

quad_prespawn()
{
    self.animname = "quad_zombie";
    self.no_eye_glow = 1;
    self.custom_location = ::quad_location;
    self maps\mp\zombies\_zm_spawner::zombie_spawn_init( 1 );
    self.zombie_can_sidestep = 0;
    self.maxhealth = int( self.maxhealth * 0.75 );
    self.health = self.maxhealth;
    self.freezegun_damage = 0;
    self.meleedamage = 45;
    self playsound( "zmb_quad_spawn" );
    self.death_explo_radius_zomb = 96;
    self.death_explo_radius_plr = 96;
    self.death_explo_damage_zomb = 1.05;
    self.death_gas_radius = 125;
    self.death_gas_time = 7;

    if ( isdefined( level.quad_explode ) && level.quad_explode == 1 )
    {
        self.deathanimscript = ::quad_post_death;
        self.actor_killed_override = ::quad_killed_override;
    }

    self set_default_attack_properties();
    self.pre_teleport_func = ::quad_pre_teleport;
    self.post_teleport_func = ::quad_post_teleport;
    self.can_explode = 0;
    self.exploded = 0;
    self thread quad_trail();
    self allowpitchangle( 1 );
    self setphysparams( 15, 0, 24 );

    if ( isdefined( level.quad_prespawn ) )
        self thread [[ level.quad_prespawn ]]();

    self thread maps\mp\zombies\_zm_ai_basic::find_flesh();
}

init_quad_zombie_fx()
{
    level._effect["quad_explo_gas"] = loadfx( "maps/zombie/fx_zombie_quad_gas_nova6" );
    level._effect["quad_trail"] = loadfx( "maps/zombie/fx_zombie_quad_trail" );
}

quad_location()
{
    self endon( "death" );
    spots = [];

    if ( isdefined( level.quad_locations ) )
    {
        for ( i = 0; i < level.quad_locations.size; i++ )
            spots[spots.size] = level.quad_locations[i];
    }

    assert( spots.size > 0, "No spawn locations found" );
    spot = random( spots );

    if ( isdefined( spot.target ) )
        self.target = spot.target;

    self.anchor = spawn( "script_origin", self.origin );
    self.anchor.angles = self.angles;
    self linkto( self.anchor );

    if ( !isdefined( spot.angles ) )
        spot.angles = ( 0, 0, 0 );

    self ghost();
    self.anchor moveto( spot.origin, 0.05 );
    self.anchor waittill( "movedone" );
    target_org = get_desired_origin();

    if ( isdefined( target_org ) )
    {
        anim_ang = vectortoangles( target_org - self.origin );
        self.anchor rotateto( ( 0, anim_ang[1], 0 ), 0.05 );
        self.anchor waittill( "rotatedone" );
    }

    if ( isdefined( level.zombie_spawn_fx ) )
        playfx( level.zombie_spawn_fx, spot.origin );

    self unlink();

    if ( isdefined( self.anchor ) )
        self.anchor delete();

    self show();
    self notify( "risen", spot.script_string );
}

quad_vox()
{
    self endon( "death" );
    wait 5;
    quad_wait = 5;

    while ( true )
    {
        players = getplayers();

        for ( i = 0; i < players.size; i++ )
        {
            if ( distancesquared( self.origin, players[i].origin ) > 1440000 )
            {
                self playsound( "zmb_quad_amb" );
                quad_wait = 7;
                continue;
            }

            if ( distancesquared( self.origin, players[i].origin ) > 40000 )
            {
                self playsound( "zmb_quad_vox" );
                quad_wait = 5;
                continue;
            }

            if ( distancesquared( self.origin, players[i].origin ) < 22500 )
                wait 0.05;
        }

        wait( randomfloatrange( 1, quad_wait ) );
    }
}

set_default_attack_properties()
{
    self.pathenemyfightdist = 64;
    self.meleeattackdist = 64;
    self.goalradius = 16;
    self.maxsightdistsqrd = 16384;
    self.can_leap = 0;
}

quad_thundergun_knockdown( player, gib )
{
    self endon( "death" );
    damage = int( self.maxhealth * 0.5 );
    self dodamage( damage, player.origin, player );
}

quad_gas_explo_death()
{
    death_vars = [];
    death_vars["explo_radius_zomb"] = self.death_explo_radius_zomb;
    death_vars["explo_radius_plr"] = self.death_explo_radius_plr;
    death_vars["explo_damage_zomb"] = self.death_explo_damage_zomb;
    death_vars["gas_radius"] = self.death_gas_radius;
    death_vars["gas_time"] = self.death_gas_time;
    self thread quad_death_explo( self.origin, death_vars );
    level thread quad_gas_area_of_effect( self.origin, death_vars );
    self delete();
}

quad_death_explo( origin, death_vars )
{
    playsoundatposition( "zmb_quad_explo", origin );
    playfx( level._effect["dog_gib"], origin );
    players = get_players();
    zombies = getaiarray( level.zombie_team );

    for ( i = 0; i < players.size; i++ )
    {
        if ( distance( origin, players[i].origin ) <= death_vars["explo_radius_plr"] )
        {
            is_immune = 0;

            if ( isdefined( level.quad_gas_immune_func ) )
                is_immune = players[i] thread [[ level.quad_gas_immune_func ]]();

            if ( !is_immune )
                players[i] shellshock( "explosion", 2.5 );
        }
    }

    self.exploded = 1;
    self radiusdamage( origin, death_vars["explo_radius_zomb"], level.zombie_health, level.zombie_health, self, "MOD_EXPLOSIVE" );
}

quad_damage_func( player )
{
    if ( self.exploded )
        return 0;

    return self.meleedamage;
}

quad_gas_area_of_effect( origin, death_vars )
{
    effectarea = spawn( "trigger_radius", origin, 0, death_vars["gas_radius"], 100 );
    playfx( level._effect["quad_explo_gas"], origin );

    for ( gas_time = 0; gas_time <= death_vars["gas_time"]; gas_time = gas_time + 1 )
    {
        players = get_players();

        for ( i = 0; i < players.size; i++ )
        {
            is_immune = 0;

            if ( isdefined( level.quad_gas_immune_func ) )
                is_immune = players[i] thread [[ level.quad_gas_immune_func ]]();

            if ( players[i] istouching( effectarea ) && !is_immune )
            {
                players[i] setblur( 4, 0.1 );
                continue;
            }

            players[i] setblur( 0, 0.5 );
        }

        wait 1;
    }

    players = get_players();

    for ( i = 0; i < players.size; i++ )
        players[i] setblur( 0, 0.5 );

    effectarea delete();
}

quad_trail()
{
    self endon( "death" );
    self waittill( "quad_end_traverse_anim" );
    self.fx_quad_trail = spawn( "script_model", self gettagorigin( "tag_origin" ) );
    self.fx_quad_trail.angles = self gettagangles( "tag_origin" );
    self.fx_quad_trail setmodel( "tag_origin" );
    self.fx_quad_trail linkto( self, "tag_origin" );
    maps\mp\zombies\_zm_net::network_safe_play_fx_on_tag( "quad_fx", 2, level._effect["quad_trail"], self.fx_quad_trail, "tag_origin" );
}

quad_post_death()
{
    if ( isdefined( self.fx_quad_trail ) )
    {
        self.fx_quad_trail unlink();
        self.fx_quad_trail delete();
    }

    if ( self.can_explode )
        self thread quad_gas_explo_death();
}

quad_killed_override( einflictor, attacker, idamage, smeansofdeath, sweapon, vdir, shitloc, psoffsettime )
{
    if ( smeansofdeath == "MOD_PISTOL_BULLET" || smeansofdeath == "MOD_RIFLE_BULLET" )
        self.can_explode = 1;
    else
    {
        self.can_explode = 0;

        if ( isdefined( self.fx_quad_trail ) )
        {
            self.fx_quad_trail unlink();
            self.fx_quad_trail delete();
        }
    }

    if ( isdefined( level._override_quad_explosion ) )
        [[ level._override_quad_explosion ]]( self );
}

quad_pre_teleport()
{
    if ( isdefined( self.fx_quad_trail ) )
    {
        self.fx_quad_trail unlink();
        self.fx_quad_trail delete();
        wait 0.1;
    }
}

quad_post_teleport()
{
    if ( isdefined( self.fx_quad_trail ) )
    {
        self.fx_quad_trail unlink();
        self.fx_quad_trail delete();
    }

    if ( self.health > 0 )
    {
        self.fx_quad_trail = spawn( "script_model", self gettagorigin( "tag_origin" ) );
        self.fx_quad_trail.angles = self gettagangles( "tag_origin" );
        self.fx_quad_trail setmodel( "tag_origin" );
        self.fx_quad_trail linkto( self, "tag_origin" );
        maps\mp\zombies\_zm_net::network_safe_play_fx_on_tag( "quad_fx", 2, level._effect["quad_trail"], self.fx_quad_trail, "tag_origin" );
    }
}
