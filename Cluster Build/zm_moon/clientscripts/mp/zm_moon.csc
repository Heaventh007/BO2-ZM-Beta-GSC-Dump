// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\zm_moon_fx;
#include clientscripts\mp\zombies\_zm_equip_gasmask;
#include clientscripts\mp\zombies\_zm_equip_hacker;
#include clientscripts\mp\zm_moon_amb;
#include clientscripts\mp\_sticky_grenade;
#include clientscripts\mp\zombies\_zm_weap_black_hole_bomb;
#include clientscripts\mp\zombies\_zm_weap_microwavegun;
#include clientscripts\mp\zombies\_zm_weap_quantum_bomb;
#include clientscripts\mp\zm_moon_digger;
#include clientscripts\mp\zm_moon_gravity;
#include clientscripts\mp\zombies\_zm;
#include clientscripts\mp\zm_moon_sq;
#include clientscripts\mp\zombies\_zm_equipment;

main()
{
    level.default_game_mode = "zclassic";
    clientscripts\mp\zm_moon_fx::main();
    level.zombiemode_using_additionalprimaryweapon_perk = 1;
    level.zombiemode_using_deadshot_perk = 1;
    level.zombiemode_using_divetonuke_perk = 1;
    level.zombiemode_using_doubletap_perk = 1;
    level.zombiemode_using_juggernaut_perk = 1;
    level.zombiemode_using_marathon_perk = 1;
    level.zombiemode_using_revive_perk = 1;
    level.zombiemode_using_sleightofhand_perk = 1;
    level._no_water_risers = 1;
    level.riser_fx_on_client = 1;
    level.risers_use_low_gravity_fx = 1;
    level.use_clientside_board_fx = 1;
    start_zombie_stuff();
    include_equipment_for_level();
    level.override_board_repair_sound = "evt_vent_slat_repair";
    level.override_board_teardown_sound = "evt_vent_slat_remove";
    clientscripts\mp\zombies\_zm_equip_gasmask::init();
    clientscripts\mp\zombies\_zm_equip_hacker::init();
    thread clientscripts\mp\zm_moon_amb::main();
    clientscripts\mp\_sticky_grenade::main();
    clientscripts\mp\zombies\_zm_weap_black_hole_bomb::init();
    level._visionset_black_hole_bomb = "zombie_moon_black_hole";
    clientscripts\mp\zombies\_zm_weap_microwavegun::init();
    clientscripts\mp\zombies\_zm_weap_quantum_bomb::init();
    register_clientfields();
    waitforclient( 0 );
    level._moon_exterior_vision_set = "zombie_moon";
    level._moon_exterior_vision_set_priority = 5;
    level._moon_interior_vision_set = "zombie_moonInterior";
    level._moon_interior_vision_set_priority = 5;
    level._moon_biodome_vision_set = "zombie_moonBioDome";
    level._moon_biodome_vision_set_priority = 5;
    level._moon_tunnels_vision_set = "zombie_moonTunnels";
    level._moon_tunnels_vision_set_priority = 5;
    level._moon_hanger18_vision_set = "zombie_moonHanger18";
    level._moon_hanger18_vision_set_priority = 5;
    level._moon_hellearth_vision_set = "zombie_moon_hellEarth";
    level._moon_hellearth_vision_set_priority = 5;
    level thread clientscripts\mp\zm_moon_digger::main();
    level._dte_vision_set = "zombie_coast_powerOn";
    level._dte_vision_set_priority = 7;
    clientscripts\mp\zm_moon_gravity::init();
    level thread radar_dish_init();
    level thread no_mans_land_sky();
    level thread moon_sky();
    level thread hide_earth();
    level thread show_earth();
    level thread hide_destroyed_earth();
    level thread show_destroyed_earth();
    level thread receiving_bay_doors_init();
    level thread watch_for_power();
}

start_zombie_stuff()
{
    if ( !is_true( getdvar( #"createfx" ) != "" ) )
    {
        init_level_specific_wall_buy_fx();
        include_weapons();
    }

    include_powerups();
    clientscripts\mp\zombies\_zm::init();
}

include_weapons()
{
    include_weapon( "knife_zm", 0 );
    include_weapon( "frag_grenade_zm", 0 );
    include_weapon( "claymore_zm", 0 );
    include_weapon( "sticky_grenade_zm", 0 );
    include_weapon( "m1911_zm", 0 );
    include_weapon( "m1911_upgraded_zm", 0 );
    include_weapon( "python_zm" );
    include_weapon( "python_upgraded_zm", 0 );
    include_weapon( "fiveseven_zm" );
    include_weapon( "fiveseven_upgraded_zm", 0 );
    include_weapon( "m14_zm", 0 );
    include_weapon( "m14_upgraded_zm", 0 );
    include_weapon( "m16_zm", 0 );
    include_weapon( "m16_gl_upgraded_zm", 0 );
    include_weapon( "xm8_zm" );
    include_weapon( "xm8_upgraded_zm", 0 );
    include_weapon( "type95_zm" );
    include_weapon( "type95_upgraded_zm", 0 );
    include_weapon( "ak74u_zm", 0 );
    include_weapon( "ak74u_upgraded_zm", 0 );
    include_weapon( "mp5k_zm", 0 );
    include_weapon( "mp5k_upgraded_zm", 0 );
    include_weapon( "mp40_zm", 0 );
    include_weapon( "mp40_upgraded_zm", 0 );
    include_weapon( "beretta93r_zm", 0 );
    include_weapon( "beretta93r_upgraded_zm", 0 );
    include_weapon( "pdw57_zm", 0 );
    include_weapon( "pdw57_upgraded_zm", 0 );
    include_weapon( "kard_zm" );
    include_weapon( "kard_upgraded_zm", 0 );
    include_weapon( "fivesevendw_zm" );
    include_weapon( "fivesevendw_upgraded_zm", 0 );
    include_weapon( "870mcs_zm", 0 );
    include_weapon( "870mcs_upgraded_zm", 0 );
    include_weapon( "rottweil72_zm", 0 );
    include_weapon( "rottweil72_upgraded_zm", 0 );
    include_weapon( "srm1216_zm" );
    include_weapon( "srm1216_upgraded_zm", 0 );
    include_weapon( "saiga12_zm" );
    include_weapon( "saiga12_upgraded_zm", 0 );
    include_weapon( "tar21_zm" );
    include_weapon( "tar21_upgraded_zm", 0 );
    include_weapon( "galil_zm" );
    include_weapon( "galil_upgraded_zm", 0 );
    include_weapon( "hk416_zm" );
    include_weapon( "hk416_upgraded_zm", 0 );
    include_weapon( "sa58_zm" );
    include_weapon( "sa58_upgraded_zm", 0 );
    include_weapon( "barretm82_zm" );
    include_weapon( "barretm82_upgraded_zm", 0 );
    include_weapon( "dsr50_zm" );
    include_weapon( "dsr50_upgraded_zm", 0 );
    include_weapon( "rpd_zm" );
    include_weapon( "rpd_upgraded_zm", 0 );
    include_weapon( "hamr_zm" );
    include_weapon( "hamr_upgraded_zm", 0 );
    include_weapon( "usrpg_zm" );
    include_weapon( "usrpg_upgraded_zm", 0 );
    include_weapon( "m32_zm" );
    include_weapon( "m32_upgraded_zm", 0 );
    include_weapon( "minigun_zm" );
    include_weapon( "zombie_black_hole_bomb" );
    include_weapon( "zombie_quantum_bomb" );
    include_weapon( "ray_gun_zm" );
    include_weapon( "ray_gun_upgraded_zm", 0 );
    include_weapon( "microwavegundw_zm" );
    include_weapon( "microwavegundw_upgraded_zm", 0 );
    include_weapon( "knife_ballistic_zm" );
    include_weapon( "knife_ballistic_upgraded_zm", 0 );
    include_weapon( "knife_ballistic_bowie_zm", 0 );
    include_weapon( "knife_ballistic_bowie_upgraded_zm", 0 );
}

register_clientfields()
{
    registerclientfield( "scriptmover", "digger_moving", 7000, 1, "int", clientscripts\mp\zm_moon_digger::digger_moving_earthquake_rumble );
    registerclientfield( "scriptmover", "digger_digging", 7000, 1, "int", clientscripts\mp\zm_moon_digger::digger_digging_earthquake_rumble );
    registerclientfield( "scriptmover", "digger_arm_fx", 7000, 1, "int", clientscripts\mp\zm_moon_digger::digger_arm_fx );
    registerclientfield( "scriptmover", "dome_malfunction_pad", 7000, 1, "int", ::dome_malfunction_pad );
    registerclientfield( "toplayer", "soul_swap", 7000, 1, "int", clientscripts\mp\zm_moon_sq::soul_swap );
    registerclientfield( "toplayer", "gasp_rumble", 7000, 1, "int", ::player_gasp_rumble );
    registerclientfield( "actor", "low_gravity", 7000, 1, "int", clientscripts\mp\zm_moon_gravity::zombie_low_gravity );
    registerclientfield( "actor", "ctt", 7000, 1, "int", clientscripts\mp\zm_moon_sq::zombie_release_soul );
}

include_equipment_for_level()
{
    clientscripts\mp\zombies\_zm_equipment::include_equipment( "equip_gasmask_zm" );
    clientscripts\mp\zombies\_zm_equipment::include_equipment( "equip_hacker_zm" );
}

disable_deadshot( i_local_client_num )
{
    while ( !self hasdobj( i_local_client_num ) )
        wait 0.05;

    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
    {
        if ( self == players[i] )
            self clearalternateaimparams();
    }
}

moon_player_connect( i_local_client_num )
{
    self endon( "disconnect" );

    while ( !clienthassnapshot( i_local_client_num ) )
        wait 0.05;

    while ( !self hasdobj( i_local_client_num ) )
        wait 0.05;

    if ( i_local_client_num != 0 )
        return;

    self thread disable_deadshot( i_local_client_num );
}

radar_dish_init()
{
    radar_dish = getentarray( 0, "zombie_cosmodrome_radar_dish", "targetname" );

    if ( isdefined( radar_dish ) )
    {
        for ( i = 0; i < radar_dish.size; i++ )
            radar_dish[i] thread radar_dish_rotate();
    }
}

radar_dish_rotate()
{
    wait 0.1;

    while ( true )
    {
        self rotateyaw( 360, randomfloatrange( 60, 120 ) );
        self waittill( "rotatedone" );
    }
}

receiving_bay_doors_init()
{
    waitforallclients();
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
    {
        players[i] thread receiving_bay_doors( i );
        players[i] thread computer_screens_power( i );
    }
}

receiving_bay_doors( localclientnum )
{
    level waittill( "power_on" );
    doors = getentarray( localclientnum, "receiving_bay_doors", "targetname" );

    for ( i = 0; i < doors.size; i++ )
    {
        if ( isdefined( doors[i].script_vector ) )
        {
            doors[i] playsound( 0, "evt_loading_door_start" );
            doors[i] playloopsound( "evt_loading_door_loop", 0.5 );
            doors[i] moveto( doors[i].origin + doors[i].script_vector, 3 );
            doors[i] thread stop_loop_play_end();
        }
    }
}

stop_loop_play_end()
{
    wait 2.6;
    self stoploopsound( 0.5 );
    self playsound( 0, "evt_loading_door_end" );
}

computer_screens_power( localclientnum )
{
    screens = getentarray( localclientnum, "moon_comp_screens", "targetname" );

    for ( i = 0; i < screens.size; i++ )
        screens[i] hide();

    level waittill( "power_on" );

    for ( i = 0; i < screens.size; i++ )
        screens[i] show();
}

jump_pad_activate()
{
    level.power_on = 0;
    level waittill( "ZPO" );
    level.power_on = 1;

    for ( i = 0; i < level.localplayers.size; i++ )
        jump_pad_start_fx( i );
}

no_mans_land_sky()
{
    while ( true )
    {
        level waittill( "NMS", lcn );

        if ( isdefined( lcn ) && lcn != 0 )
            continue;

        if ( isdefined( level._dte_done ) )
            continue;

        setsaveddvar( "r_skyTransition", 1 );
        level notify( "H_E" );
    }
}

moon_sky()
{
    while ( true )
    {
        level waittill( "MMS", lcn );

        if ( isdefined( lcn ) && lcn != 0 )
            continue;

        setsaveddvar( "r_skyTransition", 0 );
        level notify( "S_E" );
    }
}

jump_pad_start_fx( int_local_player_num )
{
    player = getlocalplayers()[int_local_player_num];

    if ( !isdefined( player ) )
        return;

    moon_jump_pads = getentarray( int_local_player_num, "jump_pads", "targetname" );

    if ( isdefined( moon_jump_pads ) && moon_jump_pads.size > 0 )
    {
        for ( i = 0; i < moon_jump_pads.size; i++ )
        {
            moon_jump_pads[i]._fx = spawn( int_local_player_num, moon_jump_pads[i].origin, "script_model" );
            moon_jump_pads[i]._fx.angles = moon_jump_pads[i].angles;
            moon_jump_pads[i]._fx setmodel( "tag_origin" );
            moon_jump_pads[i]._glow = playfxontag( int_local_player_num, level._effect["jump_pad_active"], moon_jump_pads[i]._fx, "tag_origin" );
        }
    }
}

dome_malfunction_pad( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( localclientnum != 0 )
        return;

    if ( newval )
    {
        player = getlocalplayers()[localclientnum];

        if ( !isdefined( player ) )
            return;

        for ( x = 0; x < level.localplayers.size; x++ )
        {
            mal_pad = undefined;
            closest = 999999;
            jump_pads = getentarray( x, "jump_pads", "targetname" );

            for ( i = 0; i < jump_pads.size; i++ )
            {
                pad = jump_pads[i];
                dist = distance2d( self.origin, pad.origin );

                if ( dist < closest )
                {
                    mal_pad = pad;
                    closest = dist;
                }
            }

            if ( isdefined( mal_pad._fx ) )
            {
                rand = randomintrange( 4, 7 );

                for ( i = 0; i < rand; i++ )
                {
                    stopfx( x, mal_pad._glow );
                    wait( randomfloatrange( 0.05, 0.15 ) );
                    mal_pad playsound( 0, "evt_electrical_surge" );
                    mal_pad._glow = playfxontag( x, level._effect["jump_pad_active"], mal_pad._fx, "tag_origin" );
                    wait( randomfloatrange( 0.05, 0.15 ) );
                }

                stopfx( x, mal_pad._glow );
            }
        }
    }
    else
    {
        player = getlocalplayers()[localclientnum];

        if ( !isdefined( player ) )
            return;

        for ( x = 0; x < level.localplayers.size; x++ )
        {
            mal_pad = undefined;
            closest = 999999;
            jump_pads = getentarray( x, "jump_pads", "targetname" );

            for ( i = 0; i < jump_pads.size; i++ )
            {
                pad = jump_pads[i];
                dist = distance2d( self.origin, pad.origin );

                if ( dist < closest )
                {
                    mal_pad = pad;
                    closest = dist;
                }
            }

            if ( isdefined( mal_pad._fx ) )
            {
                rand = randomintrange( 4, 7 );

                for ( i = 0; i < rand; i++ )
                {
                    mal_pad playsound( 0, "evt_electrical_surge" );
                    mal_pad._glow = playfxontag( x, level._effect["jump_pad_active"], mal_pad._fx, "tag_origin" );
                    wait( randomfloatrange( 0.05, 0.15 ) );
                    stopfx( x, mal_pad._glow );
                    wait( randomfloatrange( 0.05, 0.15 ) );
                }

                mal_pad._glow = playfxontag( x, level._effect["jump_pad_active"], mal_pad._fx, "tag_origin" );
            }
        }
    }
}

player_gasp_rumble( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( !self islocalplayer() )
        return;

    if ( !isdefined( self getlocalclientnumber() ) )
        return;

    if ( newval )
    {
        if ( randomint( 100 ) > 70 )
            self playrumbleonentity( localclientnum, "damage_light" );
        else
            self playrumbleonentity( localclientnum, "damage_heavy" );
    }
}

show_earth()
{
    while ( true )
    {
        level waittill( "S_E" );
        level thread do_show_earth();
    }
}

do_show_earth()
{
    for ( i = 0; i < level.localplayers.size; i++ )
    {
        player = getlocalplayers()[i];

        if ( !isdefined( player ) )
            continue;

        player._earth = spawn( i, ( -22060.8, -121800, 34463.4 ), "script_model" );
        player._earth.angles = ( 18, 78, 22 );
        player._earth setmodel( "p_zom_moon_earth" );
    }
}

hide_earth()
{
    while ( true )
    {
        level waittill( "H_E" );
        level thread do_hide_earth();
    }
}

do_hide_earth()
{
    for ( i = 0; i < level.localplayers.size; i++ )
    {
        player = getlocalplayers()[i];

        if ( !isdefined( player ) )
            continue;

        if ( isdefined( player._earth ) )
            player._earth delete();
    }
}

show_destroyed_earth()
{
    while ( true )
    {
        level waittill( "SDE" );
        level thread do_show_destroyed_earth();
    }
}

do_show_destroyed_earth()
{
    for ( i = 0; i < level.localplayers.size; i++ )
    {
        player = getlocalplayers()[i];

        if ( !isdefined( player ) )
            continue;

        player._earth = spawn( i, ( -22060.8, -121800, 34463.4 ), "script_model" );
        player._earth.angles = ( 18, 78, 22 );
        player._earth setmodel( "p_zom_moon_earth_dest" );
    }
}

hide_destroyed_earth()
{
    while ( true )
    {
        level waittill( "HDE" );
        level thread do_hide_destroyed_earth();
    }
}

do_hide_destroyed_earth()
{
    for ( i = 0; i < level.localplayers.size; i++ )
    {
        player = getlocalplayers()[i];

        if ( !isdefined( player ) )
            continue;

        if ( isdefined( player._earth ) )
            player._earth delete();
    }
}

include_powerups()
{
    include_powerup( "nuke" );
    include_powerup( "insta_kill" );
    include_powerup( "double_points" );
    include_powerup( "full_ammo" );
    include_powerup( "carpenter" );
    include_powerup( "fire_sale" );
}

watch_for_power()
{
    if ( is_true( level.createfx_enabled ) )
        return;

    for ( looped_once = 0; 1; looped_once = 1 )
    {
        if ( !level getclientfield( "zombie_power_on" ) )
        {
            level.power_on = 0;

            if ( looped_once )
                level notify( "power_controlled_light" );

            level waittill_any( "power_on", "pwr", "ZPO" );
        }

        level notify( "power_controlled_light" );
        level waittill_any( "pwo", "ZPOff" );
    }
}

init_level_specific_wall_buy_fx()
{

}
