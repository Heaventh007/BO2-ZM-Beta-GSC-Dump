// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_music;

main()
{
    level thread init_excavator_consoles();
    level thread hide_diggers();
    level thread show_diggers();
    level thread wait_for_biodome_breach();
    level thread stop_all_digger_rumble();
}

digger_moving_earthquake_rumble( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( localclientnum != 0 )
        return;

    if ( newval )
    {
        for ( i = 0; i < level.localplayers.size; i++ )
            level thread do_digger_moving_earthquake_rumble( i, self );
    }
    else
    {
        if ( isdefined( self.headlight1 ) )
        {
            for ( i = 0; i < level.localplayers.size; i++ )
            {
                stopfx( i, self.headlight1 );
                stopfx( i, self.headlight2 );
                stopfx( i, self.blink1 );
                stopfx( i, self.blink2 );

                if ( isdefined( self.tread_fx ) )
                    stopfx( i, self.tread_fx );
            }
        }

        self notify( "stop_moving_rumble" );
    }
}

wait_for_biodome_breach()
{
    level waittill( "BIO" );

    for ( i = 0; i < level.localplayers.size; i++ )
    {
        player = getlocalplayers()[i];

        if ( !isdefined( player ) )
            continue;

        piece = getent( i, "biodome_breached", "targetname" );

        if ( !isdefined( piece ) )
            continue;

        if ( distancesquared( player.origin, piece.origin ) < 6250000 )
        {
            player earthquake( 0.5, 3, player.origin, 1500 );
            player thread bio_breach_rumble( i );
        }

        piece setmodel( "p_zom_moon_biodome_hole_broken" );
        level notify( "sl9" );
        level notify( "sl10" );
    }
}

bio_breach_rumble( localclientnum )
{
    self endon( "disconnect" );

    for ( i = 0; i < 10; i++ )
    {
        self playrumbleonentity( localclientnum, "damage_heavy" );
        wait( randomfloatrange( 0.1, 0.2 ) );
    }
}

digger_digging_earthquake_rumble( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( localclientnum != 0 )
        return;

    if ( newval )
    {
        for ( i = 0; i < level.localplayers.size; i++ )
            level thread do_digger_digging_earthquake_rumble( i, self );
    }
    else
        self notify( "stop_digging_rumble" );
}

do_digger_moving_earthquake_rumble( localclientnum, quake_ent )
{
    quake_ent endon( "entityshutdown" );
    quake_ent endon( "stop_moving_rumble" );
    dist_sqd = 6250000;
    quake_ent.headlight1 = playfxontag( localclientnum, level._effect["exca_beam"], quake_ent, "tag_fx_headlight1" );
    quake_ent.headlight2 = playfxontag( localclientnum, level._effect["exca_beam"], quake_ent, "tag_fx_headlight2" );
    quake_ent.blink1 = playfxontag( localclientnum, level._effect["exca_blink"], quake_ent, "tag_fx_blink1" );
    quake_ent.blink2 = playfxontag( localclientnum, level._effect["exca_blink"], quake_ent, "tag_fx_blink2" );
    quake_ent.tread_fx = playfxontag( localclientnum, level._effect["digger_treadfx_fwd"], quake_ent, "tag_origin" );
    player = getlocalplayers()[localclientnum];

    if ( !isdefined( player ) )
        return;

    while ( true )
    {
        if ( !isdefined( player ) )
            return;

        player earthquake( randomfloatrange( 0.15, 0.25 ), 3.0, quake_ent.origin, 2500 );

        if ( distancesquared( quake_ent.origin, player.origin ) < dist_sqd )
            player playrumbleonentity( localclientnum, "slide_rumble" );

        wait( randomfloatrange( 0.05, 0.15 ) );
    }
}

do_digger_digging_earthquake_rumble( localclientnum, quake_ent )
{
    quake_ent endon( "entityshutdown" );
    quake_ent endon( "stop_digging_rumble" );
    level endon( "stop_digger_rumble" );
    player = getlocalplayers()[localclientnum];

    if ( !isdefined( player ) )
        return;

    count = 0;
    dist = 2250000;

    while ( true )
    {
        if ( !isdefined( player ) )
            return;

        player earthquake( randomfloatrange( 0.12, 0.17 ), 3.0, quake_ent.origin, 1500 );

        if ( distancesquared( quake_ent.origin, player.origin ) < dist && abs( quake_ent.origin[2] - player.origin[2] ) < 750 )
            player playrumbleonentity( localclientnum, "grenade_rumble" );

        wait( randomfloatrange( 0.1, 0.25 ) );
    }
}

digger_arm_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( localclientnum != 0 )
        return;

    if ( newval )
    {
        for ( i = 0; i < level.localplayers.size; i++ )
            level thread do_digger_arm_fx( i, self );
    }
    else if ( isdefined( self.blink1 ) )
    {
        for ( i = 0; i < level.localplayers.size; i++ )
        {
            stopfx( i, self.blink1 );
            stopfx( i, self.blink2 );
        }
    }
}

do_digger_arm_fx( localclientnum, ent )
{
    ent endon( "entityshutdown" );
    player = getlocalplayers()[localclientnum];

    if ( !isdefined( player ) )
        return;

    ent.blink1 = playfxontag( localclientnum, level._effect["exca_blink"], ent, "tag_fx_blink3" );
    ent.blink2 = playfxontag( localclientnum, level._effect["exca_blink"], ent, "tag_fx_blink4" );
}

hide_diggers()
{
    while ( true )
    {
        level waittill( "DH" );

        for ( i = 0; i < level.localplayers.size; i++ )
            level thread digger_visibility_toggle( i, "hide" );
    }
}

show_diggers()
{
    while ( true )
    {
        level waittill( "DS" );

        for ( i = 0; i < level.localplayers.size; i++ )
            level thread digger_visibility_toggle( i, "show" );
    }
}

digger_visibility_toggle( localclient, visible )
{
    diggers = getentarray( localclient, "digger_body", "targetname" );
    tracks = getentarray( localclient, "tracks", "targetname" );

    switch ( visible )
    {
        case "hide":
            for ( i = 0; i < tracks.size; i++ )
                tracks[i] hide();

            for ( i = 0; i < diggers.size; i++ )
            {
                arm = getent( localclient, diggers[i].target, "targetname" );
                blade_center = getent( localclient, arm.target, "targetname" );
                blade = getent( localclient, blade_center.target, "targetname" );
                diggers[i] hide();
                arm hide();
                blade hide();
            }

            break;
        case "show":
            for ( i = 0; i < tracks.size; i++ )
                tracks[i] show();

            for ( i = 0; i < diggers.size; i++ )
            {
                arm = getent( localclient, diggers[i].target, "targetname" );
                blade_center = getent( localclient, arm.target, "targetname" );
                blade = getent( localclient, blade_center.target, "targetname" );
                diggers[i] show();
                arm show();
                blade show();
            }

            break;
    }
}

init_excavator_consoles()
{
    wait 15;

    for ( index = 0; index < level.localplayers.size; index++ )
    {
        level thread excavator_console( index, "tunnel" );
        level thread excavator_console( index, "hangar" );
        level thread excavator_console( index, "biodome" );
    }
}

excavator_console( localclientnum, name )
{
    player = getlocalplayers()[localclientnum];

    if ( !isdefined( player ) )
    {
/#
        println( "**MOON_CLIENT** NO PLAYER : " + name + "_console" );
#/
        return;
    }

    console = getent( localclientnum, name + "_console", "targetname" );
    str_wait = undefined;
    str_off = undefined;

    switch ( name )
    {
        case "tunnel":
            str_wait = "TCA";
            str_off = "TCO";
            break;
        case "hangar":
            str_wait = "HCA";
            str_off = "HCO";
            break;
        case "biodome":
            str_wait = "BCA";
            str_off = "BCO";
            break;
    }

    console.dlight = playfxontag( localclientnum, level._effect["panel_off"], console, "tag_origin" );

    while ( true )
    {
        level waittill( str_wait );
        stopfx( localclientnum, console.dlight );
        console.dlight = playfxontag( localclientnum, level._effect["panel_on"], console, "tag_origin" );
        level waittill( str_off );
        stopfx( localclientnum, console.dlight );
        console.dlight = playfxontag( localclientnum, level._effect["panel_off"], console, "tag_origin" );
    }
}

stop_all_digger_rumble()
{
    level waittill( "EDR" );
    level notify( "stop_digger_rumble" );
}
