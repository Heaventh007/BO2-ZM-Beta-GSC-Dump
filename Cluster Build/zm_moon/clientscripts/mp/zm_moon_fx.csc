// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_fx;
#include clientscripts\mp\_music;
#include clientscripts\mp\createfx\zm_moon_fx;
#include clientscripts\mp\zm_moon_fx;

main()
{
    precache_createfx_fx();
    clientscripts\mp\createfx\zm_moon_fx::main();
    clientscripts\mp\_fx::reportnumeffects();
    precache_scripted_fx();
    disablefx = getdvarint( #"_id_C9B177D6" );

    if ( !isdefined( disablefx ) || disablefx <= 0 )
        precache_scripted_fx();

    level thread fog_triggers_setup();
    level thread airlock_fx_init();
    level thread breach_receiving_fx();
    level thread breach_labs_lower_fx();
    level thread breach_labs_upper_fx();
    level thread power_on_spinning_lights();
}

fog_triggers_setup()
{
    waitforclient( 0 );
    wait 3;
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
        level thread moon_fog_triggers_init( i );
}

airlock_fx_init()
{
    waitforallclients();
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
        players[i] thread airlock_fx( i );
}

airlock_fx( localclientnum )
{
    level waittill( "power_on" );
    airlock_fx = getentarray( localclientnum, "airlock_jambs_fx", "targetname" );

    for ( i = 0; i < airlock_fx.size; i++ )
    {
        forwardvec = vectornormalize( anglestoforward( airlock_fx[i].angles ) );
        playfx( localclientnum, level._effect["airlock_fx"], airlock_fx[i].origin, forwardvec );
    }
}

precache_scripted_fx()
{
    level._effect["switch_sparks"] = loadfx( "env/electrical/fx_elec_wire_spark_burst" );
    level._effect["zapper_fx"] = loadfx( "maps/zombie/fx_zombie_zapper_powerbox_on" );
    level._effect["zapper_wall"] = loadfx( "maps/zombie/fx_zombie_zapper_wall_control_on" );
    level._effect["elec_trail_one_shot"] = loadfx( "maps/zombie/fx_zombie_elec_trail_oneshot" );
    level._effect["zapper_light_ready"] = loadfx( "maps/zombie/fx_zombie_zapper_light_green" );
    level._effect["zapper_light_notready"] = loadfx( "maps/zombie/fx_zombie_zapper_light_red" );
    level._effect["wire_sparks_oneshot"] = loadfx( "electrical/fx_elec_wire_spark_dl_oneshot" );
    level._effect["airlock_fx"] = loadfx( "maps/zombie_moon/fx_moon_airlock_door_forcefield" );
    level._effect["eye_glow"] = loadfx( "misc/fx_zombie_eye_single" );
    level._effect["headshot"] = loadfx( "impacts/fx_flesh_hit" );
    level._effect["headshot_nochunks"] = loadfx( "misc/fx_zombie_bloodsplat" );
    level._effect["bloodspurt"] = loadfx( "misc/fx_zombie_bloodspurt" );
    level._effect["animscript_gib_fx"] = loadfx( "weapon/bullet/fx_flesh_gib_fatal_01" );
    level._effect["animscript_gibtrail_fx"] = loadfx( "trail/fx_trail_blood_streak" );
    level._effect["jump_pad_active"] = loadfx( "maps/zombie_moon/fx_moon_jump_pad_on" );
    level._effect["glass_impact"] = loadfx( "maps/zombie_moon/fx_moon_break_window" );
    level._effect["fx_weak_sauce_trail"] = loadfx( "maps/zombie_temple/fx_ztem_weak_sauce_trail" );
    level._effect["soul_swap_trail"] = loadfx( "maps/zombie_moon/fx_moon_soul_swap" );
    level._effect["vrill_glow"] = loadfx( "maps/zombie_moon/fx_moon_vril_glow" );
    level._effect["rise_billow_lg"] = loadfx( "maps/zombie_moon/fx_moon_body_dirt_billowing" );
    level._effect["rise_dust_lg"] = loadfx( "maps/zombie_moon/fx_moon_body_dust_falling" );
    level._effect["rise_burst_lg"] = loadfx( "maps/zombie_moon/fx_moon_hand_dirt_burst" );
    level._effect["exca_beam"] = loadfx( "maps/zombie_moon/fx_digger_light_beam" );
    level._effect["exca_blink"] = loadfx( "maps/zombie_moon/fx_beacon_light_red" );
    level._effect["digger_treadfx_fwd"] = loadfx( "maps/zombie_moon/fx_digger_treadfx_fwd" );
    level._effect["digger_treadfx_bkwd"] = loadfx( "maps/zombie_moon/fx_digger_treadfx_rev" );
    level._effect["panel_on"] = loadfx( "maps/zombie_moon/fx_moon_digger_panel_on" );
    level._effect["panel_off"] = loadfx( "maps/zombie_moon/fx_moon_digger_panel_off" );
    level._effect["lght_marker_flare"] = loadfx( "maps/zombie/fx_zombie_coast_marker_fl" );
    level._effect["test_spin_fx"] = loadfx( "env/light/fx_light_warning" );
    level._effect["blue_eyes"] = loadfx( "maps/zombie/fx_zombie_eye_single_blue" );
    level._effect["osc_button_glow"] = loadfx( "maps/zombie_moon/fx_moon_button_console_glow" );
}

precache_createfx_fx()
{
    level._effect["fx_mp_fog_xsm_int"] = loadfx( "maps/zombie_old/fx_mp_fog_xsm_int" );
    level._effect["fx_moon_fog_spawn_closet"] = loadfx( "maps/zombie_moon/fx_moon_fog_spawn_closet" );
    level._effect["fx_zmb_fog_thick_300x300"] = loadfx( "maps/zombie/fx_zmb_fog_thick_300x300" );
    level._effect["fx_zmb_fog_thick_600x600"] = loadfx( "maps/zombie/fx_zmb_fog_thick_600x600" );
    level._effect["fx_moon_fog_canyon"] = loadfx( "maps/zombie_moon/fx_moon_fog_canyon" );
    level._effect["fx_moon_vent_wall_mist"] = loadfx( "maps/zombie_moon/fx_moon_vent_wall_mist" );
    level._effect["fx_dust_motes_blowing"] = loadfx( "env/debris/fx_dust_motes_blowing" );
    level._effect["fx_zmb_coast_sparks_int_runner"] = loadfx( "maps/zombie/fx_zmb_coast_sparks_int_runner" );
    level._effect["fx_moon_floodlight_narrow"] = loadfx( "maps/zombie_moon/fx_moon_floodlight_narrow" );
    level._effect["fx_moon_floodlight_wide"] = loadfx( "maps/zombie_moon/fx_moon_floodlight_wide" );
    level._effect["fx_moon_tube_light"] = loadfx( "maps/zombie_moon/fx_moon_tube_light" );
    level._effect["fx_moon_lamp_glow"] = loadfx( "maps/zombie_moon/fx_moon_lamp_glow" );
    level._effect["fx_moon_trap_switch_light_glow"] = loadfx( "maps/zombie_moon/fx_moon_trap_switch_light_glow" );
    level._effect["fx_moon_teleporter_beam"] = loadfx( "maps/zombie_moon/fx_moon_teleporter_beam" );
    level._effect["fx_moon_teleporter_start"] = loadfx( "maps/zombie_moon/fx_moon_teleporter_start" );
    level._effect["fx_moon_teleporter_pad_start"] = loadfx( "maps/zombie_moon/fx_moon_teleporter_pad_start" );
    level._effect["fx_moon_teleporter2_beam"] = loadfx( "maps/zombie_moon/fx_moon_teleporter2_beam" );
    level._effect["fx_moon_teleporter2_pad_start"] = loadfx( "maps/zombie_moon/fx_moon_teleporter2_pad_start" );
    level._effect["fx_moon_pyramid_egg"] = loadfx( "maps/zombie_moon/fx_moon_pyramid_egg" );
    level._effect["fx_moon_pyramid_drop"] = loadfx( "maps/zombie_moon/fx_moon_pyramid_drop" );
    level._effect["fx_moon_pyramid_opening"] = loadfx( "maps/zombie_moon/fx_moon_pyramid_opening" );
    level._effect["fx_moon_ceiling_cave_dust"] = loadfx( "maps/zombie_moon/fx_moon_ceiling_cave_dust" );
    level._effect["fx_moon_ceiling_cave_collapse"] = loadfx( "maps/zombie_moon/fx_moon_ceiling_cave_collapse" );
    level._effect["fx_moon_digger_dig_dust"] = loadfx( "maps/zombie_moon/fx_moon_digger_dig_dust" );
    level._effect["fx_moon_airlock_hatch_forcefield"] = loadfx( "maps/zombie_moon/fx_moon_airlock_hatch_forcefield" );
    level._effect["fx_moon_biodome_ceiling_breach"] = loadfx( "maps/zombie_moon/fx_moon_biodome_ceiling_breach" );
    level._effect["fx_moon_biodome_breach_dirt"] = loadfx( "maps/zombie_moon/fx_moon_biodome_breach_dirt" );
    level._effect["fx_moon_breach_debris_room_os"] = loadfx( "maps/zombie_moon/fx_moon_breach_debris_room_os" );
    level._effect["fx_moon_breach_debris_out_os"] = loadfx( "maps/zombie_moon/fx_moon_breach_debris_out_os" );
    level._effect["fx_earth_destroyed"] = loadfx( "maps/zombie_moon/fx_earth_destroyed" );
    level._effect["fx_quad_vent_break"] = loadfx( "maps/zombie/fx_zombie_crawler_vent_break" );
}

power_on_spinning_lights()
{
    level waittill( "power_on" );
}

trap_fx_monitor( name, side, trap_type )
{
    while ( true )
    {
        level waittill( name );
        points = getstructarray( name, "targetname" );

        for ( i = 0; i < points.size; i++ )
            points[i] thread electric_trap_fx( name, side, trap_type );
    }
}

breach_receiving_fx()
{
    level waittill( "Az1" );

    if ( !is_true( level.power_on ) )
        level waittill( "ZPO" );

    level notify( "sl0" );
}

breach_labs_lower_fx()
{
    level waittill( "Az4a" );

    if ( !is_true( level.power_on ) )
        level waittill( "ZPO" );

    level notify( "sl5" );
    level notify( "sl6" );
}

breach_labs_upper_fx()
{
    level waittill( "Az4b" );

    if ( !is_true( level.power_on ) )
        level waittill( "ZPO" );

    level notify( "sl4" );
}

electric_trap_fx( name, side, trap_type )
{
    ang = self.angles;
    forward = anglestoforward( ang );
    up = anglestoup( ang );

    if ( isdefined( self.loopfx ) )
    {
        for ( i = 0; i < self.loopfx.size; i++ )
            self.loopfx[i] delete();

        self.loopfx = [];
    }

    if ( !isdefined( self.loopfx ) )
        self.loopfx = [];

    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
    {
        switch ( trap_type )
        {
            case "electric":
                self.loopfx[i] = spawnfx( i, level._effect["zapper"], self.origin, 0, forward, up );
                break;
            case "fire":
            default:
                self.loopfx[i] = spawnfx( i, level._effect["fire_trap_med"], self.origin, 0, forward, up );
                break;
        }
    }

    level waittill( side + "off" );

    for ( i = 0; i < self.loopfx.size; i++ )
        self.loopfx[i] delete();

    self.loopfx = [];
}

moon_fog_triggers_init( localclientnum )
{
    exterior_array = getentarray( localclientnum, "zombie_moonExterior", "targetname" );
    array_thread( exterior_array, ::fog_trigger, ::moon_exterior_fog_change );
    moon_interior_array = getentarray( localclientnum, "zombie_moonInterior", "targetname" );
    array_thread( moon_interior_array, ::fog_trigger, ::moon_interior_fog_change );
    moon_biodome_array = getentarray( localclientnum, "zombie_moonBiodome", "targetname" );
    array_thread( moon_biodome_array, ::fog_trigger, ::moon_biodome_fog_change );
    moon_biodome_array = getentarray( localclientnum, "zombie_moonTunnels", "targetname" );
    array_thread( moon_biodome_array, ::fog_trigger, ::moon_tunnels_fog_change );
    nml_array = getentarray( localclientnum, "zombie_nmlVision", "targetname" );

    if ( isdefined( nml_array ) && nml_array.size > 0 )
        array_thread( nml_array, ::fog_trigger, ::moon_nml_fog_change );
}

fog_trigger( change_func )
{
    while ( true )
    {
        self waittill( "trigger", who );

        if ( who islocalplayer() )
            self thread trigger_thread( who, change_func );
    }
}

moon_exterior_fog_change( ent_player )
{
    if ( !isdefined( ent_player ) )
        return;

    local_clientnum = ent_player getlocalclientnumber();
    ent_player endon( "entityshutdown" );
    start_dist = 2098.71;
    half_dist = 1740.12;
    half_height = 1332.23;
    base_height = 576.887;
    fog_r = 0.0196078;
    fog_g = 0.0235294;
    fog_b = 0.0352941;
    fog_scale = 4.1367;
    sun_col_r = 0.247;
    sun_col_g = 0.235;
    sun_col_b = 0.16;
    sun_dir_x = 0.796421;
    sun_dir_y = 0.425854;
    sun_dir_z = 0.429374;
    sun_start_ang = 0;
    sun_stop_ang = 55;
    time = 0;
    max_fog_opacity = 0.95;
    setclientvolumetricfog( start_dist, half_dist, half_height, base_height, fog_r, fog_g, fog_b, fog_scale, sun_col_r, sun_col_g, sun_col_b, sun_dir_x, sun_dir_y, sun_dir_z, sun_start_ang, sun_stop_ang, time, max_fog_opacity );
    sunlight = 8;
    sundirection = ( -16.28, 56.06, 0 );
    suncolor = ( 0.655, 0.768, 0.817 );
    setsaveddvar( "r_lightTweakSunLight", sunlight );
    setsaveddvar( "r_skyColorTemp", 6400 );

    if ( !isdefined( ent_player._previous_vision ) )
        ent_player._previous_vision = "zme";

    new_vision = "zme";
    ent_player clientscripts\mp\zm_moon_fx::moon_vision_set( ent_player._previous_vision, new_vision, local_clientnum, self.script_int );
    ent_player._previous_vision = "zme";
}

moon_interior_fog_change( ent_player )
{
    if ( !isdefined( ent_player ) )
        return;

    local_clientnum = ent_player getlocalclientnumber();
    ent_player endon( "entityshutdown" );
    start_dist = 2098.71;
    half_dist = 1740.12;
    half_height = 1332.23;
    base_height = 576.887;
    fog_r = 0.0196078;
    fog_g = 0.0235294;
    fog_b = 0.0352941;
    fog_scale = 4.1367;
    sun_col_r = 0.247;
    sun_col_g = 0.235;
    sun_col_b = 0.16;
    sun_dir_x = 0.796421;
    sun_dir_y = 0.425854;
    sun_dir_z = 0.429374;
    sun_start_ang = 0;
    sun_stop_ang = 55;
    time = 0;
    max_fog_opacity = 0.95;
    setclientvolumetricfog( start_dist, half_dist, half_height, base_height, fog_r, fog_g, fog_b, fog_scale, sun_col_r, sun_col_g, sun_col_b, sun_dir_x, sun_dir_y, sun_dir_z, sun_start_ang, sun_stop_ang, time, max_fog_opacity );
    sunlight = 8;
    sundirection = ( -16.28, 56.06, 0 );
    suncolor = ( 0.655, 0.768, 0.817 );
    setsaveddvar( "r_lightTweakSunLight", sunlight );
    setsaveddvar( "r_skyColorTemp", 6400 );

    if ( !isdefined( ent_player._previous_vision ) )
        ent_player._previous_vision = "zmi";

    new_vision = "zmi";
    ent_player clientscripts\mp\zm_moon_fx::moon_vision_set( ent_player._previous_vision, new_vision, local_clientnum, self.script_int );
    ent_player._previous_vision = "zmi";
}

moon_biodome_fog_change( ent_player )
{
    if ( !isdefined( ent_player ) )
        return;

    local_clientnum = ent_player getlocalclientnumber();
    ent_player endon( "entityshutdown" );
    start_dist = 65.3744;
    half_dist = 860.241;
    half_height = 35.1158;
    base_height = 116.637;
    fog_r = 0.117647;
    fog_g = 0.137255;
    fog_b = 0.101961;
    fog_scale = 2.96282;
    sun_col_r = 0.341176;
    sun_col_g = 0.231373;
    sun_col_b = 0.141176;
    sun_dir_x = 0.315232;
    sun_dir_y = 0.132689;
    sun_dir_z = -0.939693;
    sun_start_ang = 0;
    sun_stop_ang = 44.4323;
    time = 0;
    max_fog_opacity = 0.836437;
    setclientvolumetricfog( start_dist, half_dist, half_height, base_height, fog_r, fog_g, fog_b, fog_scale, sun_col_r, sun_col_g, sun_col_b, sun_dir_x, sun_dir_y, sun_dir_z, sun_start_ang, sun_stop_ang, time, max_fog_opacity );
    sunlight = 1.13;
    sundirection = ( -33.34, -38.56, 0 );
    setsaveddvar( "r_lightTweakSunLight", sunlight );
    setsaveddvar( "r_skyColorTemp", 3600 );
    setsaveddvar( "r_lightGridEnableTweaks", 1 );
    setsaveddvar( "r_lightGridIntensity", 1.25 );
    setsaveddvar( "r_lightGridContrast", 0.45 );

    if ( !isdefined( ent_player._previous_vision ) )
        ent_player._previous_vision = "zmb";

    new_vision = "zmb";
    ent_player clientscripts\mp\zm_moon_fx::moon_vision_set( ent_player._previous_vision, new_vision, local_clientnum, self.script_int );
    ent_player._previous_vision = "zmb";
}

moon_tunnels_fog_change( ent_player )
{
    if ( !isdefined( ent_player ) )
        return;

    local_clientnum = ent_player getlocalclientnumber();
    ent_player endon( "entityshutdown" );
    start_dist = 1413.46;
    half_dist = 4300.81;
    half_height = 32.2476;
    base_height = -238.873;
    fog_r = 0.192157;
    fog_g = 0.137255;
    fog_b = 0.180392;
    fog_scale = 3.2984;
    sun_col_r = 0.34902;
    sun_col_g = 0.129412;
    sun_col_b = 0.219608;
    sun_dir_x = 0.954905;
    sun_dir_y = 0.280395;
    sun_dir_z = 0.0976461;
    sun_start_ang = 0;
    sun_stop_ang = 0;
    time = 0;
    max_fog_opacity = 0.22;
    setclientvolumetricfog( start_dist, half_dist, half_height, base_height, fog_r, fog_g, fog_b, fog_scale, sun_col_r, sun_col_g, sun_col_b, sun_dir_x, sun_dir_y, sun_dir_z, sun_start_ang, sun_stop_ang, time, max_fog_opacity );

    if ( !isdefined( ent_player._previous_vision ) )
        ent_player._previous_vision = "zmt";

    new_vision = "zmt";
    ent_player clientscripts\mp\zm_moon_fx::moon_vision_set( ent_player._previous_vision, new_vision, local_clientnum, self.script_int );
    ent_player._previous_vision = "zmt";
    setsaveddvar( "r_skyColorTemp", 6400 );
}

moon_nml_fog_change( ent_player )
{
    if ( !isdefined( ent_player ) || isdefined( level._dte_done ) && level._dte_done )
        return;

    local_clientnum = ent_player getlocalclientnumber();
    ent_player endon( "entityshutdown" );
    start_dist = 1662.13;
    half_dist = 18604.1;
    half_height = 2618.86;
    base_height = -5373.56;
    fog_r = 0.764706;
    fog_g = 0.505882;
    fog_b = 0.231373;
    fog_scale = 5;
    sun_col_r = 0.8;
    sun_col_g = 0.435294;
    sun_col_b = 0.101961;
    sun_dir_x = 0.796421;
    sun_dir_y = 0.425854;
    sun_dir_z = 0.429374;
    sun_start_ang = 0;
    sun_stop_ang = 45.87;
    time = 0;
    max_fog_opacity = 0.72;
    sunlight = 5;
    sundirection = ( -16, 56.06, 0 );
    suncolor = ( 0.924, 0.775, 0.651 );

    if ( !isdefined( ent_player._previous_vision ) )
        ent_player._previous_vision = "zmh";

    new_vision = "zmh";
    ent_player clientscripts\mp\zm_moon_fx::moon_vision_set( ent_player._previous_vision, new_vision, local_clientnum, self.script_int );
    ent_player._previous_vision = "zmh";
    setclientvolumetricfog( start_dist, half_dist, half_height, base_height, fog_r, fog_g, fog_b, fog_scale, sun_col_r, sun_col_g, sun_col_b, sun_dir_x, sun_dir_y, sun_dir_z, sun_start_ang, sun_stop_ang, time, max_fog_opacity );
    setsaveddvar( "r_skyColorTemp", 6400 );
}

moon_vision_set( str_vision_old, str_vision_new, int_clientnum, int_trans )
{
    if ( str_vision_old == str_vision_new )
        return;

    if ( isdefined( str_vision_old ) )
    {

    }

    if ( isdefined( int_trans ) )
        trans_time = int_trans;
    else
        trans_time = 0;

/#

#/
}
