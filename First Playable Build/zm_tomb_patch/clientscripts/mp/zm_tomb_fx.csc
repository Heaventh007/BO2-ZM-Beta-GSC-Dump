// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\createfx\zm_tomb_fx;
#include clientscripts\mp\_fx;

precache_util_fx()
{

}

precache_scripted_fx()
{
    level._effect["eye_glow"] = loadfx( "misc/fx_zombie_eye_single" );
    level._effect["headshot"] = loadfx( "impacts/fx_flesh_hit" );
    level._effect["headshot_nochunks"] = loadfx( "misc/fx_zombie_bloodsplat" );
    level._effect["bloodspurt"] = loadfx( "misc/fx_zombie_bloodspurt" );
    level._effect["animscript_gib_fx"] = loadfx( "weapon/bullet/fx_flesh_gib_fatal_01" );
    level._effect["animscript_gibtrail_fx"] = loadfx( "trail/fx_trail_blood_streak" );
    level._effect["flame_trap_start"] = loadfx( "maps/zombie_tomb/fx_tomb_trap_fire_start" );
    level._effect["flame_trap_loop"] = loadfx( "maps/zombie_tomb/fx_tomb_trap_fire_os" );
    level._effect["fire_ai_torso"] = loadfx( "fire/fx_fire_ai_torso" );
    level._effect["fire_ai_leg_left"] = loadfx( "fire/fx_fire_ai_leg_left" );
    level._effect["fire_ai_leg_right"] = loadfx( "fire/fx_fire_ai_leg_right" );
    level._effect["fire_ai_arm_left"] = loadfx( "fire/fx_fire_ai_arm_left" );
    level._effect["fire_ai_arm_right"] = loadfx( "fire/fx_fire_ai_arm_right" );
    level._effect["robot_foot_stomp"] = loadfx( "maps/zombie_tomb/fx_tomb_robot_dust" );
    level._effect["zombie_blood"] = loadfx( "maps/zombie_tomb/fx_tomb_pwr_up_zmb_blood" );
    level._effect["mech_death"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_death" );
    level._effect["mech_sparks"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_dmg_sparks" );
    level._effect["mech_steam"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_dmg_steam" );
    level._effect["mech_claw"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_wpn_claw" );
    level._effect["mech_claw_arm"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_wpn_source" );
    level._effect["auto_turret_light"] = loadfx( "maps/zombie/fx_zombie_auto_turret_light" );
    level._effect["tesla_elec_kill"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_afterlife_zmb_tport" );
    level._effect["capture_progression"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_progression" );
    level._effect["capture_complete"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_complete" );
    level._effect["screecher_hole"] = loadfx( "maps/zombie_tomb/fx_tomb_screecher_vortex" );
    level._effect["screecher_hole_os"] = loadfx( "maps/zombie_tomb/fx_tomb_screecher_vortex_os" );
    level._effect["player_rain"] = loadfx( "maps/zombie_tomb/fx_tomb_player_weather_rain" );
    level._effect["player_snow"] = loadfx( "maps/zombie_tomb/fx_tomb_player_weather_snow" );
    level._effect["lightning_flash"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_lightning_lg" );
    level._effect["mortar_launch"] = loadfx( "maps/zombie_tomb/fx_tomb_veh_tank_mortar_launch" );
    level._effect["fx_mortarexp_sand"] = loadfx( "maps/zombie_tomb/fx_tomb_veh_tank_mortar_exp" );
    level._effect["tank_treads"] = loadfx( "maps/zombie_tomb/fx_tomb_veh_tank_treadfx_mud" );
    level._effect["elec_switch_spark"] = loadfx( "maps/zombie_tomb/fx_tomb_puzzle_elec_sparks" );
    level._effect["switch_sparks"] = loadfx( "env/electrical/fx_elec_wire_spark_burst" );
    level._effect["zapper_light_ready"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_light_green" );
    level._effect["zapper_light_notready"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_light_red" );
    level._effect["bottle_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_bottle_glow" );
}

precache_createfx_fx()
{
    level._effect["fx_death_cloud"] = loadfx( "maps/zombie_tomb/fx_tomb_death_cloud" );
    level._effect["fx_sky_flash_orange"] = loadfx( "maps/zombie_tomb/fx_tomb_sky_flash_orange" );
    level._effect["fx_sky_dist_aa_tracers"] = loadfx( "maps/zombie_tomb/fx_tomb_sky_dist_aa_tracers" );
    level._effect["fx_sky_dist_smk_plume"] = loadfx( "maps/zombie_tomb/fx_tomb_sky_dist_smk_plume" );
    level._effect["fx_sphere"] = loadfx( "weapon/zmb_staff/fx_sphere" );
    level._effect["fx_pack_a_punch"] = loadfx( "maps/zombie_tomb/fx_tomb_pack_a_punch_light_beams" );
    level._effect["fx_molten_ball"] = loadfx( "weapon/zmb_staff/fx_zmb_staff_fire_trail_bolt_p" );
    level._effect["fx_puzzle"] = loadfx( "maps/zombie_tomb/fx_tomb_puzzle_fire_sacrifice" );
    level._effect["fx_tomb_dust_fall"] = loadfx( "maps/zombie_tomb/fx_tomb_dust_fall" );
    level._effect["fx_tomb_embers_flat"] = loadfx( "maps/zombie_tomb/fx_tomb_embers_flat" );
    level._effect["fx_tomb_fire_lg"] = loadfx( "maps/zombie_tomb/fx_tomb_fire_lg" );
    level._effect["fx_tomb_fire_sm"] = loadfx( "maps/zombie_tomb/fx_tomb_fire_sm" );
    level._effect["fx_tomb_ground_fog"] = loadfx( "maps/zombie_tomb/fx_tomb_ground_fog" );
    level._effect["fx_tomb_sparks"] = loadfx( "maps/zombie_tomb/fx_tomb_sparks" );
    level._effect["fx_tomb_water_drips"] = loadfx( "maps/zombie_tomb/fx_tomb_water_drips" );
    level._effect["fx_tomb_smoke_pillar_xlg"] = loadfx( "maps/zombie_tomb/fx_tomb_smoke_pillar_xlg" );
}

main()
{
    clientscripts\mp\createfx\zm_tomb_fx::main();
    clientscripts\mp\_fx::reportnumeffects();
    precache_util_fx();
    precache_createfx_fx();
    precache_fxanim_props();
    disablefx = getdvarint( #"_id_C9B177D6" );

    if ( !isdefined( disablefx ) || disablefx <= 0 )
        precache_scripted_fx();

    level thread trap_fx_monitor( "flame_trap", "str_flame_trap" );
}

#using_animtree("fxanim_props");

precache_fxanim_props()
{
    level.scr_anim["fxanim_props"]["dogfights"] = %fxanim_zom_tomb_dogfights_anim;
}

setup_prop_anims()
{
    waitforclient( 0 );
    players = level.localplayers;

    for ( i = 0; i < players.size; i++ )
        players[i] thread play_fx_prop_anims( i );
}

play_fx_prop_anims( localclientnum )
{
    fxanim_props = getentarray( localclientnum, "fxanim", "targetname" );
    array_thread( fxanim_props, ::fxanim_props_think, localclientnum );
}

fxanim_props_think( localclientnum )
{
    self endon( "death" );
    self endon( "entityshutdown" );
    self endon( "delete" );
    wait 3;
    self useanimtree( #animtree );
    self thread fxanim_props_wait_1( localclientnum );
}

fxanim_props_wait_1( localclientnum )
{
    if ( isdefined( self.fxanim_waittill_1 ) )
        level waittill( self.fxanim_waittill_1 );

    if ( isdefined( self.fxanim_wait ) )
        wait( self.fxanim_wait );

    if ( isdefined( self.fxanim_scene_1 ) )
    {
        if ( isdefined( level.scr_anim["fxanim_props"][self.fxanim_scene_1] ) )
            self setflaggedanim( "tomb_fxanim", level.scr_anim["fxanim_props"][self.fxanim_scene_1], 1.0, 0.0, 1.0 );
    }
}

trap_fx_monitor( str_name, str_side )
{
    while ( true )
    {
        level waittill( str_name );
        a_trap_points = getstructarray( str_name, "targetname" );

        for ( i = 0; i < a_trap_points.size; i++ )
        {
            if ( str_name == "flame_trap" )
                a_trap_points[i] thread flame_trap_fx( str_name, str_side );
        }
    }
}

flame_trap_fx( str_name, str_side )
{
    vec_ang = self.angles;
    vec_forward = anglestoforward( vec_ang );

    if ( isdefined( self.a_loopfx ) )
    {
        for ( i = 0; i < self.a_loopfx.size; i++ )
            stopfx( i, self.a_loopfx[i] );

        self.a_loopfx = [];
    }

    if ( !isdefined( self.a_loopfx ) )
        self.a_loopfx = [];

    a_players = getlocalplayers();

    for ( i = 0; i < a_players.size; i++ )
    {
        self.a_loopfx[i] = playfx( i, level._effect["flame_trap_start"], self.origin, vec_forward );
        wait 1;
        level.b_play_fire_loop_fx = 1;
        level thread monitor_fire_loop();

        while ( level.b_play_fire_loop_fx )
        {
            self.a_loopfx[i] = playfx( i, level._effect["flame_trap_loop"], self.origin, vec_forward );
            wait 1;
        }

        self.a_loopfx[i] = playfx( i, level._effect["flame_trap_start"], self.origin, vec_forward );
        wait 1;
    }

    level waittill( str_side + "off" );

    for ( i = 0; i < self.a_loopfx.size; i++ )
        stopfx( i, self.a_loopfx[i] );

    self.a_loopfx = [];
}

monitor_fire_loop()
{
    wait 25;
    level.b_play_fire_loop_fx = 0;
}
