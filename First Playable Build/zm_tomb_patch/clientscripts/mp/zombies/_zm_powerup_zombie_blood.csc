// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\_filter;
#include clientscripts\mp\zombies\_zm_powerups;
#include clientscripts\mp\_visionset_mgr;

init()
{
    onplayerconnect_callback( ::init_filter_zombie_blood );
    level.vsmgr_filter_custom_enable["generic_filter_zombie_blood"] = ::vsmgr_enable_filter_zombie_blood;
    clientscripts\mp\zombies\_zm_powerups::add_zombie_powerup( "zombie_blood", "powerup_zombie_blood" );
    clientscripts\mp\_visionset_mgr::vsmgr_register_visionset_info( "zm_powerup_zombie_blood_visionset", 14000, 1, "zm_powerup_zombie_blood", "zm_powerup_zombie_blood" );
    clientscripts\mp\_visionset_mgr::vsmgr_register_overlay_info_style_filter( "zm_powerup_zombie_blood_overlay", 14000, 1, 1, 0, "generic_filter_zombie_blood" );
}

vsmgr_enable_filter_zombie_blood( curr_info )
{
    enable_filter_zombie_blood( self, curr_info.filter_index, 0.0 );
    zombie_blood_mode_high();
}

init_filter_zombie_blood( localclientnum )
{
    player = getlocalplayer( localclientnum );
    init_filter_indices();
    map_material_helper( player, "generic_filter_zombie_blood" );
    setup_zombie_blood( player );
}

set_filter_zombie_blood_amount( player, filterid, amount )
{
    player set_filter_pass_constant( filterid, 0, 0, amount );
}

set_filter_zombie_blood_ghost_amount( player, filterid, amount )
{
    player set_filter_pass_constant( filterid, 0, 1, amount );
}

set_filter_zombie_blood_ghost_scale( player, filterid, scalex, scaley )
{
    player set_filter_pass_constant( filterid, 0, 8, scalex );
    player set_filter_pass_constant( filterid, 0, 9, scaley );
}

set_filter_zombie_blood_ghost_offset( player, filterid, offsetx, offsety )
{
    player set_filter_pass_constant( filterid, 0, 10, offsetx );
    player set_filter_pass_constant( filterid, 0, 11, offsety );
}

set_filter_zombie_blood_ghost_image( player, filterid, image )
{
    player set_filter_pass_constant( filterid, 0, 4, image );
}

set_filter_zombie_blood_shift_amount( player, filterid, image )
{
    player set_filter_pass_constant( filterid, 0, 5, image );
}

set_filter_zombie_blood_warp_amount( player, filterid, amount )
{
    player set_filter_pass_constant( filterid, 0, 6, amount );
}

set_filter_zombie_blood_hit( player, filterid, opacity )
{
    player set_filter_pass_constant( filterid, 0, 12, opacity );
}

enable_filter_zombie_blood( player, filterid, zombie_blood_amount )
{
    player set_filter_pass_material( filterid, 0, level.filter_matid["generic_filter_zombie_blood"] );
    player set_filter_pass_enabled( filterid, 0, 1 );
    set_filter_zombie_blood_amount( player, filterid, zombie_blood_amount );
    set_filter_zombie_blood_ghost_scale( player, filterid, 1.9, 1 );
    set_filter_zombie_blood_shift_amount( player, filterid, 0 );
    set_filter_zombie_blood_warp_amount( player, filterid, 0 );
}

disable_filter_zombie_blood( player, filterid )
{
    player set_filter_pass_enabled( filterid, 0, 0 );
}

setup_zombie_blood( e_player )
{
    level.str_zombie_blood_mode = "reset";
    level.is_zombie_blood_image_on = 1;
    level.is_zombie_blood_mode_low = 0;
    level.n_zombie_blood_warp_final = 0;
    level.n_zombie_blood_value_high = 0;
    level.n_zombie_blood_image_position_index = randomint( 2 );
    level.b_zombie_blood_sprinting = 0;
}

zombie_blood_mode_disable()
{
    level.str_zombie_blood_mode = "disable";
    level.is_zombie_blood_image_on = 0;

    if ( isdefined( level.zombie_bloodloopent ) && isdefined( level.zombie_bloodloopid ) )
    {
        level.zombie_bloodloopent delete();
        level.zombie_bloodloopent = undefined;
        level.zombie_bloodloopid = undefined;
    }

    level.n_zombie_blood_warp_final = 0;
    level.n_zombie_blood_value_high = 0;
    e_player = level.localplayers[0];
    disable_filter_zombie_blood( e_player, 1 );
    setlutvolumeactivebank( 0, 1 );
}

zombie_blood_mode_reset()
{
    if ( level.str_zombie_blood_mode != "reset" )
    {
        if ( !isdefined( level.zombie_bloodloopid ) )
            level setuprageloopid();

        level.str_zombie_blood_mode = "reset";
        level.is_zombie_blood_mode_low = 0;
        n_zombie_blood_warp_previous = level.n_zombie_blood_warp_final;
        level.n_zombie_blood_warp_final = 0;

        if ( n_zombie_blood_warp_previous < level.n_zombie_blood_warp_final )
            level thread fade_warp_low_to_high( n_zombie_blood_warp_previous, level.n_zombie_blood_warp_final, 1 );
        else if ( n_zombie_blood_warp_previous > level.n_zombie_blood_warp_final )
            level thread fade_warp_high_to_low( n_zombie_blood_warp_previous, level.n_zombie_blood_warp_final, 1 );

        n_zombie_blood_value_previous = level.n_zombie_blood_value_high;
        level.n_zombie_blood_value_high = 0;
        zombie_blood_mode_fade( n_zombie_blood_value_previous );
    }
}

zombie_blood_mode_low()
{
    if ( level.str_zombie_blood_mode != "low" )
    {
        if ( !isdefined( level.zombie_bloodloopid ) )
            level setuprageloopid();

        level.str_zombie_blood_mode = "low";
        level.is_zombie_blood_mode_low = 1;
        n_zombie_blood_warp_previous = level.n_zombie_blood_warp_final;
        level.n_zombie_blood_warp_final = 0;

        if ( n_zombie_blood_warp_previous < level.n_zombie_blood_warp_final )
            level thread fade_warp_low_to_high( n_zombie_blood_warp_previous, level.n_zombie_blood_warp_final, 0.5 );
        else if ( n_zombie_blood_warp_previous > level.n_zombie_blood_warp_final )
            level thread fade_warp_high_to_low( n_zombie_blood_warp_previous, level.n_zombie_blood_warp_final, 0.5 );

        n_zombie_blood_value_previous = level.n_zombie_blood_value_high;
        level.n_zombie_blood_value_high = 0.5;
        zombie_blood_mode_fade( n_zombie_blood_value_previous );
    }
}

zombie_blood_mode_medium()
{
    if ( level.str_zombie_blood_mode != "medium" )
    {
        if ( !isdefined( level.zombie_bloodloopid ) )
            level setuprageloopid();

        level.str_zombie_blood_mode = "medium";
        level.is_zombie_blood_mode_low = 0;
        n_zombie_blood_value_previous = level.n_zombie_blood_value_high;
        level.n_zombie_blood_value_high = 0.65;
        zombie_blood_mode_fade( n_zombie_blood_value_previous );
    }
}

zombie_blood_mode_high()
{
    e_player = level.localplayers[0];

    if ( !isdefined( level.zombie_bloodloopid ) )
        level setuprageloopid();

    level.str_zombie_blood_mode = "high";
    level.is_zombie_blood_mode_low = 0;
    level notify( "zombie_blood_off" );
    set_filter_zombie_blood_ghost_amount( e_player, 1, 0 );
    level thread zombie_blood_mode_high_warping();
    level thread zombie_blood_mode_fade_shift_to_high();
    wait 0.5;
    n_zombie_blood_value_previous = level.n_zombie_blood_value_high;
    level.n_zombie_blood_value_high = 1;
    zombie_blood_mode_fade( n_zombie_blood_value_previous );
}

zombie_blood_mode_high_warping()
{
    n_fov_default = getdvarfloat( #"cg_fov" );
    level thread fade_fov_lerp( n_fov_default, 50, 0.25 );
    fade_warp_high_to_low( 0.1, -0.5, 0.25 );
    level thread fade_fov_lerp( 50, 75, 0.35 );
    fade_warp_low_to_high( -0.5, 0.4, 0.35 );
    level thread fade_fov_lerp( 75, 58, 0.2 );
    fade_warp_high_to_low( 0.4, 0.25, 0.2 );
    level thread fade_fov_lerp( 58, 67, 0.1 );
    fade_warp_low_to_high( 0.25, 0.35, 0.1 );
    level thread fade_fov_lerp( 67, n_fov_default, 0.1 );
    fade_warp_high_to_low( 0.35, 0.18, 0.1 );
    level.n_zombie_blood_warp_final = 0.18;
}

fade_fov_lerp( n_fov_1, n_fov_2, n_fade_time, n_time_increment )
{
    e_player = level.localplayers[0];

    if ( !isdefined( n_time_increment ) )
        n_time_increment = 0.0166667;

    for ( i = 0; i <= n_fade_time; i = i + n_time_increment )
    {
        n_time = i / n_fade_time;

        if ( n_fov_1 < n_fov_2 )
            n_fov = n_fov_1 * ( 1 - n_time ) + n_fov_2 * n_time;
        else
            n_fov = n_fov_1 + n_fov_2 - ( n_fov_2 * ( 1 - n_time ) + n_fov_1 * n_time );

        wait( n_time_increment );
    }
}

setuprageloopid()
{

}

zombie_blood_mode_fade( n_zombie_blood_value_previous )
{
    e_player = level.localplayers[0];
    level.n_start_value = 0;
    level.n_zombie_blood_values_diff = 0;
    level.n_steps = 0;
    level.n_blend_amount = 0;
    level.n_zombie_blood_value = 0;
    level.n_start_value = n_zombie_blood_value_previous;
    level.n_zombie_blood_values_diff = abs( level.n_zombie_blood_value_high - n_zombie_blood_value_previous );
    level.n_steps = _get_number_of_steps( 0.05, level.n_zombie_blood_values_diff );
    level.n_blend_amount = level.n_zombie_blood_values_diff / level.n_steps;

    for ( i = 0; i <= level.n_steps; i++ )
    {
        if ( n_zombie_blood_value_previous < level.n_zombie_blood_value_high )
            level.n_zombie_blood_value = level.n_start_value + i * level.n_blend_amount;
        else
            level.n_zombie_blood_value = level.n_start_value - i * level.n_blend_amount;

        set_filter_zombie_blood_amount( e_player, 1, level.n_zombie_blood_value );
        wait 0.05;
    }
}

_get_number_of_steps( n_step_size, n_zombie_blood_values_diff )
{
    if ( n_zombie_blood_values_diff == 0 )
        n_steps = 1;
    else
        n_steps = n_zombie_blood_values_diff / n_step_size;

    return n_steps;
}

fade_zombie_blood_low_to_high( n_zombie_blood_low, n_zombie_blood_high, n_fade_time )
{
    e_player = level.localplayers[0];
    n_time_increment = 0.0166667;
    set_filter_zombie_blood_amount( e_player, 1, n_zombie_blood_low );

    for ( i = 0; i <= n_fade_time; i = i + n_time_increment )
    {
        n_time = i / n_fade_time;
        n_zombie_blood_amount = n_zombie_blood_low * ( 1 - n_time ) + n_zombie_blood_high * n_time;
        set_filter_zombie_blood_amount( e_player, 1, n_zombie_blood_amount );
        wait( n_time_increment );
    }

    set_filter_zombie_blood_amount( e_player, 1, n_zombie_blood_high );
}

fade_zombie_blood_high_to_low( n_zombie_blood_high, n_zombie_blood_low, n_fade_time )
{
    e_player = level.localplayers[0];
    n_time_increment = 0.0166667;
    set_filter_zombie_blood_amount( e_player, 1, n_zombie_blood_high );

    for ( i = 0; i <= n_fade_time; i = i + n_time_increment )
    {
        n_time = i / n_fade_time;
        n_zombie_blood_amount = n_zombie_blood_high + n_zombie_blood_low - ( n_zombie_blood_low * ( 1 - n_time ) + n_zombie_blood_high * n_time );
        set_filter_zombie_blood_amount( e_player, 1, n_zombie_blood_amount );
        wait( n_time_increment );
    }

    set_filter_zombie_blood_amount( e_player, 1, n_zombie_blood_low );
}

zombie_blood_mode_low_images()
{
    while ( level.is_zombie_blood_image_on )
    {
        if ( level.is_zombie_blood_mode_low )
            zombie_blood_mode_fade_image();

        wait 6;
    }
}

zombie_blood_mode_fade_image()
{
    level endon( "zombie_blood_off" );
    e_player = level.localplayers[0];

    if ( level.n_zombie_blood_image_position_index == 0 )
    {
        set_filter_zombie_blood_ghost_offset( e_player, 1, -0.5, 0 );
        set_filter_zombie_blood_ghost_image( e_player, 1, 0 );
        level.n_zombie_blood_image_position_index++;
    }
    else if ( level.n_zombie_blood_image_position_index == 1 )
    {
        set_filter_zombie_blood_ghost_offset( e_player, 1, 0.5, 0 );
        set_filter_zombie_blood_ghost_image( e_player, 1, 1 );
        level.n_zombie_blood_image_position_index = 0;
    }

    n_alpha_high = randomfloatrange( 0.85, 1 );
    fade_hud_low_to_high( 0, n_alpha_high, 1.3 );
    wait 0.5;
    fade_hud_high_to_low( n_alpha_high, 0, 1.3 );
}

fade_hud_low_to_high( n_alpha_low, n_alpha_high, n_fade_time )
{
    e_player = level.localplayers[0];
    n_time_increment = 0.0166667;
    set_filter_zombie_blood_ghost_amount( e_player, 1, n_alpha_low );

    for ( i = 0; i <= n_fade_time; i = i + n_time_increment )
    {
        n_time = i / n_fade_time;
        n_alpha_amount = n_alpha_low * ( 1 - n_time ) + n_alpha_high * n_time;
        set_filter_zombie_blood_ghost_amount( e_player, 1, n_alpha_amount );
        wait( n_time_increment );
    }

    set_filter_zombie_blood_ghost_amount( e_player, 1, n_alpha_high );
}

fade_hud_high_to_low( n_alpha_high, n_alpha_low, n_fade_time )
{
    e_player = level.localplayers[0];
    n_time_increment = 0.0166667;
    set_filter_zombie_blood_ghost_amount( e_player, 1, n_alpha_high );

    for ( i = 0; i <= n_fade_time; i = i + n_time_increment )
    {
        n_time = i / n_fade_time;
        n_alpha_amount = n_alpha_high + n_alpha_low - ( n_alpha_low * ( 1 - n_time ) + n_alpha_high * n_time );
        set_filter_zombie_blood_ghost_amount( e_player, 1, n_alpha_amount );
        wait( n_time_increment );
    }

    set_filter_zombie_blood_ghost_amount( e_player, 1, n_alpha_low );
}

zombie_blood_mode_fade_shift_to_high( n_fade_time )
{
    e_player = level.localplayers[0];
    wait 0.25;
    fade_shift_low_to_high( 0, 0.7, 0.35 );
    fade_shift_high_to_low( 0.7, 0.35, 0.15 );
    fade_shift_high_to_low( 0.35, 0.07, 1.1 );
    fade_shift_high_to_low( 0.07, 0, 0.15 );
    set_filter_zombie_blood_shift_amount( e_player, 1, 0 );
}

zombie_blood_mode_fade_shift_to_low( n_fade_time )
{
    e_player = level.localplayers[0];
    fade_shift_high_to_low( 1, 0.15, 0.35 );
    fade_shift_high_to_low( 1, 0.15, 0.15 );
    fade_shift_high_to_low( 1, 0.15, 1.1 );
    fade_shift_high_to_low( 1, 0, 0.15 );
    set_filter_zombie_blood_shift_amount( e_player, 1, 0 );
}

fade_shift_low_to_high( n_shift_low, n_shift_high, n_fade_time )
{
    e_player = level.localplayers[0];
    n_time_increment = 0.0166667;
    set_filter_zombie_blood_shift_amount( e_player, 1, n_shift_low );

    for ( i = 0; i <= n_fade_time; i = i + n_time_increment )
    {
        n_time = i / n_fade_time;
        n_shift_amount = n_shift_low * ( 1 - n_time ) + n_shift_high * n_time;
        set_filter_zombie_blood_shift_amount( e_player, 1, n_shift_amount );
        wait( n_time_increment );
    }

    set_filter_zombie_blood_shift_amount( e_player, 1, n_shift_high );
}

fade_shift_high_to_low( n_shift_high, n_shift_low, n_fade_time )
{
    e_player = level.localplayers[0];
    n_time_increment = 0.0166667;
    set_filter_zombie_blood_shift_amount( e_player, 1, n_shift_high );

    for ( i = 0; i <= n_fade_time; i = i + n_time_increment )
    {
        n_time = i / n_fade_time;
        n_shift_amount = n_shift_high + n_shift_low - ( n_shift_low * ( 1 - n_time ) + n_shift_high * n_time );
        set_filter_zombie_blood_shift_amount( e_player, 1, n_shift_amount );
        wait( n_time_increment );
    }

    set_filter_zombie_blood_shift_amount( e_player, 1, n_shift_low );
}

fade_warp_low_to_high( n_warp_low, n_warp_high, n_fade_time )
{
    n_time_increment = 0.0166667;
    e_player = level.localplayers[0];
    set_filter_zombie_blood_warp_amount( e_player, 1, n_warp_low );

    for ( i = 0; i <= n_fade_time; i = i + n_time_increment )
    {
        n_time = i / n_fade_time;
        n_warp_amount = n_warp_low * ( 1 - n_time ) + n_warp_high * n_time;
        set_filter_zombie_blood_warp_amount( e_player, 1, n_warp_amount );
        wait( n_time_increment );
    }

    set_filter_zombie_blood_warp_amount( e_player, 1, n_warp_high );
}

fade_warp_high_to_low( n_warp_high, n_warp_low, n_fade_time )
{
    n_time_increment = 0.0166667;
    e_player = level.localplayers[0];
    set_filter_zombie_blood_warp_amount( e_player, 1, n_warp_high );

    for ( i = 0; i <= n_fade_time; i = i + n_time_increment )
    {
        n_time = i / n_fade_time;
        n_warp_amount = n_warp_high + n_warp_low - ( n_warp_low * ( 1 - n_time ) + n_warp_high * n_time );
        set_filter_zombie_blood_warp_amount( e_player, 1, n_warp_amount );
        wait( n_time_increment );
    }

    set_filter_zombie_blood_warp_amount( e_player, 1, n_warp_low );
}

zombie_blood_health_fade( n_alpha_1, n_alpha_2, n_fade_time )
{
    e_player = level.localplayers[0];
    n_time_increment = 0.0166667;

    if ( isdefined( n_fade_time ) )
    {
        level notify( "end_zombie_blood_health_fade" );
        level endon( "end_zombie_blood_health_fade" );

        for ( i = 0; i <= n_fade_time; i = i + n_time_increment )
        {
            n_time = i / n_fade_time;

            if ( n_alpha_1 < n_alpha_2 )
                n_alpha = n_alpha_1 * ( 1 - n_time ) + n_alpha_2 * n_time;
            else
                n_alpha = n_alpha_1 + n_alpha_2 - ( n_alpha_2 * ( 1 - n_time ) + n_alpha_1 * n_time );

            set_filter_zombie_blood_hit( e_player, 1, n_alpha );
            wait( n_time_increment );
        }
    }
    else
    {
        set_filter_zombie_blood_hit( e_player, 1, n_alpha_1 );
        zombie_blood_health_state_change( n_alpha_1, n_alpha_2, 1 );
    }
}

zombie_blood_health_state_change( n_alpha, n_alpha_previous, b_do_health_hit )
{
    e_player = level.localplayers[0];

    if ( n_alpha_previous < 0.2 && n_alpha >= 0.2 )
    {
        if ( isdefined( b_do_health_hit ) )
            zombie_blood_health_hit();
    }
    else if ( n_alpha_previous < 0.25 && n_alpha >= 0.25 )
    {
        if ( isdefined( b_do_health_hit ) )
            zombie_blood_health_hit();
    }
    else if ( n_alpha_previous < 0.5 && n_alpha >= 0.5 )
    {
        if ( isdefined( b_do_health_hit ) )
            zombie_blood_health_hit();
    }
}

zombie_blood_health_color_yellow()
{
    e_player = level.localplayers[0];
}

zombie_blood_health_hit()
{
    zombie_blood_health_hit_fade( 0.8, 1 );
    zombie_blood_health_hit_fade( 1, 0.8 );
}

zombie_blood_health_hit_fade( n_opacity_1, n_opacity_2 )
{
    e_player = level.localplayers[0];
    n_time_increment = 0.0166667;

    for ( i = 0; i <= 0.25; i = i + n_time_increment )
    {
        n_time = i / 0.25;

        if ( n_opacity_1 < n_opacity_2 )
            n_opacity = n_opacity_1 * ( 1 - n_time ) + n_opacity_2 * n_time;
        else
            n_opacity = n_opacity_1 + n_opacity_2 - ( n_opacity_2 * ( 1 - n_time ) + n_opacity_1 * n_time );

        set_filter_zombie_blood_hit( e_player, 1, n_opacity );
        wait( n_time_increment );
    }
}

zombie_blood_health_fade_end_notify()
{
    level notify( "end_zombie_blood_health_fade" );
}

zombie_blood_sprint_play()
{
    playviewmodelfx( 0, level._effect["sprint_blur"], "tag_view" );

    if ( isdefined( level.b_zombie_blood_sprinting ) && level.b_zombie_blood_sprinting == 0 )
    {
        level.b_zombie_blood_sprinting = 1;
        fade_fov_lerp( 65, 61, 0.15, 0.02 );
    }
}

zombie_blood_sprint_stop()
{
    stopfx( 0, level._effect["sprint_blur"] );

    if ( isdefined( level.b_zombie_blood_sprinting ) && level.b_zombie_blood_sprinting == 1 )
    {
        level.b_zombie_blood_sprinting = 0;
        fade_fov_lerp( 61, 65, 0.15, 0.02 );
    }
}
