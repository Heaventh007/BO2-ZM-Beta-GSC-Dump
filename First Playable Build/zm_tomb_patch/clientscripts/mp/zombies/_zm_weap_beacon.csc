// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_fx;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\zombies\_zm_weapons;

#using_animtree("zombie_cymbal_monkey");

init()
{
    level.beacon_name = "beacon_zm";
    level.beacon_model = "zm_lights_lantern_vactube";

    if ( getdvar( #"createfx" ) == "on" )
        return;

    if ( !clientscripts\mp\zombies\_zm_weapons::is_weapon_included( level.beacon_name ) )
        return;

    level._effect["beacon_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_beacon_glow" );
    level._effect["beacon_launch_fx"] = loadfx( "maps/zombie_tomb/fx_tomb_beacon_launch" );
    level._effect["beacon_shell_explosion"] = loadfx( "maps/zombie_tomb/fx_tomb_beacon_exp" );
    level._effect["beacon_shell_trail"] = loadfx( "maps/zombie_tomb/fx_tomb_beacon_trail" );
    registerclientfield( "actor", "play_launch_artillery_fx", 14000, 1, "int", ::play_artillery_fx );
    registerclientfield( "scriptmover", "play_beacon_fx", 14000, 1, "int", ::play_beacon_glow );
    registerclientfield( "scriptmover", "play_artillery_barrage", 14000, 1, "int", ::play_artillery_barrage );
    scriptmodelsuseanimtree( #animtree );
}

play_artillery_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 1 )
    {
        playfx( localclientnum, level._effect["beacon_launch_fx"], self gettagorigin( "tag_rockets" ) );
        level thread sndfakelaunchaudio( self gettagorigin( "tag_rockets" ) );
    }
}

sndfakelaunchaudio( origin )
{
    for ( i = 0; i < 5; i++ )
    {
        playsound( 0, "zmb_homingbeacon_missile_fire", origin );
        wait 0.15;
    }
}

play_beacon_glow( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    while ( isdefined( self ) )
    {
        playsound( 0, "zmb_homingbeacon_pulse", self.origin );
        playfxontag( localclientnum, level._effect["beacon_glow"], self, "origin_animate_jnt" );
        wait 1.5;
    }
}

play_artillery_barrage( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    for ( i = 0; i < 5; i++ )
    {
        shell_origin = self get_random_shell_start_origin();
        shell = spawn( localclientnum, shell_origin, "script_model" );
        shell.angles = vectorscale( ( -1, 0, 0 ), 90.0 );
        shell setmodel( "jun_missile" );
        shell thread shell_logic( self, localclientnum );
        wait 1;
    }
}

get_random_shell_start_origin()
{
    x = self.origin[0];
    y = self.origin[1];
    z = 8500;
    shell_origin = ( randomfloatrange( -1000, 1000 ) + x, randomfloatrange( -1000, 1000 ) + y, 8500 );
    return shell_origin;
}

shell_logic( target, localclientnum )
{
    trace = bullettrace( self.origin, target.origin, 0, undefined );
    tracehit = trace["position"];
    self moveto( target.origin, 5 );
    playfxontag( localclientnum, level._effect["beacon_shell_trail"], self, "tag_origin" );
    self playloopsound( "zmb_homingbeacon_missile_loop", 1 );
    self waittill( "movedone" );
    playfx( localclientnum, level._effect["beacon_shell_explosion"], self.origin );
    playrumbleonposition( localclientnum, "artillery_rumble", self.origin );
    playsound( 0, "zmb_homingbeacon_missile_impact", self.origin );
    self delete();
}
