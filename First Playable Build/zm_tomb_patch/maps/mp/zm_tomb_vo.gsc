// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zm_tomb_utility;
#include maps\mp\zombies\_zm_audio;

init_level_specific_audio()
{
    level.oh_shit_vo_cooldown = 0;
    level.wallbuys_purchased = 0;
    setdvar( "zombie_kills", "5" );
    setdvar( "zombie_kill_timer", "5" );

    if ( is_classic() )
    {
        level._audio_custom_response_line = ::tomb_audio_custom_response_line;
        level.audio_get_mod_type = ::tomb_audio_get_mod_type_override;
        level.custom_kill_damaged_vo = maps\mp\zombies\_zm_audio::custom_kill_damaged_vo;
        level._custom_zombie_oh_shit_vox_func = ::tomb_custom_zombie_oh_shit_vox;
        level.gib_on_damage = ::tomb_custom_crawler_spawned_vo;
        level thread tomb_first_magic_box_seen_vo();
        level._audio_custom_weapon_check = ::tomb_audio_custom_weapon_check;
    }

    tomb_add_player_dialogue( "player", "general", "no_money_weapon", "nomoney_generic", undefined );
    tomb_add_player_dialogue( "player", "general", "no_money_box", "nomoney_generic", undefined );
    tomb_add_player_dialogue( "player", "general", "perk_deny", "nomoney_generic", undefined );
    tomb_add_player_dialogue( "player", "perk", "specialty_armorvest", "perk_generic", undefined, 100 );
    tomb_add_player_dialogue( "player", "perk", "specialty_fastreload", "perk_generic", undefined, 100 );
    tomb_add_player_dialogue( "player", "perk", "specialty_rof", "perk_generic", undefined, 100 );
    tomb_add_player_dialogue( "player", "perk", "specialty_deadshot", "perk_generic", undefined, 100 );
    tomb_add_player_dialogue( "player", "perk", "specialty_grenadepulldeath", "perk_generic", undefined, 100 );
    tomb_add_player_dialogue( "player", "kill", "closekill", "kill_close", undefined, 15 );
    tomb_add_player_dialogue( "player", "kill", "damage", "kill_damaged", undefined, 50 );
    tomb_add_player_dialogue( "player", "kill", "headshot", "kill_headshot", "resp_kill_headshot", 25 );
    tomb_add_player_dialogue( "player", "general", "achievement", "earn_acheivement", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "revive_up", "heal_revived", "revive_player", 100 );
    tomb_add_player_dialogue( "player", "general", "revive_player", "revive_player", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "exert_sigh", "exert_sigh", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "exert_laugh", "exert_laugh", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "pain_high", "pain_high", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "build_pickup", "build_pickup", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "build_swap", "build_swap", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "build_add", "build_add", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "build_final", "build_final", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "reboard", "rebuild_boards", undefined, 50 );
    tomb_add_player_dialogue( "player", "general", "discover_box", "discover_box", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "discover_wall_buy", "discover_wall_buy", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "generic_wall_buy", "generic_wall_buy", undefined, 25 );
    tomb_add_player_dialogue( "player", "general", "wpck_pap", "wpck_pap", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "surrounded_respond_to_plr_0", "surrounded_respond_to_plr_0", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "surrounded_respond_to_plr_1", "surrounded_respond_to_plr_1", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "surrounded_respond_to_plr_2", "surrounded_respond_to_plr_2", undefined, 100 );
    tomb_add_player_dialogue( "player", "general", "surrounded_respond_to_plr_3", "surrounded_respond_to_plr_3", undefined, 100 );
    tomb_add_player_dialogue( "player", "quest", "pick_up_easter_egg", "pick_up_egg", undefined, 100 );
    tomb_add_player_dialogue( "player", "quest", "secret_poster", "secret_poster", undefined, 100 );
    tomb_add_player_dialogue( "player", "quest", "find_secret", "find_secret", undefined, 100 );
}

tomb_add_player_dialogue( speaker, category, type, alias, response, chance )
{
    level.vox zmbvoxadd( speaker, category, type, alias, response );

    if ( isdefined( chance ) )
        add_vox_response_chance( type, chance );
}

tomb_audio_get_mod_type_override( impact, mod, weapon, zombie, instakill, dist, player )
{
    close_dist = 4096;
    med_dist = 15376;
    far_dist = 75625;
    a_str_mod = [];

    if ( is_headshot( weapon, impact, mod ) && dist >= far_dist )
        a_str_mod[a_str_mod.size] = "headshot";

    if ( is_explosive_damage( mod ) && weapon != "ray_gun_zm" && weapon != "ray_gun_upgraded_zm" && !( isdefined( zombie.is_on_fire ) && zombie.is_on_fire ) )
    {
        if ( !isinarray( a_str_mod, "retriever" ) && !isinarray( a_str_mod, "redeemer" ) )
        {
            if ( !instakill )
                a_str_mod[a_str_mod.size] = "explosive";
            else
                a_str_mod[a_str_mod.size] = "weapon_instakill";
        }
    }

    if ( weapon == "ray_gun_zm" || weapon == "ray_gun_upgraded_zm" )
    {
        if ( dist > far_dist )
        {
            if ( !instakill )
                a_str_mod[a_str_mod.size] = "raygun";
            else
                a_str_mod[a_str_mod.size] = "weapon_instakill";
        }
    }

    if ( instakill )
    {
        if ( mod == "MOD_MELEE" )
            a_str_mod[a_str_mod.size] = "melee_instakill";
        else
            a_str_mod[a_str_mod.size] = "weapon_instakill";
    }

    if ( mod != "MOD_MELEE" && !zombie.has_legs )
        a_str_mod[a_str_mod.size] = "crawler";

    if ( mod != "MOD_BURNED" && dist < close_dist )
        a_str_mod[a_str_mod.size] = "closekill";

    if ( a_str_mod.size == 0 )
        str_mod_final = "default";
    else if ( a_str_mod.size == 1 )
        str_mod_final = a_str_mod[0];
    else
    {
        for ( i = 0; i < a_str_mod.size; i++ )
        {
            if ( cointoss() )
                str_mod_final = a_str_mod[i];
        }

        str_mod_final = a_str_mod[randomint( a_str_mod.size )];
    }

    return str_mod_final;
}

setup_conversation_vo()
{
    level.conscience_vo = [];
    level.conscience_vo["conscience_Finn_convo_1"] = [];
    level.conscience_vo["conscience_Finn_convo_1"][0] = "vox_plr_0_finn_self_2_0";
    level.conscience_vo["conscience_Finn_convo_1"][1] = "vox_plr_0_finn_self_2_1";
    level.conscience_vo["conscience_Finn_convo_1"][2] = "vox_plr_0_finn_self_2_2";
    level.conscience_vo["conscience_Finn_convo_1"][3] = "vox_plr_0_finn_self_2_3";
    level.conscience_vo["conscience_Finn_convo_1"][4] = "vox_plr_0_finn_self_2_4";
    level.conscience_vo["conscience_Finn_convo_2"] = [];
    level.conscience_vo["conscience_Finn_convo_2"][0] = "vox_plr_0_finn_self_3_0";
    level.conscience_vo["conscience_Finn_convo_2"][1] = "vox_plr_0_finn_self_3_1";
    level.conscience_vo["conscience_Finn_convo_2"][2] = "vox_plr_0_finn_self_3_2";
    level.conscience_vo["conscience_Finn_convo_2"][3] = "vox_plr_0_finn_self_3_3";
    level.conscience_vo["conscience_Finn_convo_2"][4] = "vox_plr_0_finn_self_3_4";
    level.conscience_vo["conscience_Finn_convo_2"][5] = "vox_plr_0_finn_self_3_5";
    level.conscience_vo["conscience_Sal_convo_1"] = [];
    level.conscience_vo["conscience_Sal_convo_1"][0] = "vox_plr_1_sal_self_2_0";
    level.conscience_vo["conscience_Sal_convo_1"][1] = "vox_plr_1_sal_self_2_1";
    level.conscience_vo["conscience_Sal_convo_1"][2] = "vox_plr_1_sal_self_2_2";
    level.conscience_vo["conscience_Sal_convo_1"][3] = "vox_plr_1_sal_self_2_3";
    level.conscience_vo["conscience_Sal_convo_1"][4] = "vox_plr_1_sal_self_2_4";
    level.conscience_vo["conscience_Sal_convo_1"][5] = "vox_plr_1_sal_self_2_5";
    level.conscience_vo["conscience_Sal_convo_2"] = [];
    level.conscience_vo["conscience_Sal_convo_2"][0] = "vox_plr_1_sal_self_3_0";
    level.conscience_vo["conscience_Sal_convo_2"][1] = "vox_plr_1_sal_self_3_1";
    level.conscience_vo["conscience_Sal_convo_2"][2] = "vox_plr_1_sal_self_3_2";
    level.conscience_vo["conscience_Sal_convo_2"][3] = "vox_plr_1_sal_self_3_3";
    level.conscience_vo["conscience_Sal_convo_2"][4] = "vox_plr_1_sal_self_3_4";
    level.conscience_vo["conscience_Billy_convo_1"] = [];
    level.conscience_vo["conscience_Billy_convo_1"][0] = "vox_plr_2_billy_self_2_0";
    level.conscience_vo["conscience_Billy_convo_1"][1] = "vox_plr_2_billy_self_2_1";
    level.conscience_vo["conscience_Billy_convo_1"][2] = "vox_plr_2_billy_self_2_2";
    level.conscience_vo["conscience_Billy_convo_1"][3] = "vox_plr_2_billy_self_2_3";
    level.conscience_vo["conscience_Billy_convo_1"][4] = "vox_plr_2_billy_self_2_4";
    level.conscience_vo["conscience_Billy_convo_2"] = [];
    level.conscience_vo["conscience_Billy_convo_2"][0] = "vox_plr_2_billy_self_3_0";
    level.conscience_vo["conscience_Billy_convo_2"][1] = "vox_plr_2_billy_self_3_1";
    level.conscience_vo["conscience_Billy_convo_2"][2] = "vox_plr_2_billy_self_3_2";
    level.conscience_vo["conscience_Billy_convo_2"][3] = "vox_plr_2_billy_self_3_3";
    level.conscience_vo["conscience_Billy_convo_2"][4] = "vox_plr_2_billy_self_3_4";
    level.conscience_vo["conscience_Arlington_convo_1"] = [];
    level.conscience_vo["conscience_Arlington_convo_1"][0] = "vox_plr_3_arlington_self_2_0";
    level.conscience_vo["conscience_Arlington_convo_1"][1] = "vox_plr_3_arlington_self_2_2";
    level.conscience_vo["conscience_Arlington_convo_1"][2] = "vox_plr_3_arlington_self_2_3";
    level.conscience_vo["conscience_Arlington_convo_1"][3] = "vox_plr_3_arlington_self_2_4";
    level.conscience_vo["conscience_Arlington_convo_1"][4] = "vox_plr_3_arlington_self_2_5";
    level.conscience_vo["conscience_Arlington_convo_2"] = [];
    level.conscience_vo["conscience_Arlington_convo_2"][0] = "vox_plr_3_arlington_self_3_0";
    level.conscience_vo["conscience_Arlington_convo_2"][1] = "vox_plr_3_arlington_self_3_1";
    level.conscience_vo["conscience_Arlington_convo_2"][2] = "vox_plr_3_arlington_self_3_2";
    level.conscience_vo["conscience_Arlington_convo_2"][3] = "vox_plr_3_arlington_self_3_3";
    level.conscience_vo["conscience_Arlington_convo_2"][4] = "vox_plr_3_arlington_self_3_4";
}

tomb_custom_zombie_oh_shit_vox()
{
    self endon( "death_or_disconnect" );

    while ( true )
    {
        wait 1;

        if ( isdefined( self.oh_shit_vo_cooldown ) && self.oh_shit_vo_cooldown )
            continue;

        players = get_players();
        zombs = get_round_enemy_array();

        if ( players.size <= 1 )
        {
            n_distance = 250;
            n_zombies = 5;
            n_chance = 30;
            n_cooldown_time = 20;
        }
        else
        {
            n_distance = 250;
            n_zombies = 5;
            n_chance = 30;
            n_cooldown_time = 15;
        }

        close_zombs = 0;

        for ( i = 0; i < zombs.size; i++ )
        {
            if ( isdefined( zombs[i].favoriteenemy ) && zombs[i].favoriteenemy == self || !isdefined( zombs[i].favoriteenemy ) )
            {
                if ( distancesquared( zombs[i].origin, self.origin ) < n_distance * n_distance )
                    close_zombs++;
            }
        }

        if ( close_zombs >= n_zombies )
        {
            if ( randomint( 100 ) < n_chance && !( isdefined( self.isonbus ) && self.isonbus ) )
            {
                self maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "oh_shit" );
                self thread global_oh_shit_cooldown_timer( n_cooldown_time );
                wait( n_cooldown_time );
            }
        }
    }
}

global_oh_shit_cooldown_timer( n_cooldown_time )
{
    self endon( "disconnect" );
    self.oh_shit_vo_cooldown = 1;
    wait( n_cooldown_time );
    self.oh_shit_vo_cooldown = 0;
}

tomb_custom_crawler_spawned_vo()
{
    self endon( "death" );

    if ( isdefined( self.a.gib_ref ) && isalive( self ) )
    {
        if ( self.a.gib_ref == "no_legs" || self.a.gib_ref == "right_leg" || self.a.gib_ref == "left_leg" )
        {
            if ( isdefined( self.attacker ) && isplayer( self.attacker ) )
            {
                if ( isdefined( self.attacker.crawler_created_vo_cooldown ) && self.attacker.crawler_created_vo_cooldown )
                    return;

                rand = randomintrange( 0, 100 );

                if ( rand < 15 )
                {
                    self.attacker maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "crawl_spawn" );
                    self.attacker thread crawler_created_vo_cooldown();
                }
            }
        }
    }
}

crawler_created_vo_cooldown()
{
    self endon( "disconnect" );
    self.crawler_created_vo_cooldown = 1;
    wait 30;
    self.crawler_created_vo_cooldown = 0;
}

tomb_first_magic_box_seen_vo()
{
    flag_wait( "start_zombie_round_logic" );
    magicbox = level.chests[level.chest_index];
    a_players = getplayers();

    foreach ( player in a_players )
        player thread wait_and_play_first_magic_box_seen_vo( magicbox.unitrigger_stub );
}

wait_and_play_first_magic_box_seen_vo( struct )
{
    self endon( "disconnect" );
    level endon( "first_maigc_box_discovered" );

    while ( true )
    {
        if ( distancesquared( self.origin, struct.origin ) < 40000 )
        {
            if ( self is_player_looking_at( struct.origin, 0.25 ) )
            {
                if ( !( isdefined( self.dontspeak ) && self.dontspeak ) )
                {
                    self thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "discover_box" );
                    level notify( "first_maigc_box_discovered" );
                    break;
                }
            }
        }

        wait 0.1;
    }
}

tomb_audio_custom_weapon_check( weapon, magic_box )
{
    self endon( "death" );
    self endon( "disconnect" );

    if ( isdefined( magic_box ) && magic_box )
    {
        type = self maps\mp\zombies\_zm_weapons::weapon_type_check( weapon );
        return type;
    }

    if ( issubstr( weapon, "upgraded" ) )
        self thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "wpck_pap" );
    else if ( level.wallbuys_purchased == 0 )
    {
        self thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "discover_wall_buy" );
        level.wallbuys_purchased++;
    }
    else
        self thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "generic_wall_buy" );

    return "crappy";
}

easter_egg_song_vo( player )
{
    wait 3.5;

    if ( isalive( player ) )
        player thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "quest", "find_secret" );
    else
    {
        while ( true )
        {
            a_players = getplayers();

            foreach ( player in a_players )
            {
                if ( isalive( player ) )
                {
                    if ( !( isdefined( player.dontspeak ) && player.dontspeak ) )
                        player thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "quest", "find_secret" );
                }
            }
        }

        wait 0.1;
    }
}

setup_personality_character_exerts()
{
    level.exert_sounds[1]["burp"][0] = "vox_plr_0_exert_burp_0";
    level.exert_sounds[1]["burp"][1] = "vox_plr_0_exert_burp_1";
    level.exert_sounds[1]["burp"][2] = "vox_plr_0_exert_burp_2";
    level.exert_sounds[1]["burp"][3] = "vox_plr_0_exert_burp_3";
    level.exert_sounds[1]["burp"][4] = "vox_plr_0_exert_burp_4";
    level.exert_sounds[1]["burp"][5] = "vox_plr_0_exert_burp_5";
    level.exert_sounds[1]["burp"][6] = "vox_plr_0_exert_burp_6";
    level.exert_sounds[2]["burp"][0] = "vox_plr_1_exert_burp_0";
    level.exert_sounds[2]["burp"][1] = "vox_plr_1_exert_burp_1";
    level.exert_sounds[2]["burp"][2] = "vox_plr_1_exert_burp_2";
    level.exert_sounds[2]["burp"][3] = "vox_plr_1_exert_burp_3";
    level.exert_sounds[3]["burp"][0] = "vox_plr_2_exert_burp_0";
    level.exert_sounds[3]["burp"][1] = "vox_plr_2_exert_burp_1";
    level.exert_sounds[3]["burp"][2] = "vox_plr_2_exert_burp_2";
    level.exert_sounds[3]["burp"][3] = "vox_plr_2_exert_burp_3";
    level.exert_sounds[3]["burp"][4] = "vox_plr_2_exert_burp_4";
    level.exert_sounds[3]["burp"][5] = "vox_plr_2_exert_burp_5";
    level.exert_sounds[3]["burp"][6] = "vox_plr_2_exert_burp_6";
    level.exert_sounds[4]["burp"][0] = "vox_plr_3_exert_burp_0";
    level.exert_sounds[4]["burp"][1] = "vox_plr_3_exert_burp_1";
    level.exert_sounds[4]["burp"][2] = "vox_plr_3_exert_burp_2";
    level.exert_sounds[4]["burp"][3] = "vox_plr_3_exert_burp_3";
    level.exert_sounds[4]["burp"][4] = "vox_plr_3_exert_burp_4";
    level.exert_sounds[4]["burp"][5] = "vox_plr_3_exert_burp_5";
    level.exert_sounds[4]["burp"][6] = "vox_plr_3_exert_burp_6";
    level.exert_sounds[1]["hitmed"][0] = "vox_plr_0_exert_pain_medium_0";
    level.exert_sounds[1]["hitmed"][1] = "vox_plr_0_exert_pain_medium_1";
    level.exert_sounds[1]["hitmed"][2] = "vox_plr_0_exert_pain_medium_2";
    level.exert_sounds[1]["hitmed"][3] = "vox_plr_0_exert_pain_medium_3";
    level.exert_sounds[2]["hitmed"][0] = "vox_plr_1_exert_pain_medium_0";
    level.exert_sounds[2]["hitmed"][1] = "vox_plr_1_exert_pain_medium_1";
    level.exert_sounds[2]["hitmed"][2] = "vox_plr_1_exert_pain_medium_2";
    level.exert_sounds[2]["hitmed"][3] = "vox_plr_1_exert_pain_medium_3";
    level.exert_sounds[3]["hitmed"][0] = "vox_plr_2_exert_pain_medium_0";
    level.exert_sounds[3]["hitmed"][1] = "vox_plr_2_exert_pain_medium_1";
    level.exert_sounds[3]["hitmed"][2] = "vox_plr_2_exert_pain_medium_2";
    level.exert_sounds[3]["hitmed"][3] = "vox_plr_2_exert_pain_medium_3";
    level.exert_sounds[4]["hitmed"][0] = "vox_plr_3_exert_pain_medium_0";
    level.exert_sounds[4]["hitmed"][1] = "vox_plr_3_exert_pain_medium_1";
    level.exert_sounds[4]["hitmed"][2] = "vox_plr_3_exert_pain_medium_2";
    level.exert_sounds[4]["hitmed"][3] = "vox_plr_3_exert_pain_medium_3";
    level.exert_sounds[1]["hitlrg"][0] = "vox_plr_0_exert_pain_high_0";
    level.exert_sounds[1]["hitlrg"][1] = "vox_plr_0_exert_pain_high_1";
    level.exert_sounds[1]["hitlrg"][2] = "vox_plr_0_exert_pain_high_2";
    level.exert_sounds[1]["hitlrg"][3] = "vox_plr_0_exert_pain_high_3";
    level.exert_sounds[2]["hitlrg"][0] = "vox_plr_1_exert_pain_high_0";
    level.exert_sounds[2]["hitlrg"][1] = "vox_plr_1_exert_pain_high_1";
    level.exert_sounds[2]["hitlrg"][2] = "vox_plr_1_exert_pain_high_2";
    level.exert_sounds[2]["hitlrg"][3] = "vox_plr_1_exert_pain_high_3";
    level.exert_sounds[3]["hitlrg"][0] = "vox_plr_2_exert_pain_high_0";
    level.exert_sounds[3]["hitlrg"][1] = "vox_plr_2_exert_pain_high_1";
    level.exert_sounds[3]["hitlrg"][2] = "vox_plr_2_exert_pain_high_2";
    level.exert_sounds[3]["hitlrg"][3] = "vox_plr_2_exert_pain_high_3";
    level.exert_sounds[4]["hitlrg"][0] = "vox_plr_3_exert_pain_high_0";
    level.exert_sounds[4]["hitlrg"][1] = "vox_plr_3_exert_pain_high_1";
    level.exert_sounds[4]["hitlrg"][2] = "vox_plr_3_exert_pain_high_2";
    level.exert_sounds[4]["hitlrg"][3] = "vox_plr_3_exert_pain_high_3";
}

tomb_audio_custom_response_line( player, index, category, type )
{
    russman = 0;
    samuel = 1;
    misty = 2;
    marlton = 3;

    switch ( player.characterindex )
    {
        case 0:
            level maps\mp\zombies\_zm_audio::setup_hero_rival( player, samuel, marlton, category, type );
            break;
        case 1:
            level maps\mp\zombies\_zm_audio::setup_hero_rival( player, russman, misty, category, type );
            break;
        case 2:
            level maps\mp\zombies\_zm_audio::setup_hero_rival( player, marlton, samuel, category, type );
            break;
        case 3:
            level maps\mp\zombies\_zm_audio::setup_hero_rival( player, misty, russman, category, type );
            break;
    }
}
