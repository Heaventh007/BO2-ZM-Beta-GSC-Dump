// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zm_tomb_utility;
#include maps\mp\zm_tomb_gamemodes;
#include maps\mp\zm_tomb_fx;
#include maps\mp\zm_tomb_tank;
#include maps\mp\zm_tomb_quest_fire;
#include maps\mp\zm_tomb_capture_zones;
#include maps\mp\zombies\_zm;
#include maps\mp\animscripts\zm_death;
#include maps\mp\zm_tomb_amb;
#include maps\mp\zombies\_zm_ai_mechz;
#include maps\mp\zombies\_zm_ai_quadrotor;
#include maps\mp\zombies\_load;
#include maps\mp\gametypes_zm\_spawning;
#include maps\mp\zm_tomb_vo;
#include maps\mp\zombies\_zm_perk_divetonuke;
#include maps\mp\zombies\_zm_perk_electric_cherry;
#include maps\mp\zombies\_zm_perk_oneinch_punch;
#include maps\mp\zm_tomb;
#include maps\mp\zm_tomb_distance_tracking;
#include maps\mp\zombies\_zm_magicbox_tomb;
#include maps\mp\zombies\_zm_challenges;
#include maps\mp\zombies\_zm_perk_random;
#include maps\mp\_visionset_mgr;
#include maps\mp\_sticky_grenade;
#include maps\mp\zombies\_zm_weap_beacon;
#include maps\mp\zombies\_zm_weap_claymore;
#include maps\mp\zombies\_zm_weap_riotshield_prison;
#include maps\mp\zombies\_zm_weap_staff_air;
#include maps\mp\zombies\_zm_weap_staff_fire;
#include maps\mp\zombies\_zm_weap_staff_lightning;
#include maps\mp\zombies\_zm_weap_staff_water;
#include maps\mp\zombies\_zm_weap_staff_revive;
#include maps\mp\zombies\_zm_weap_cymbal_monkey;
#include maps\mp\zm_tomb_giant_robot;
#include maps\mp\zm_tomb_traps;
#include maps\mp\zm_tomb_trap_pendulum;
#include maps\mp\zm_tomb_ambient_scripts;
#include maps\mp\zm_tomb_dig;
#include maps\mp\zm_tomb_main_quest;
#include maps\mp\zm_tomb_teleporter;
#include maps\mp\zombies\_zm_zonemgr;
#include maps\mp\zm_tomb_craftables;
#include character\c_zom_arlington;
#include character\c_zom_deluca;
#include character\c_zom_handsome;
#include character\c_zom_oleary;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_powerup_zombie_blood;
#include maps\mp\zombies\_zm_devgui;
#include maps\mp\zombies\_zm_score;

gamemode_callback_setup()
{
    maps\mp\zm_tomb_gamemodes::init();
}

survival_init()
{
    level.force_team_characters = 1;
    level.should_use_cia = 0;

    if ( randomint( 100 ) > 50 )
        level.should_use_cia = 1;

    level.precachecustomcharacters = ::precache_team_characters;
    level.givecustomcharacters = ::give_team_characters;
    flag_wait( "start_zombie_round_logic" );
}

zstandard_preinit()
{

}

createfx_callback()
{
    ents = getentarray();

    for ( i = 0; i < ents.size; i++ )
    {
        if ( ents[i].classname != "info_player_start" )
            ents[i] delete();
    }
}

main()
{
    level.zm_disable_recording_stats = 1;
    level.zm_disable_recording_buildable_stats = 1;
    maps\mp\zm_tomb_fx::main();
    level.default_game_mode = "zclassic";
    level.default_start_location = "tomb";
    setup_rex_starts();
    maps\mp\zm_tomb_tank::init_animtree();
    maps\mp\zm_tomb_quest_fire::init_animtree();
    maps\mp\zm_tomb_capture_zones::init_pap_animtree();
    maps\mp\zombies\_zm::init_fx();
    maps\mp\animscripts\zm_death::precache_gib_fx();
    level.zombiemode = 1;
    level._no_water_risers = 0;
    maps\mp\zm_tomb_amb::main();
    maps\mp\zombies\_zm_ai_mechz::precache();
    maps\mp\zombies\_zm_ai_quadrotor::precache();
    level._limited_equipment = [];
    level._limited_equipment[level._limited_equipment.size] = "equip_dieseldrone_zm";
    level._limited_equipment[level._limited_equipment.size] = "staff_fire_zm";
    level._limited_equipment[level._limited_equipment.size] = "staff_air_zm";
    level._limited_equipment[level._limited_equipment.size] = "staff_lightning_zm";
    level._limited_equipment[level._limited_equipment.size] = "staff_water_zm";
    level.a_func_vehicle_damage_override = [];
    level.callbackvehicledamage = ::tomb_vehicle_damage_override_wrapper;
    maps\mp\zombies\_load::main();

    if ( getdvar( #"createfx" ) == "1" )
        return;

    level_precache();
    maps\mp\gametypes_zm\_spawning::level_use_unified_spawning( 1 );
    level.givecustomloadout = ::givecustomloadout;
    level.precachecustomcharacters = ::precache_personality_characters;
    level.givecustomcharacters = ::give_personality_characters;
    level._zmbvoxlevelspecific = maps\mp\zm_tomb_vo::init_level_specific_audio;
    level.custom_player_fake_death = ::zm_player_fake_death;
    level.custom_player_fake_death_cleanup = ::zm_player_fake_death_cleanup;
    level.initial_round_wait_func = ::initial_round_wait_func;
    level._zombies_round_spawn_failsafe = ::tomb_round_spawn_failsafe;
    level.random_pandora_box_start = 1;
    level.zombiemode_using_pack_a_punch = 1;
    level.zombiemode_reusing_pack_a_punch = 1;
    level.zombiemode_using_juggernaut_perk = 1;
    level.zombiemode_using_revive_perk = 1;
    level.zombiemode_using_sleightofhand_perk = 1;
    level.zombiemode_using_additionalprimaryweapon_perk = 1;
    level.zombiemode_using_marathon_perk = 1;
    level.zombiemode_using_deadshot_perk = 1;
    level.zombiemode_using_doubletap_perk = 1;
    level.zombiemode_using_random_perk = 1;
    level.zombiemode_using_divetonuke_perk = 1;
    maps\mp\zombies\_zm_perk_divetonuke::enable_divetonuke_perk_for_level();
    level.zombiemode_using_electric_cherry_perk = 1;
    maps\mp\zombies\_zm_perk_electric_cherry::enable_electric_cherry_perk_for_level();
    maps\mp\zombies\_zm_perk_oneinch_punch::enable_oneinch_punch_perk_for_level();
    level.zombie_mode_using_oneinch_punch_perk = 1;
    level._custom_turn_packapunch_on = maps\mp\zm_tomb_capture_zones::pack_a_punch_dummy_init;
    level.custom_vending_precaching = maps\mp\zm_tomb::custom_vending_precaching;
    level.register_offhand_weapons_for_level_defaults_override = ::offhand_weapon_overrride;
    level.zombiemode_offhand_weapon_give_override = ::offhand_weapon_give_override;
    level._zombie_custom_add_weapons = ::custom_add_weapons;
    level._allow_melee_weapon_switching = 1;
    include_equipment( "equip_dieseldrone_zm" );
    include_equipment( "alcatraz_shield_zm" );
    level.custom_ai_type = [];
    include_weapons();
    include_powerups();
    precacheitem( "death_throe_zm" );
    level thread maps\mp\zm_tomb_distance_tracking::zombie_tracking_init();
    maps\mp\zombies\_zm_magicbox_tomb::init();
    maps\mp\zombies\_zm::init();
    maps\mp\zombies\_zm_challenges::init();
    maps\mp\zombies\_zm_perk_random::init();
    maps\mp\_visionset_mgr::vsmgr_register_info( "visionset", "zm_tomb", 14000, 10, 1, 1 );
    registerclientfield( "world", "pillbox_turret_anim", 14000, 1, "int" );
    n_bits = getminbitcountfornum( 15 );
    registerclientfield( "world", "packapunch_anim", 14000, n_bits, "int" );
    registerclientfield( "scriptmover", "generator_damage", 14000, 1, "int" );
    registerclientfield( "toplayer", "mud_overlay", 14000, 1, "int" );
    registerclientfield( "toplayer", "player_rain_level", 14000, 3, "int" );
    registerclientfield( "toplayer", "player_snow_level", 14000, 3, "int" );
    registerclientfield( "toplayer", "player_fog_level", 14000, 1, "int" );
    registerclientfield( "scriptmover", "sky_pillar", 14000, 2, "int" );
    level.special_weapon_magicbox_check = ::tomb_special_weapon_magicbox_check;
    level thread maps\mp\_sticky_grenade::init();
    maps\mp\zm_tomb_tank::init();
    maps\mp\zombies\_zm_weap_beacon::init();
    maps\mp\zombies\_zm_weap_claymore::init();
    maps\mp\zombies\_zm_weap_riotshield_prison::init();
    maps\mp\zombies\_zm_weap_staff_air::init();
    maps\mp\zombies\_zm_weap_staff_fire::init();
    maps\mp\zombies\_zm_weap_staff_lightning::init();
    maps\mp\zombies\_zm_weap_staff_water::init();
    maps\mp\zombies\_zm_weap_staff_revive::init();
    maps\mp\zombies\_zm_weap_cymbal_monkey::init();
    level._melee_weapons = [];
    maps\mp\zm_tomb_giant_robot::init_giant_robot_glows();
    maps\mp\zm_tomb_giant_robot::init_giant_robot();
    maps\mp\zm_tomb_traps::pillbox_turret_init();
    maps\mp\zm_tomb_traps::init_flame_trap_trigs();
    maps\mp\zm_tomb_trap_pendulum::initpendulumtrap();
    maps\mp\zm_tomb_capture_zones::init_capture_zones();
    level.a_e_slow_areas = getentarray( "player_slow_area", "targetname" );
    maps\mp\zm_tomb_ambient_scripts::init_tomb_ambient_scripts();
    level thread maps\mp\zombies\_zm_ai_mechz::init();
    level thread maps\mp\zombies\_zm_perk_random::init_animtree();
    level thread maps\mp\zombies\_zm_ai_quadrotor::init();
    maps\mp\zm_tomb_dig::init_shovel();
    level.n_crystals_pickedup = 0;
    level thread maps\mp\zm_tomb_main_quest::main_quest_init();
    level thread maps\mp\zm_tomb_teleporter::teleporter_init();
    level thread maps\mp\zombies\_zm_perk_random::start_random_machine();
    level.closest_player_override = ::tomb_closest_player_override;
    level.zones = [];
    level.zone_manager_init_func = ::working_zone_init;
    init_zones[0] = "zone_start";
    level thread maps\mp\zombies\_zm_zonemgr::manage_zones( init_zones );
    level.zombie_ai_limit = 24;
    level thread drop_all_barriers();
    level.player_out_of_playable_area_monitor = 0;
    temp_fx_ref_point = getent( "temp_fx_ref_point", "targetname" );
    temp_fx_ref_point delete();
    onplayerconnect_callback( ::on_player_connect );
    maps\mp\_visionset_mgr::vsmgr_register_info( "overlay", "zm_tomb_mud_filter", 14000, 12, 1, 1 );
    maps\mp\zombies\_zm::register_player_damage_callback( ::tomb_player_damage_callback );
    level.callbackactordamage = ::tomb_actor_damage_override_wrapper;
    flag_wait( "start_zombie_round_logic" );
    wait_network_frame();
    level notify( "oneinch_punch_on" );
    wait_network_frame();
    level notify( "specialty_additionalprimaryweapon_power_on" );
    wait_network_frame();
    level notify( "additionalprimaryweapon_on" );
    set_zombie_var( "zombie_use_failsafe", 0 );
    level thread check_solo_status();
/#
    maps\mp\zm_tomb_utility::setup_devgui();
#/
    init_weather_manager();
}

tomb_closest_player_override( v_zombie_origin, a_players_to_check )
{
    e_player_to_attack = undefined;

    while ( !isdefined( e_player_to_attack ) )
    {
        e_player_to_attack = get_closest_player_using_paths( v_zombie_origin, a_players_to_check );

        if ( level.vh_tank.n_players_on > 0 )
        {
            e_player_closest_on_tank = undefined;
            n_dist_tank_min = 99999999;
            a_players = maps\mp\zm_tomb_tank::get_players_on_tank();

            foreach ( e_player in a_players )
            {
                n_dist_sq = distance2dsquared( self.origin, e_player.origin );

                if ( n_dist_sq < n_dist_tank_min )
                {
                    n_dist_tank_min = n_dist_sq;
                    e_player_closest_on_tank = e_player;
                }
            }

            if ( is_player_valid( e_player_to_attack ) )
            {
                n_dist_for_path = distance2dsquared( self.origin, e_player_to_attack.origin );

                if ( n_dist_tank_min < n_dist_for_path )
                    e_player_to_attack = e_player_closest_on_tank;
            }
            else if ( is_player_valid( e_player_closest_on_tank ) )
                e_player_to_attack = e_player_closest_on_tank;
        }

        wait 0.1;
    }

    return e_player_to_attack;
}

tomb_player_damage_callback( e_inflictor, e_attacker, n_damage, n_dflags, str_means_of_death, str_weapon, v_point, v_dir, str_hit_loc, psoffsettime, b_damage_from_underneath, n_model_index, str_part_name )
{
    if ( isdefined( str_weapon ) )
    {
        if ( issubstr( str_weapon, "staff" ) )
            return 0;
        else if ( str_weapon == "t72_turret" )
            return 0;
        else if ( str_weapon == "quadrotorturret_zm" )
            return 0;
        else if ( str_weapon == "zombie_bullet_crouch_zm" )
            return 0;
        else if ( str_weapon == "zombie_markiv_side_cannon" )
            return 0;
        else if ( str_weapon == "zombie_markiv_turret" )
            return 0;
        else if ( str_weapon == "zombie_markiv_cannon" )
            return 0;
    }

    return n_damage;
}

level_precache()
{
    precacheshader( "specialty_zomblood_zombies" );
    precachemodel( "c_zom_guard" );
    precachemodel( "p6_zm_tm_orb_fire" );
    precachemodel( "p6_zm_tm_orb_wind" );
    precachemodel( "p6_zm_tm_orb_lightning" );
    precachemodel( "p6_zm_tm_orb_ice" );
    precachemodel( "fxuse_sky_pillar" );
}

on_player_connect()
{
    wait_network_frame();
    maps\mp\_visionset_mgr::vsmgr_activate( "visionset", "zm_tomb", self );
    self thread player_slow_movement_speed_monitor();
    self thread maps\mp\zm_tomb_craftables::quadrotor_watcher();
}

tomb_round_spawn_failsafe()
{
    self endon( "death" );
    prevorigin = self.origin;

    while ( true )
    {
        if ( isdefined( self.ignore_round_spawn_failsafe ) && self.ignore_round_spawn_failsafe )
            return;

        wait 15;

        if ( isdefined( self.is_inert ) && self.is_inert )
            continue;

        if ( isdefined( self.lastchunk_destroy_time ) )
        {
            if ( gettime() - self.lastchunk_destroy_time < 8000 )
                continue;
        }

        if ( self.origin[2] < -3000 )
        {
            if ( isdefined( level.put_timed_out_zombies_back_in_queue ) && level.put_timed_out_zombies_back_in_queue && !flag( "dog_round" ) && !( isdefined( self.isscreecher ) && self.isscreecher ) )
            {
                level.zombie_total++;
                level.zombie_total_subtract++;
            }

            self dodamage( self.health + 100, ( 0, 0, 0 ) );
            break;
        }

        if ( distancesquared( self.origin, prevorigin ) < 576 )
        {
            if ( isdefined( level.put_timed_out_zombies_back_in_queue ) && level.put_timed_out_zombies_back_in_queue && !flag( "dog_round" ) )
            {
                if ( !self.ignoreall && !( isdefined( self.nuked ) && self.nuked ) && !( isdefined( self.marked_for_death ) && self.marked_for_death ) && !( isdefined( self.isscreecher ) && self.isscreecher ) && ( isdefined( self.has_legs ) && self.has_legs ) && !( isdefined( self.is_brutus ) && self.is_brutus ) )
                {
                    level.zombie_total++;
                    level.zombie_total_subtract++;
                }
            }

            level.zombies_timeout_playspace++;
            self dodamage( self.health + 100, ( 0, 0, 0 ) );
            break;
        }

        prevorigin = self.origin;
    }
}

givecustomloadout( takeallweapons, alreadyspawned )
{
    self giveweapon( "knife_zm" );
    self give_start_weapon( 1 );
}

precache_team_characters()
{
    precachemodel( "c_zom_player_cdc_fb" );
    precachemodel( "c_zom_hazmat_viewhands" );
    precachemodel( "c_zom_player_cia_fb" );
    precachemodel( "c_zom_suit_viewhands" );
}

precache_personality_characters()
{
    character\c_zom_arlington::precache();
    character\c_zom_deluca::precache();
    character\c_zom_handsome::precache();
    character\c_zom_oleary::precache();
    precachemodel( "c_zom_arlington_coat_viewhands" );
    precachemodel( "c_zom_deluca_longsleeve_viewhands" );
    precachemodel( "c_zom_handsome_sleeveless_viewhands" );
    precachemodel( "c_zom_oleary_shortsleeve_viewhands" );
}

give_personality_characters()
{
    if ( isdefined( level.hotjoin_player_setup ) && [[ level.hotjoin_player_setup ]]( "c_zom_farmgirl_viewhands" ) )
        return;

    self detachall();

    if ( !isdefined( self.characterindex ) )
    {
        self.characterindex = assign_lowest_unused_character_index();

        if ( self.characterindex == 1 && !isdefined( level.isstuhlingeringame ) )
            level.isstuhlingeringame = 1;
    }

    self.favorite_wall_weapons_list = [];
    self.talks_in_danger = 0;
/#
    if ( getdvar( #"_id_40772CF1" ) != "" )
        self.characterindex = getdvarint( #"_id_40772CF1" );
#/

    switch ( self.characterindex )
    {
        case 0:
            self character\c_zom_arlington::main();
            self setviewmodel( "c_zom_arlington_coat_viewhands" );
            self set_player_is_female( 0 );
            self.whos_who_shader = "c_zom_player_arlington_fb";
            break;
        case 1:
            self character\c_zom_deluca::main();
            self setviewmodel( "c_zom_deluca_longsleeve_viewhands" );
            self set_player_is_female( 0 );
            self.whos_who_shader = "c_zom_player_deluca_fb";
            break;
        case 2:
            self character\c_zom_handsome::main();
            self setviewmodel( "c_zom_handsome_sleeveless_viewhands" );
            self set_player_is_female( 0 );
            self.whos_who_shader = "c_zom_player_handsome_fb";
            break;
        case 3:
            self character\c_zom_oleary::main();
            self setviewmodel( "c_zom_oleary_shortsleeve_viewhands" );
            self set_player_is_female( 0 );
            self.whos_who_shader = "c_zom_player_oleary_fb";
            break;
    }

    self setmovespeedscale( 1 );
    self setsprintduration( 4 );
    self setsprintcooldown( 0 );
}

set_exert_id()
{
    self endon( "disconnect" );
    wait_network_frame();
    wait_network_frame();
    self maps\mp\zombies\_zm_audio::setexertvoice( self.characterindex + 1 );
}

assign_lowest_unused_character_index()
{
    charindexarray = [];
    charindexarray[0] = 0;
    charindexarray[1] = 1;
    charindexarray[2] = 2;
    charindexarray[3] = 3;
    players = get_players();

    if ( players.size == 1 )
    {
        charindexarray = array_randomize( charindexarray );
        return charindexarray[0];
    }
    else if ( players.size == 2 )
    {
        foreach ( player in players )
        {
            if ( isdefined( player.characterindex ) )
            {
                if ( player.characterindex == 2 || player.characterindex == 0 )
                {
                    if ( randomint( 100 ) > 50 )
                        return 1;

                    return 3;
                }
                else if ( player.characterindex == 3 || player.characterindex == 1 )
                {
                    if ( randomint( 100 ) > 50 )
                        return 0;

                    return 2;
                }
            }
        }

        charindexarray = array_randomize( charindexarray );
        return charindexarray[0];
    }
    else
    {
        foreach ( player in players )
        {
            if ( isdefined( player.characterindex ) )
                arrayremovevalue( charindexarray, player.characterindex, 0 );
        }

        if ( charindexarray.size > 0 )
            return charindexarray[0];
    }

    return 0;
}

give_team_characters()
{
    self detachall();
    self set_player_is_female( 0 );

    if ( !isdefined( self.characterindex ) )
    {
        self.characterindex = 1;

        if ( self.team == "axis" )
            self.characterindex = 0;
    }

    switch ( self.characterindex )
    {
        case 0:
        case 2:
            self setmodel( "c_zom_player_cia_fb" );
            self.voice = "american";
            self.skeleton = "base";
            self setviewmodel( "c_zom_suit_viewhands" );
            self.characterindex = 0;
            break;
        case 1:
        case 3:
            self setmodel( "c_zom_player_cdc_fb" );
            self.voice = "american";
            self.skeleton = "base";
            self setviewmodel( "c_zom_hazmat_viewhands" );
            self.characterindex = 1;
            break;
    }

    self setmovespeedscale( 1 );
    self setsprintduration( 4 );
    self setsprintcooldown( 0 );
}

initcharacterstartindex()
{
    level.characterstartindex = randomint( 4 );
}

zm_player_fake_death_cleanup()
{
    if ( isdefined( self._fall_down_anchor ) )
    {
        self._fall_down_anchor delete();
        self._fall_down_anchor = undefined;
    }
}

zm_player_fake_death( vdir )
{
    level notify( "fake_death" );
    self notify( "fake_death" );
    stance = self getstance();
    self.ignoreme = 1;
    self enableinvulnerability();
    self takeallweapons();

    if ( isdefined( self.insta_killed ) && self.insta_killed )
    {
        self maps\mp\zombies\_zm::player_fake_death();
        self allowprone( 1 );
        self allowcrouch( 0 );
        self allowstand( 0 );
        wait 0.25;
        self freezecontrols( 1 );
    }
    else
    {
        self freezecontrols( 1 );
        self thread fall_down( vdir, stance );
        wait 1;
    }
}

fall_down( vdir, stance )
{
    self endon( "disconnect" );
    level endon( "game_module_ended" );
    self ghost();
    origin = self.origin;
    xyspeed = ( 0, 0, 0 );
    angles = self getplayerangles();
    angles = ( angles[0], angles[1], angles[2] + randomfloatrange( -5, 5 ) );

    if ( isdefined( vdir ) && length( vdir ) > 0 )
    {
        xyspeedmag = 40 + randomint( 12 ) + randomint( 12 );
        xyspeed = xyspeedmag * vectornormalize( ( vdir[0], vdir[1], 0 ) );
    }

    linker = spawn( "script_origin", ( 0, 0, 0 ) );
    linker.origin = origin;
    linker.angles = angles;
    self._fall_down_anchor = linker;
    self playerlinkto( linker );
    self playsoundtoplayer( "zmb_player_death_fall", self );
    falling = stance != "prone";

    if ( falling )
    {
        origin = playerphysicstrace( origin, origin + xyspeed );
        eye = self get_eye();
        floor_height = 10 + origin[2] - eye[2];
        origin = origin + ( 0, 0, floor_height );
        lerptime = 0.5;
        linker moveto( origin, lerptime, lerptime );
        linker rotateto( angles, lerptime, lerptime );
    }

    self freezecontrols( 1 );

    if ( falling )
        linker waittill( "movedone" );

    self giveweapon( "death_throe_zm" );
    self switchtoweapon( "death_throe_zm" );

    if ( falling )
    {
        bounce = randomint( 4 ) + 8;
        origin = origin + ( 0, 0, bounce ) - xyspeed * 0.1;
        lerptime = bounce / 50.0;
        linker moveto( origin, lerptime, 0, lerptime );
        linker waittill( "movedone" );
        origin = origin + ( 0, 0, bounce * -1 ) + xyspeed * 0.1;
        lerptime = lerptime / 2.0;
        linker moveto( origin, lerptime, lerptime );
        linker waittill( "movedone" );
        linker moveto( origin, 5, 0 );
    }

    wait 15;
    linker delete();
}

initial_round_wait_func()
{
    flag_wait( "initial_blackscreen_passed" );
}

offhand_weapon_overrride()
{
    register_lethal_grenade_for_level( "frag_grenade_zm" );
    level.zombie_lethal_grenade_player_init = "frag_grenade_zm";
    register_lethal_grenade_for_level( "sticky_grenade_zm" );
    register_tactical_grenade_for_level( "cymbal_monkey_zm" );
    register_tactical_grenade_for_level( "emp_grenade_zm" );
    register_tactical_grenade_for_level( "beacon_zm" );
    register_placeable_mine_for_level( "claymore_zm" );
    register_melee_weapon_for_level( "knife_zm" );
    level.zombie_melee_weapon_player_init = "knife_zm";
    register_equipment_for_level( "alcatraz_shield_zm" );
    level.zombie_equipment_player_init = undefined;
    level.equipment_safe_to_drop = ::equipment_safe_to_drop;
}

equipment_safe_to_drop( weapon )
{
    if ( !isdefined( self.origin ) )
        return true;

    return true;
}

offhand_weapon_give_override( str_weapon )
{
    self endon( "death" );

    if ( is_tactical_grenade( str_weapon ) && isdefined( self get_player_tactical_grenade() ) && !self is_player_tactical_grenade( str_weapon ) )
    {
        self setweaponammoclip( self get_player_tactical_grenade(), 0 );
        self takeweapon( self get_player_tactical_grenade() );
    }

    return false;
}

custom_add_weapons()
{
    level.laststandpistol = "c96_zm";
    level.default_laststandpistol = "c96_zm";
    level.default_solo_laststandpistol = "c96_upgraded_zm";
    level.start_weapon = "c96_zm";
    add_zombie_weapon( "lsat_zm", "lsat_upgraded_zm", &"ZOMBIE_WEAPON_LSAT", 50, "", "", undefined );
    add_zombie_weapon( "hamr_zm", "hamr_upgraded_zm", &"ZOMBIE_WEAPON_HAMR", 50, "mg", "", undefined );
    add_zombie_weapon( "galil_zm", "galil_upgraded_zm", &"ZOMBIE_WEAPON_GALIL", 50, "assault", "", undefined );
    add_zombie_weapon( "hk416_zm", "hk416_upgraded_zm", &"ZOMBIE_WEAPON_HK416", 50, "", "", undefined );
    add_zombie_weapon( "m14_zm", "m14_upgraded_zm", &"ZOMBIE_WEAPON_M14", 500, "rifle", "", undefined );
    add_zombie_weapon( "mp44_zm", "mp44_upgraded_zm", &"ZOMBIE_ASYLUM_WEAPON_MP44", 1400, "mg", "", undefined );
    add_zombie_weapon( "scar_zm", "scar_upgraded_zm", &"ZOMBIE_WEAPON_SCAR", 50, "rifle", "", undefined );
    add_zombie_weapon( "870mcs_zm", "870mcs_upgraded_zm", &"ZOMBIE_WEAPON_870MCS", 900, "shotgun", "", undefined );
    add_zombie_weapon( "saiga12_zm", "saiga12_upgraded_zm", &"ZOMBIE_WEAPON_SAIGA12", 50, "wpck_saiga12", "", undefined, 1 );
    add_zombie_weapon( "srm1216_zm", "srm1216_upgraded_zm", &"ZOMBIE_WEAPON_SRM1216", 50, "wpck_m1216", "", undefined, 1 );
    add_zombie_weapon( "ksg_zm", "ksg_upgraded_zm", &"ZOMBIE_WEAPON_KSG", 1100, "shotgun", "", undefined );
    add_zombie_weapon( "ak74u_zm", "ak74u_upgraded_zm", &"ZOMBIE_WEAPON_AK74U", 1200, "smg", "", undefined );
    add_zombie_weapon( "mp40_zm", "mp40_upgraded_zm", &"ZOMBIE_WEAPON_MP40", 1000, "smg", "", undefined );
    add_zombie_weapon( "uzi_zm", "uzi_upgraded_zm", &"ZOMBIE_WEAPON_UZI", 1000, "smg", "", undefined );
    add_zombie_weapon( "evoskorpion_zm", "evoskorpion_upgraded_zm", &"ZOMBIE_WEAPON_EVOSKORPION", 50, "smg", "", undefined );
    add_zombie_weapon( "ballista_zm", "ballista_upgraded_zm", &"ZOMBIE_TOMB_WEAPON_BALLISTA", 500, "sniper", "", undefined );
    add_zombie_weapon( "dsr50_zm", "dsr50_upgraded_zm", &"ZOMBIE_WEAPON_DR50", 50, "wpck_dsr50", "", undefined, 1 );
    add_zombie_weapon( "beretta93r_zm", "beretta93r_upgraded_zm", &"ZOMBIE_WEAPON_BERETTA93r", 1000, "", "", undefined );
    add_zombie_weapon( "fiveseven_zm", "fiveseven_upgraded_zm", &"ZOMBIE_WEAPON_FIVESEVEN", 1100, "wpck_57", "", undefined, 1 );
    add_zombie_weapon( "python_zm", "python_upgraded_zm", &"ZOMBIE_WEAPON_PYTHON", 50, "wpck_python", "", undefined, 1 );
    add_zombie_weapon( "c96_zm", "c96_upgraded_zm", &"ZOMBIE_WEAPON_C96", 50, "", "", undefined, 1 );
    add_zombie_weapon( "fivesevendw_zm", "fivesevendw_upgraded_zm", &"ZOMBIE_WEAPON_FIVESEVENDW", 50, "wpck_duel57", "", undefined, 1 );
    add_zombie_weapon( "beacon_zm", undefined, &"ZOMBIE_WEAPON_BEACON", 2000, "grenade", "", undefined, 1 );
    add_zombie_weapon( "claymore_zm", undefined, &"ZOMBIE_WEAPON_CLAYMORE", 1000, "grenade", "", undefined );
    add_zombie_weapon( "cymbal_monkey_zm", undefined, &"ZOMBIE_WEAPON_SATCHEL_2000", 2000, "wpck_monkey", "", undefined, 1 );
    add_zombie_weapon( "frag_grenade_zm", undefined, &"ZOMBIE_WEAPON_FRAG_GRENADE", 250, "grenade", "", 250 );
    add_zombie_weapon( "ray_gun_zm", "ray_gun_upgraded_zm", &"ZOMBIE_WEAPON_RAYGUN", 10000, "wpck_ray", "", undefined, 1 );
    add_zombie_weapon( "raygun_mark2_zm", "raygun_mark2_upgraded_zm", &"ZOMBIE_WEAPON_RAYGUN_MARK2", 10000, "raygun_mark2", "", undefined );
    add_zombie_weapon( "sticky_grenade_zm", undefined, &"ZOMBIE_WEAPON_STICKY_GRENADE", 250, "grenade", "", 250 );
    add_zombie_weapon( "usrpg_zm", "usrpg_upgraded_zm", &"ZOMBIE_WEAPON_USRPG", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "staff_air_zm", undefined, &"AIR_STAFF", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "staff_air_upgraded_zm", undefined, &"AIR_STAFF_CHARGED", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "staff_fire_zm", undefined, &"FIRE_STAFF", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "staff_fire_upgraded_zm", undefined, &"FIRE_STAFF_CHARGED", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "staff_lightning_zm", undefined, &"LIGHTNING_STAFF", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "staff_lightning_upgraded_zm", undefined, &"LIGHTNING_STAFF_CHARGED", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "staff_water_zm", undefined, &"WATER_STAFF", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "staff_water_zm_cheap", undefined, &"WATER_STAFF", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "staff_water_upgraded_zm", undefined, &"WATER_STAFF_CHARGED", 50, "wpck_rpg", "", undefined, 1 );
    add_zombie_weapon( "staff_revive_zm", undefined, &"ZM_TOMB_WEAP_STAFF_REVIVE", 50, "wpck_rpg", "", undefined, 1 );
    change_weapon_cost( "mp40_zm", 1300 );
}

change_weapon_cost( str_weapon, n_cost )
{
    level.zombie_weapons[str_weapon].cost = n_cost;
    level.zombie_weapons[str_weapon].ammo_cost = round_up_to_ten( int( n_cost * 0.5 ) );
}

include_weapons()
{
    include_weapon( "hamr_zm" );
    include_weapon( "hamr_upgraded_zm", 0 );
    include_weapon( "lsat_zm" );
    include_weapon( "lsat_upgraded_zm", 0 );
    include_weapon( "galil_zm" );
    include_weapon( "galil_upgraded_zm", 0 );
    include_weapon( "hk416_zm" );
    include_weapon( "hk416_upgraded_zm", 0 );
    include_weapon( "m14_zm", 0 );
    include_weapon( "m14_upgraded_zm", 0 );
    include_weapon( "mp44_zm", 0 );
    include_weapon( "mp44_upgraded_zm", 0 );
    include_weapon( "scar_zm" );
    include_weapon( "scar_upgraded_zm", 0 );
    include_weapon( "870mcs_zm", 0 );
    include_weapon( "870mcs_upgraded_zm", 0 );
    include_weapon( "ksg_zm", 0 );
    include_weapon( "ksg_upgraded_zm", 0 );
    include_weapon( "saiga12_zm" );
    include_weapon( "saiga12_upgraded_zm", 0 );
    include_weapon( "srm1216_zm" );
    include_weapon( "srm1216_upgraded_zm", 0 );
    include_weapon( "ak74u_zm", 0 );
    include_weapon( "ak74u_upgraded_zm", 0 );
    include_weapon( "mp40_zm", 0 );
    include_weapon( "mp40_upgraded_zm", 0 );
    include_weapon( "uzi_zm" );
    include_weapon( "uzi_upgraded_zm", 0 );
    include_weapon( "evoskorpion_zm" );
    include_weapon( "evoskorpion_upgraded_zm", 0 );
    include_weapon( "ballista_zm", 0 );
    include_weapon( "ballista_upgraded_zm", 0 );
    include_weapon( "dsr50_zm" );
    include_weapon( "dsr50_upgraded_zm", 0 );
    include_weapon( "beretta93r_zm", 0 );
    include_weapon( "beretta93r_upgraded_zm", 0 );
    include_weapon( "fiveseven_zm", 0 );
    include_weapon( "fiveseven_upgraded_zm", 0 );
    include_weapon( "python_zm" );
    include_weapon( "python_upgraded_zm", 0 );
    include_weapon( "c96_zm", 0 );
    include_weapon( "c96_upgraded_zm", 0 );
    include_weapon( "fivesevendw_zm" );
    include_weapon( "fivesevendw_upgraded_zm", 0 );
    include_weapon( "beacon_zm", 0 );
    include_weapon( "claymore_zm", 0 );
    include_weapon( "cymbal_monkey_zm" );
    include_weapon( "frag_grenade_zm", 0 );
    include_weapon( "knife_zm", 0 );
    include_weapon( "ray_gun_zm" );
    include_weapon( "ray_gun_upgraded_zm", 0 );
    include_weapon( "raygun_mark2_zm", 1 );
    include_weapon( "raygun_mark2_upgraded_zm", 0 );
    include_weapon( "sticky_grenade_zm", 0 );
    include_weapon( "alcatraz_shield_zm", 0 );
    include_weapon( "usrpg_zm" );
    include_weapon( "usrpg_upgraded_zm", 0 );
    add_weapon_to_content( "raygun_mark2_zm", "dlc3" );
    add_limited_weapon( "c96_zm", 0 );
    add_limited_weapon( "ray_gun_zm", 4 );
    add_limited_weapon( "ray_gun_upgraded_zm", 4 );
    add_limited_weapon( "raygun_mark2_zm", 1 );
    add_limited_weapon( "raygun_mark2_upgraded_zm", 1 );
    include_weapon( "staff_air_zm", 0 );
    include_weapon( "staff_air_upgraded_zm", 0 );
    precacheitem( "staff_air_upgraded2_zm", 0 );
    precacheitem( "staff_air_upgraded3_zm", 0 );
    include_weapon( "staff_fire_zm", 0 );
    include_weapon( "staff_fire_upgraded_zm", 0 );
    precacheitem( "staff_fire_upgraded2_zm", 0 );
    precacheitem( "staff_fire_upgraded3_zm", 0 );
    include_weapon( "staff_lightning_zm", 0 );
    include_weapon( "staff_lightning_upgraded_zm", 0 );
    precacheitem( "staff_lightning_upgraded2_zm", 0 );
    precacheitem( "staff_lightning_upgraded3_zm", 0 );
    include_weapon( "staff_water_zm", 0 );
    include_weapon( "staff_water_zm_cheap", 0 );
    include_weapon( "staff_water_upgraded_zm", 0 );
    precacheitem( "staff_water_upgraded2_zm", 0 );
    precacheitem( "staff_water_upgraded3_zm", 0 );
    include_weapon( "staff_revive_zm", 0 );
    add_limited_weapon( "staff_air_zm", 0 );
    add_limited_weapon( "staff_air_upgraded_zm", 0 );
    add_limited_weapon( "staff_fire_zm", 0 );
    add_limited_weapon( "staff_fire_upgraded_zm", 0 );
    add_limited_weapon( "staff_lightning_zm", 0 );
    add_limited_weapon( "staff_lightning_upgraded_zm", 0 );
    add_limited_weapon( "staff_water_zm", 0 );
    add_limited_weapon( "staff_water_zm_cheap", 0 );
    add_limited_weapon( "staff_water_upgraded_zm", 0 );
}

include_powerups()
{
    include_powerup( "nuke" );
    include_powerup( "insta_kill" );
    include_powerup( "double_points" );
    include_powerup( "full_ammo" );
    include_powerup( "fire_sale" );
    include_powerup( "free_perk" );
    include_powerup( "zombie_blood" );
    include_powerup( "bonus_points_player" );
    include_powerup( "bonus_points_team" );
    level.level_specific_init_powerups = ::tomb_powerup_init;
    level._zombiemode_powerup_grab = ::tomb_powerup_grab;
/#
    setup_powerup_devgui();
#/
}

tomb_powerup_init()
{
    maps\mp\zombies\_zm_powerup_zombie_blood::init( "c_zom_player_zombie_fb" );
}

tomb_powerup_grab( s_powerup, e_player )
{
    if ( s_powerup.powerup_name == "zombie_blood" )
        level thread maps\mp\zombies\_zm_powerup_zombie_blood::zombie_blood_powerup( s_powerup, e_player );
}

setup_powerup_devgui()
{
/#
    setdvar( "zombie_blood", "off" );
    adddebugcommand( "devgui_cmd \"Zombies:2/Power Ups:2/Now:1/Drop Zombie Blood:1\" \"zombie_blood on\"\n" );
    level thread watch_devgui_zombie_blood();
#/
}

watch_devgui_zombie_blood()
{
/#
    while ( true )
    {
        if ( getdvar( #"_id_FA71C6BA" ) == "on" )
        {
            setdvar( "zombie_blood", "off" );
            level thread maps\mp\zombies\_zm_devgui::zombie_devgui_give_powerup( "zombie_blood", 1 );
        }

        wait 0.1;
    }
#/
}

watch_devgui_double_points()
{
/#
    while ( true )
    {
        if ( getdvar( #"_id_1FB6003C" ) == "on" )
        {
            setdvar( "double_points", "off" );
            level thread maps\mp\zombies\_zm_devgui::zombie_devgui_give_powerup( "double_points", 1 );
            iprintlnbold( "change" );
        }

        wait 0.1;
    }
#/
}

setup_rex_starts()
{
    add_gametype( "zclassic", ::dummy, "zclassic", ::dummy );
    add_gameloc( "tomb", ::dummy, "tomb", ::dummy );
}

dummy()
{

}

working_zone_init()
{
    flag_init( "always_on" );
    flag_set( "always_on" );
    add_adjacent_zone( "zone_robot_head", "zone_robot_head", "always_on" );
    add_adjacent_zone( "zone_bunker_tank_d", "zone_bunker_tank_e", "always_on" );
    add_adjacent_zone( "zone_village_staff", "zone_village_staff", "always_on" );
    add_adjacent_zone( "zone_start", "zone_start_a", "always_on" );
    add_adjacent_zone( "zone_start", "zone_start_b", "always_on" );
    add_adjacent_zone( "zone_start_a", "zone_start_b", "always_on" );
    add_adjacent_zone( "zone_start_a", "zone_bunker_1a", "activate_zone_bunker_1" );
    add_adjacent_zone( "zone_bunker_1a", "zone_bunker_1", "activate_zone_bunker_1" );
    add_adjacent_zone( "zone_bunker_1a", "zone_bunker_1", "activate_zone_bunker_3a" );
    add_adjacent_zone( "zone_bunker_1", "zone_bunker_3a", "activate_zone_bunker_3a" );
    add_adjacent_zone( "zone_bunker_3a", "zone_bunker_3b", "activate_zone_bunker_3a" );
    add_adjacent_zone( "zone_bunker_3a", "zone_bunker_3b", "activate_zone_bunker_3b" );
    add_adjacent_zone( "zone_bunker_3b", "zone_bunker_5a", "activate_zone_bunker_3b" );
    add_adjacent_zone( "zone_bunker_5a", "zone_bunker_5b", "activate_zone_bunker_3b" );
    add_adjacent_zone( "zone_start_b", "zone_bunker_2a", "activate_zone_bunker_2" );
    add_adjacent_zone( "zone_bunker_2a", "zone_bunker_2", "activate_zone_bunker_2" );
    add_adjacent_zone( "zone_bunker_2a", "zone_bunker_2", "activate_zone_bunker_4a" );
    add_adjacent_zone( "zone_bunker_2", "zone_bunker_4a", "activate_zone_bunker_4a" );
    add_adjacent_zone( "zone_bunker_4a", "zone_bunker_4b", "activate_zone_bunker_4a" );
    add_adjacent_zone( "zone_bunker_4a", "zone_bunker_4b", "activate_zone_bunker_4b" );
    add_adjacent_zone( "zone_bunker_4a", "zone_bunker_5a", "activate_zone_bunker_4b" );
    add_adjacent_zone( "zone_bunker_5a", "zone_bunker_5b", "activate_zone_bunker_4b" );
    add_adjacent_zone( "zone_bunker_tank_a", "zone_nml_0", "activate_zone_nml" );
    add_adjacent_zone( "zone_bunker_tank_a", "zone_bunker_tank_b", "activate_zone_nml" );
    add_adjacent_zone( "zone_bunker_tank_b", "zone_bunker_tank_c", "activate_zone_nml" );
    add_adjacent_zone( "zone_bunker_tank_d", "zone_bunker_tank_e", "activate_zone_nml" );
    add_adjacent_zone( "zone_bunker_tank_e", "zone_bunker_tank_f", "activate_zone_nml" );
    add_adjacent_zone( "zone_bunker_tank_f", "zone_nml_3", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_11", "zone_village_12", "activate_zone_nml" );
    add_adjacent_zone( "zone_bunker_5b", "zone_nml_2", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_0", "zone_nml_1", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_0", "zone_nml_4", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_0", "zone_nml_5", "activate_zone_ruins" );
    add_adjacent_zone( "zone_nml_1", "zone_nml_2", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_1", "zone_nml_4", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_1", "zone_nml_5", "activate_zone_ruins" );
    add_adjacent_zone( "zone_nml_1", "zone_nml_6", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_2", "zone_nml_3", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_2", "zone_nml_5", "activate_zone_ruins" );
    add_adjacent_zone( "zone_nml_2", "zone_nml_6", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_2", "zone_nml_7", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_3", "zone_nml_6", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_3", "zone_nml_7", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_3", "zone_nml_farm", "activate_zone_farm" );
    add_adjacent_zone( "zone_nml_4", "zone_nml_5", "activate_zone_ruins" );
    add_adjacent_zone( "zone_nml_4", "zone_nml_8", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_4", "zone_nml_9", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_5", "zone_nml_6", "activate_zone_ruins" );
    add_adjacent_zone( "zone_nml_5", "zone_nml_8", "activate_zone_ruins" );
    add_adjacent_zone( "zone_nml_5", "zone_nml_9", "activate_zone_ruins" );
    add_adjacent_zone( "zone_nml_5", "zone_nml_10", "activate_zone_ruins" );
    add_adjacent_zone( "zone_nml_5", "zone_nml_12", "activate_zone_ruins" );
    add_adjacent_zone( "zone_nml_6", "zone_nml_7", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_6", "zone_nml_9", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_6", "zone_nml_10", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_7", "zone_nml_10", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_7", "zone_nml_11", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_7", "zone_nml_farm", "activate_zone_farm" );
    add_adjacent_zone( "zone_nml_8", "zone_nml_9", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_9", "zone_nml_10", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_9", "zone_village_0", "activate_zone_village_0" );
    add_adjacent_zone( "zone_nml_12", "ug_bottom_zone", "activate_zone_crypt" );
    add_adjacent_zone( "zone_village_0", "zone_village_1", "activate_zone_village_1" );
    add_adjacent_zone( "zone_village_1", "zone_village_2", "activate_zone_village_2" );
    add_adjacent_zone( "zone_village_2", "zone_village_4", "activate_zone_village_2" );
    add_adjacent_zone( "zone_village_1", "zone_village_3", "activate_zone_village_3" );
    add_adjacent_zone( "zone_village_3", "zone_village_5", "activate_zone_village_3" );
    add_adjacent_zone( "zone_village_3", "zone_village_6", "activate_zone_village_6" );
    add_adjacent_zone( "zone_village_6", "zone_village_10", "activate_zone_village_6" );
    add_adjacent_zone( "zone_village_10", "zone_village_11", "activate_zone_village_6" );
    add_adjacent_zone( "zone_village_2", "zone_village_4", "activate_zone_village_4_5" );
    add_adjacent_zone( "zone_village_4", "zone_village_5", "activate_zone_village_4_5" );
    add_adjacent_zone( "zone_village_3", "zone_village_5", "activate_zone_village_4_5" );
    add_adjacent_zone( "zone_village_6", "zone_village_7", "activate_zone_village_7" );
    add_adjacent_zone( "zone_village_8", "zone_village_7", "activate_zone_village_7" );
    add_adjacent_zone( "zone_village_9", "zone_village_7", "activate_zone_village_7" );
    add_adjacent_zone( "zone_village_10", "zone_village_7", "activate_zone_village_7" );
    add_adjacent_zone( "zone_village_4", "zone_village_8", "activate_zone_village_9" );
    add_adjacent_zone( "zone_village_8", "zone_village_9", "activate_zone_village_9" );
    add_adjacent_zone( "zone_village_9", "zone_village_12", "activate_zone_village_9" );
    add_adjacent_zone( "zone_bunker_1", "zone_bunker_1", "activate_zone_bunker_1_tank" );
    add_adjacent_zone( "zone_bunker_2", "zone_bunker_2", "activate_zone_bunker_2_tank" );
    add_adjacent_zone( "zone_bunker_4a", "zone_bunker_4b", "activate_zone_bunker_4_tank" );
    level thread activate_zone_bunker_1();
    level thread activate_zone_bunker_2();
    level thread activate_zone_bunker_4();
    add_adjacent_zone( "zone_bunker_1a", "zone_fire_stairs", "activate_zone_bunker_1" );
    add_adjacent_zone( "zone_bunker_1a", "zone_fire_stairs", "activate_zone_bunker_3a" );
    add_adjacent_zone( "zone_nml_0", "zone_air_stairs", "activate_zone_nml" );
    add_adjacent_zone( "zone_nml_7", "zone_bolt_stairs", "activate_zone_nml" );
    add_adjacent_zone( "zone_village_9", "zone_ice_stairs", "activate_zone_village_9" );
    add_adjacent_zone( "zone_fire_stairs", "zone_fire_anteroom", "activate_zone_fire_chamber" );
    add_adjacent_zone( "zone_air_stairs", "zone_air_anteroom", "activate_zone_air_chamber" );
    add_adjacent_zone( "zone_bolt_stairs", "zone_bolt_anteroom", "activate_zone_bolt_chamber" );
    add_adjacent_zone( "zone_ice_stairs", "zone_ice_anteroom", "activate_zone_ice_chamber" );
    add_adjacent_zone( "zone_air_anteroom", "zone_air_chamber", "activate_zone_air_chamber" );
    add_adjacent_zone( "zone_fire_anteroom", "zone_fire_chamber", "activate_zone_fire_chamber" );
    add_adjacent_zone( "zone_ice_anteroom", "zone_ice_chamber", "activate_zone_ice_chamber" );
    add_adjacent_zone( "zone_bolt_anteroom", "zone_bolt_chamber", "activate_zone_bolt_chamber" );
}

activate_zone_bunker_1()
{
    trigger_wait( "trig_zone_bunker_1" );
    flag_set( "activate_zone_bunker_1_tank" );
}

activate_zone_bunker_2()
{
    trigger_wait( "trig_zone_bunker_2" );
    flag_set( "activate_zone_bunker_2_tank" );
}

activate_zone_bunker_4()
{
    trigger_wait( "trig_zone_bunker_4" );
    flag_set( "activate_zone_bunker_4_tank" );
}

check_tank_platform_zone()
{
    while ( true )
    {
        level waittill( "newzoneActive", activezone );

        if ( activezone == "zone_bunker_3" )
            break;

        wait 1;
    }

    flag_set( "activate_zone_nml" );
}

tomb_vehicle_damage_override_wrapper( einflictor, eattacker, idamage, idflags, smeansofdeath, sweapon, vpoint, vdir, shitloc, psoffsettime, damagefromunderneath, modelindex, partname )
{
    if ( isdefined( level.a_func_vehicle_damage_override[self.vehicletype] ) )
        return level.a_func_vehicle_damage_override[self.vehicletype];

    return idamage;
}

drop_all_barriers()
{
    zkeys = getarraykeys( level.zones );

    for ( z = 0; z < level.zones.size; z++ )
    {
        zbarriers = get_all_zone_zbarriers( zkeys[z] );

        if ( !isdefined( zbarriers ) )
            continue;

        foreach ( zbarrier in zbarriers )
        {
            zbarrier_pieces = zbarrier getnumzbarrierpieces();

            for ( i = 0; i < zbarrier_pieces; i++ )
            {
                zbarrier hidezbarrierpiece( i );
                zbarrier setzbarrierpiecestate( i, "open" );
            }

            wait 0.05;
        }
    }
}

get_all_zone_zbarriers( zone_name )
{
    if ( !isdefined( zone_name ) )
        return undefined;

    zone = level.zones[zone_name];
    return zone.zbarriers;
}

tomb_special_weapon_magicbox_check( weapon )
{
    if ( weapon == "ray_gun_zm" )
    {
        if ( self has_weapon_or_upgrade( "raygun_mark2_zm" ) )
            return false;
    }

    if ( weapon == "raygun_mark2_zm" )
    {
        if ( self has_weapon_or_upgrade( "ray_gun_zm" ) )
            return false;

        if ( randomint( 100 ) >= 33 )
            return false;
    }

    return true;
}

custom_vending_precaching()
{
    if ( level._custom_perks.size > 0 )
    {
        a_keys = getarraykeys( level._custom_perks );

        for ( i = 0; i < a_keys.size; i++ )
        {
            if ( isdefined( level._custom_perks[a_keys[i]].precache_func ) )
                level [[ level._custom_perks[a_keys[i]].precache_func ]]();
        }
    }

    if ( isdefined( level.zombiemode_using_pack_a_punch ) && level.zombiemode_using_pack_a_punch )
    {
        precacheitem( "zombie_knuckle_crack" );
        precachemodel( "p6_anim_zm_buildable_pap" );
        precachemodel( "p6_anim_zm_buildable_pap_on" );
        precachestring( &"ZOMBIE_PERK_PACKAPUNCH" );
        precachestring( &"ZOMBIE_PERK_PACKAPUNCH_ATT" );
        level._effect["packapunch_fx"] = loadfx( "maps/zombie/fx_zombie_packapunch" );
        level.machine_assets["packapunch"] = spawnstruct();
        level.machine_assets["packapunch"].weapon = "zombie_knuckle_crack";
    }

    if ( isdefined( level.zombiemode_using_additionalprimaryweapon_perk ) && level.zombiemode_using_additionalprimaryweapon_perk )
    {
        precacheitem( "zombie_perk_bottle_additionalprimaryweapon" );
        precacheshader( "specialty_additionalprimaryweapon_zombies" );
        precachemodel( "zombie_vending_three_gun" );
        precachemodel( "zombie_vending_three_gun_on" );
        precachestring( &"ZOMBIE_PERK_ADDITIONALWEAPONPERK" );
        level._effect["additionalprimaryweapon_light"] = loadfx( "misc/fx_zombie_cola_arsenal_on" );
        level.machine_assets["additionalprimaryweapon"] = spawnstruct();
        level.machine_assets["additionalprimaryweapon"].weapon = "zombie_perk_bottle_additionalprimaryweapon";
        level.machine_assets["additionalprimaryweapon"].off_model = "zombie_vending_three_gun";
        level.machine_assets["additionalprimaryweapon"].on_model = "zombie_vending_three_gun_on";
        level.machine_assets["additionalprimaryweapon"].power_on_callback = maps\mp\zm_tomb_capture_zones::custom_vending_power_on;
        level.machine_assets["additionalprimaryweapon"].power_off_callback = maps\mp\zm_tomb_capture_zones::custom_vending_power_off;
    }

    if ( isdefined( level.zombiemode_using_deadshot_perk ) && level.zombiemode_using_deadshot_perk )
    {
        precacheitem( "zombie_perk_bottle_deadshot" );
        precacheshader( "specialty_ads_zombies" );
        precachemodel( "zombie_vending_ads" );
        precachemodel( "zombie_vending_ads_on" );
        precachestring( &"ZOMBIE_PERK_DEADSHOT" );
        level._effect["deadshot_light"] = loadfx( "misc/fx_zombie_cola_dtap_on" );
        level.machine_assets["deadshot"] = spawnstruct();
        level.machine_assets["deadshot"].weapon = "zombie_perk_bottle_deadshot";
        level.machine_assets["deadshot"].off_model = "zombie_vending_ads";
        level.machine_assets["deadshot"].on_model = "zombie_vending_ads_on";
    }

    if ( isdefined( level.zombiemode_using_divetonuke_perk ) && level.zombiemode_using_divetonuke_perk )
    {
        precacheitem( "zombie_perk_bottle_nuke" );
        precacheshader( "specialty_divetonuke_zombies" );
        precachemodel( "zombie_vending_nuke" );
        precachemodel( "zombie_vending_nuke_on" );
        precachestring( &"ZOMBIE_PERK_DIVETONUKE" );
        level._effect["divetonuke_light"] = loadfx( "misc/fx_zombie_cola_dtap_on" );
        level.machine_assets["divetonuke"] = spawnstruct();
        level.machine_assets["divetonuke"].weapon = "zombie_perk_bottle_nuke";
        level.machine_assets["divetonuke"].off_model = "zombie_vending_nuke";
        level.machine_assets["divetonuke"].on_model = "zombie_vending_nuke_on";
    }

    if ( isdefined( level.zombiemode_using_doubletap_perk ) && level.zombiemode_using_doubletap_perk )
    {
        precacheitem( "zombie_perk_bottle_doubletap" );
        precacheshader( "specialty_doubletap_zombies" );
        precachemodel( "zombie_vending_doubletap2" );
        precachemodel( "zombie_vending_doubletap2_on" );
        precachestring( &"ZOMBIE_PERK_DOUBLETAP" );
        level._effect["doubletap_light"] = loadfx( "misc/fx_zombie_cola_dtap_on" );
        level.machine_assets["doubletap"] = spawnstruct();
        level.machine_assets["doubletap"].weapon = "zombie_perk_bottle_doubletap";
        level.machine_assets["doubletap"].off_model = "zombie_vending_doubletap2";
        level.machine_assets["doubletap"].on_model = "zombie_vending_doubletap2_on";
    }

    if ( isdefined( level.zombiemode_using_juggernaut_perk ) && level.zombiemode_using_juggernaut_perk )
    {
        precacheitem( "zombie_perk_bottle_jugg" );
        precacheshader( "specialty_juggernaut_zombies" );
        precachemodel( "zombie_vending_jugg" );
        precachemodel( "zombie_vending_jugg_on" );
        precachestring( &"ZOMBIE_PERK_JUGGERNAUT" );
        level._effect["jugger_light"] = loadfx( "misc/fx_zombie_cola_jugg_on" );
        level.machine_assets["juggernog"] = spawnstruct();
        level.machine_assets["juggernog"].weapon = "zombie_perk_bottle_jugg";
        level.machine_assets["juggernog"].off_model = "zombie_vending_jugg";
        level.machine_assets["juggernog"].on_model = "zombie_vending_jugg_on";
        level.machine_assets["juggernog"].power_on_callback = maps\mp\zm_tomb_capture_zones::custom_vending_power_on;
        level.machine_assets["juggernog"].power_off_callback = maps\mp\zm_tomb_capture_zones::custom_vending_power_off;
    }

    if ( isdefined( level.zombiemode_using_marathon_perk ) && level.zombiemode_using_marathon_perk )
    {
        precacheitem( "zombie_perk_bottle_marathon" );
        precacheshader( "specialty_marathon_zombies" );
        precachemodel( "zombie_vending_marathon" );
        precachemodel( "zombie_vending_marathon_on" );
        precachestring( &"ZOMBIE_PERK_MARATHON" );
        level._effect["marathon_light"] = loadfx( "maps/zombie/fx_zmb_cola_staminup_on" );
        level.machine_assets["marathon"] = spawnstruct();
        level.machine_assets["marathon"].weapon = "zombie_perk_bottle_marathon";
        level.machine_assets["marathon"].off_model = "zombie_vending_marathon";
        level.machine_assets["marathon"].on_model = "zombie_vending_marathon_on";
        level.machine_assets["marathon"].power_on_callback = maps\mp\zm_tomb_capture_zones::custom_vending_power_on;
        level.machine_assets["marathon"].power_off_callback = maps\mp\zm_tomb_capture_zones::custom_vending_power_off;
    }

    if ( isdefined( level.zombiemode_using_revive_perk ) && level.zombiemode_using_revive_perk )
    {
        precacheitem( "zombie_perk_bottle_revive" );
        precacheshader( "specialty_quickrevive_zombies" );
        precachemodel( "p6_zm_tm_vending_revive" );
        precachemodel( "p6_zm_tm_vending_revive_on" );
        precachestring( &"ZOMBIE_PERK_QUICKREVIVE" );
        level._effect["revive_light"] = loadfx( "misc/fx_zombie_cola_revive_on" );
        level._effect["revive_light_flicker"] = loadfx( "maps/zombie/fx_zmb_cola_revive_flicker" );
        level.machine_assets["revive"] = spawnstruct();
        level.machine_assets["revive"].weapon = "zombie_perk_bottle_revive";
        level.machine_assets["revive"].off_model = "p6_zm_tm_vending_revive";
        level.machine_assets["revive"].on_model = "p6_zm_tm_vending_revive_on";
        level.machine_assets["revive"].power_on_callback = maps\mp\zm_tomb_capture_zones::custom_vending_power_on;
        level.machine_assets["revive"].power_off_callback = maps\mp\zm_tomb_capture_zones::custom_vending_power_off;
    }

    if ( isdefined( level.zombiemode_using_sleightofhand_perk ) && level.zombiemode_using_sleightofhand_perk )
    {
        precacheitem( "zombie_perk_bottle_sleight" );
        precacheshader( "specialty_fastreload_zombies" );
        precachemodel( "zombie_vending_sleight" );
        precachemodel( "zombie_vending_sleight_on" );
        precachestring( &"ZOMBIE_PERK_FASTRELOAD" );
        level._effect["sleight_light"] = loadfx( "misc/fx_zombie_cola_on" );
        level.machine_assets["speedcola"] = spawnstruct();
        level.machine_assets["speedcola"].weapon = "zombie_perk_bottle_sleight";
        level.machine_assets["speedcola"].off_model = "zombie_vending_sleight";
        level.machine_assets["speedcola"].on_model = "zombie_vending_sleight_on";
        level.machine_assets["speedcola"].power_on_callback = maps\mp\zm_tomb_capture_zones::custom_vending_power_on;
        level.machine_assets["speedcola"].power_off_callback = maps\mp\zm_tomb_capture_zones::custom_vending_power_off;
    }

    if ( isdefined( level.zombiemode_using_tombstone_perk ) && level.zombiemode_using_tombstone_perk )
    {
        precacheitem( "zombie_perk_bottle_tombstone" );
        precacheshader( "specialty_tombstone_zombies" );
        precachemodel( "zombie_vending_tombstone" );
        precachemodel( "zombie_vending_tombstone_on" );
        precachemodel( "ch_tombstone1" );
        precachestring( &"ZOMBIE_PERK_TOMBSTONE" );
        level._effect["tombstone_light"] = loadfx( "misc/fx_zombie_cola_on" );
        level.machine_assets["tombstone"] = spawnstruct();
        level.machine_assets["tombstone"].weapon = "zombie_perk_bottle_tombstone";
        level.machine_assets["tombstone"].off_model = "zombie_vending_tombstone";
        level.machine_assets["tombstone"].on_model = "zombie_vending_tombstone_on";
    }

    if ( isdefined( level.zombiemode_using_chugabud_perk ) && level.zombiemode_using_chugabud_perk )
    {
        precacheitem( "zombie_perk_bottle_whoswho" );
        precacheshader( "specialty_quickrevive_zombies" );
        precachemodel( "p6_zm_vending_chugabud" );
        precachemodel( "p6_zm_vending_chugabud_on" );
        precachemodel( "ch_tombstone1" );
        precachestring( &"ZOMBIE_PERK_TOMBSTONE" );
        level._effect["tombstone_light"] = loadfx( "misc/fx_zombie_cola_on" );
        level.machine_assets["whoswho"] = spawnstruct();
        level.machine_assets["whoswho"].weapon = "zombie_perk_bottle_whoswho";
        level.machine_assets["whoswho"].off_model = "p6_zm_vending_chugabud";
        level.machine_assets["whoswho"].on_model = "p6_zm_vending_chugabud_on";
    }
}

tomb_actor_damage_override_wrapper( inflictor, attacker, damage, flags, meansofdeath, weapon, vpoint, vdir, shitloc, psoffsettime, boneindex )
{
    if ( isdefined( self.script_noteworthy ) && self.script_noteworthy == "capture_zombie" && isdefined( attacker ) && isplayer( attacker ) )
    {
        if ( damage >= self.health )
        {
            if ( 100 * level.round_number > attacker.n_capture_zombie_points )
            {
                attacker maps\mp\zombies\_zm_score::player_add_points( "rebuild_board", 10 );
                attacker.n_capture_zombie_points = attacker.n_capture_zombie_points + 10;
            }
        }
    }

    return_val = self maps\mp\zombies\_zm::actor_damage_override_wrapper( inflictor, attacker, damage, flags, meansofdeath, weapon, vpoint, vdir, shitloc, psoffsettime, boneindex );

    if ( damage >= self.health )
    {
        if ( isdefined( self.b_on_tank ) && self.b_on_tank )
            self maps\mp\zm_tomb_tank::zombie_on_tank_death_animscript_callback( inflictor, attacker, damage, flags, meansofdeath, weapon, vpoint, vdir, shitloc, psoffsettime, boneindex );

        if ( isplayer( inflictor ) )
            inflictor maps\mp\zombies\_zm_challenges::player_increment_stat( "zombie_kills" );
    }

    return return_val;
}
