// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\zombies\_zm_net;
#include maps\mp\zm_tomb_utility;
#include maps\mp\zombies\_zm_ai_basic;
#include maps\mp\zombies\_zm_spawner;
#include maps\mp\zombies\_zm_audio;

init()
{
    registerclientfield( "actor", "fire_char_fx", 14000, 1, "int" );
    onplayerconnect_callback( ::onplayerconnect );
    maps\mp\zombies\_zm_ai_basic::init_inert_zombies();
    maps\mp\zombies\_zm_spawner::register_zombie_damage_callback( ::staff_fire_zombie_damage_response );
    maps\mp\zombies\_zm_spawner::register_zombie_death_event_callback( ::staff_fire_death_event );
}

onplayerconnect()
{
    self thread onplayerspawned();
}

onplayerspawned()
{
    self endon( "disconnect" );

    while ( true )
    {
        self waittill( "spawned_player" );
        self thread watch_staff_fire_fired();
        self thread watch_staff_usage();
    }
}

watch_staff_fire_fired()
{
    self endon( "disconnect" );

    while ( true )
    {
        self waittill( "grenade_fire", e_projectile, str_weapon );

        if ( str_weapon == "staff_fire_upgraded2_zm" || str_weapon == "staff_fire_upgraded3_zm" )
            self fire_additional_shots( str_weapon );
    }
}

fire_additional_shots( str_weapon )
{
    self endon( "disconnect" );
    self endon( "weapon_change" );
    n_shots = 1;

    if ( str_weapon == "staff_fire_upgraded3_zm" )
        n_shots = 2;

    for ( i = 1; i <= n_shots; i++ )
    {
        wait 0.35;

        if ( isdefined( self ) && self getcurrentweapon() == "staff_fire_upgraded_zm" )
        {
            v_player_angles = self getplayerangles();
            n_player_pitch = v_player_angles[0];
            n_player_pitch = n_player_pitch + 5 * i;
            n_player_yaw = v_player_angles[1] + randomfloatrange( -15.0, 15.0 );
            v_shot_angles = ( n_player_pitch, n_player_yaw, v_player_angles[2] );
            v_shot_start = self getplayercamerapos() + anglestoforward( v_player_angles ) * 16;
            v_shot_end = v_shot_start + anglestoforward( v_shot_angles );
            magicbullet( str_weapon, v_shot_start, v_shot_end, self );
        }
    }
}

staff_fire_zombie_damage_response( mod, hit_location, hit_origin, player, amount )
{
    if ( self is_staff_fire_damage() )
    {
        self thread staff_fire_zombie_hit_response_internal( mod, self.damageweapon, player );
        return true;
    }

    return false;
}

is_staff_fire_damage()
{
    return isdefined( self.damageweapon ) && ( self.damageweapon == "staff_fire_zm" || self.damageweapon == "staff_fire_upgraded_zm" || self.damageweapon == "staff_fire_upgraded2_zm" || self.damageweapon == "staff_fire_upgraded3_zm" );
}

staff_fire_zombie_hit_response_internal( mod, damageweapon, player )
{
    player endon( "disconnect" );

    if ( !isalive( self ) )
        return;

    if ( is_true( self.is_mechz ) )
        return;

    self thread flame_damage_fx( damageweapon, player );
}

staff_fire_death_event()
{
    if ( is_staff_fire_damage() )
    {
        self thread maps\mp\zombies\_zm_audio::do_zombies_playvocals( "death", self.animname );
        self thread zombie_eye_glow_stop();
        tag = "J_SpineLower";

        if ( self.isdog )
            tag = "J_Spine1";

        network_safe_play_fx_on_tag( "fire_hit", 2, level._effect["character_fire_death_torso"], self, tag );
    }
}

on_fire_timeout()
{
    self endon( "death" );
    wait( randomintrange( 6, 11 ) );
    self.is_on_fire = 0;
    self notify( "stop_flame_damage" );
}

flame_damage_fx( damageweapon, player )
{
    self endon( "death" );

    if ( isdefined( self.is_on_fire ) && self.is_on_fire )
        return;

    self.is_on_fire = 1;
    self thread flame_damage_over_time( player, damageweapon );
    self thread on_fire_timeout();
    tag = "J_HEAD";

    if ( self.isdog )
        tag = "J_Spine1";

    network_safe_play_fx_on_tag( "fire_hit", 2, level._effect["character_fire_death_sm"], self, tag );
}

flame_damage_over_time( player, damageweapon )
{
    player endon( "disconnect" );
    self endon( "death" );
    self endon( "stop_flame_damage" );

    switch ( damageweapon )
    {
        case "staff_fire_zm":
            n_damage = 100;
            break;
        case "staff_fire_upgraded_zm":
            n_damage = 200;
            break;
        case "staff_fire_upgraded2_zm":
            n_damage = 300;
            break;
        case "staff_fire_upgraded3_zm":
            n_damage = 400;
            break;
    }

    while ( true )
    {
        self dodamage( n_damage, self.origin, player, self, "none", "MOD_BURNED", 0 );
        wait 1;
    }
}

stop_zombie()
{
    e_linker = spawn( "script_origin", ( 0, 0, 0 ) );
    e_linker.origin = self.origin;
    e_linker.angles = self.angles;
    self linkto( e_linker );
    self waittill( "death" );
    e_linker delete();
}
